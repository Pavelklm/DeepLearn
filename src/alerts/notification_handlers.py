"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
"""

import asyncio
from datetime import datetime
from typing import Dict, Any

from src.alerts.alert_manager import Alert, AlertLevel
from src.utils.logger import get_component_logger

logger = get_component_logger("alert_handlers")


class LogNotificationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    def __init__(self):
        self.logger = logger
        self.notification_count = 0
        
    async def handle_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.notification_count += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if alert.level == AlertLevel.CRITICAL or alert.level == AlertLevel.EMERGENCY:
            log_level = "error"
        elif alert.level == AlertLevel.WARNING:
            log_level = "warning" 
        else:
            log_level = "info"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        log_data = {
            "alert_id": alert.id,
            "alert_level": alert.level.value,
            "alert_type": alert.type.value,
            "title": alert.title,
            "message": alert.message,
            "component": alert.component,
            "symbol": alert.symbol,
            "exchange": alert.exchange
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if alert.data:
            if "usd_value" in alert.data:
                log_data["usd_value"] = alert.data["usd_value"]
            if "weight" in alert.data:
                log_data["weight"] = alert.data["weight"]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if log_level == "error":
            self.logger.error("üö® CRITICAL ALERT", **log_data)
        elif log_level == "warning":
            self.logger.warning("‚ö†Ô∏è  ALERT", **log_data) 
        else:
            self.logger.info("üíé ALERT", **log_data)


class ConsoleNotificationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å"""
    
    def __init__(self):
        self.notification_count = 0
        
    async def handle_alert(self, alert: Alert):
        """–í—ã–≤–æ–¥ –∞–ª–µ—Ä—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        self.notification_count += 1
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
        emoji_map = {
            AlertLevel.INFO: "‚ÑπÔ∏è",
            AlertLevel.WARNING: "‚ö†Ô∏è", 
            AlertLevel.CRITICAL: "üö®",
            AlertLevel.EMERGENCY: "üî•"
        }
        
        emoji = emoji_map.get(alert.level, "üì¢")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = alert.timestamp.strftime("%H:%M:%S")
        
        print(f"\n{emoji} [{time_str}] {alert.title}")
        print(f"   {alert.message}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        if alert.level in [AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]:
            if alert.component:
                print(f"   Component: {alert.component}")
            if alert.symbol:
                print(f"   Symbol: {alert.symbol}")
            if alert.data and "usd_value" in alert.data:
                print(f"   Value: ${alert.data['usd_value']:,.2f}")


class FileNotificationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    
    def __init__(self, filename: str = "data/alerts_notifications.log"):
        self.filename = filename
        self.notification_count = 0
        
    async def handle_alert(self, alert: Alert):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª"""
        self.notification_count += 1
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            timestamp = alert.timestamp.isoformat()
            line = f"[{timestamp}] {alert.level.value.upper()} | {alert.type.value} | {alert.title} | {alert.message}"
            
            if alert.symbol:
                line += f" | Symbol: {alert.symbol}"
            if alert.data and "usd_value" in alert.data:
                line += f" | Value: ${alert.data['usd_value']:,.2f}"
            
            line += "\n"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            import aiofiles
            async with aiofiles.open(self.filename, mode='a', encoding='utf-8') as f:
                await f.write(line)
                
        except Exception as e:
            logger.error("Error writing alert to file", filename=self.filename, error=str(e))


async def setup_default_handlers(alert_manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω)
    log_handler = LogNotificationHandler()
    alert_manager.add_notification_handler("log", log_handler.handle_alert)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è –≤–∞–∂–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤)
    console_handler = ConsoleNotificationHandler()
    
    async def console_filter(alert: Alert):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        if alert.level in [AlertLevel.WARNING, AlertLevel.CRITICAL, AlertLevel.EMERGENCY]:
            await console_handler.handle_alert(alert)
    
    alert_manager.add_notification_handler("console", console_filter)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ (–¥–ª—è diamond –æ—Ä–¥–µ—Ä–æ–≤ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤)
    file_handler = FileNotificationHandler()
    
    async def file_filter(alert: Alert):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        if (alert.type.value == "diamond_order" or 
            alert.level in [AlertLevel.CRITICAL, AlertLevel.EMERGENCY]):
            await file_handler.handle_alert(alert)
    
    alert_manager.add_notification_handler("file", file_filter)
    
    logger.info("Default alert handlers configured",
                handlers=["log", "console", "file"])


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

async def webhook_handler(alert: Alert, webhook_url: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ webhook"""
    try:
        import aiohttp
        import json
        
        payload = {
            "timestamp": alert.timestamp.isoformat(),
            "level": alert.level.value,
            "type": alert.type.value, 
            "title": alert.title,
            "message": alert.message,
            "component": alert.component,
            "symbol": alert.symbol,
            "exchange": alert.exchange,
            "data": alert.data
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(webhook_url, 
                                   json=payload,
                                   timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    logger.debug("Webhook alert sent successfully", url=webhook_url)
                else:
                    logger.warning("Webhook alert failed", 
                                 url=webhook_url, status=response.status)
                                 
    except Exception as e:
        logger.error("Error sending webhook alert", url=webhook_url, error=str(e))


async def email_handler(alert: Alert, smtp_config: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ email"""
    try:
        import aiosmtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        
        # –°–æ–∑–¥–∞–µ–º email —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = smtp_config['from_email']
        msg['To'] = smtp_config['to_email']
        msg['Subject'] = f"Scanner Alert: {alert.title}"
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        body = f"""
Alert Details:
- Level: {alert.level.value.upper()}
- Type: {alert.type.value}
- Time: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}
- Component: {alert.component or 'N/A'}
- Symbol: {alert.symbol or 'N/A'}
- Exchange: {alert.exchange or 'N/A'}

Message: {alert.message}
        """
        
        if alert.data:
            body += f"\nAdditional Data: {alert.data}"
        
        msg.attach(MIMEText(body, 'plain'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await aiosmtplib.send(
            msg,
            hostname=smtp_config['hostname'],
            port=smtp_config['port'],
            use_tls=smtp_config.get('use_tls', True),
            username=smtp_config.get('username'),
            password=smtp_config.get('password')
        )
        
        logger.debug("Email alert sent successfully", to=smtp_config['to_email'])
        
    except Exception as e:
        logger.error("Error sending email alert", error=str(e))
