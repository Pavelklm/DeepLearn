"""
–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import json
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
from enum import Enum
from pathlib import Path

from src.utils.logger import get_component_logger

logger = get_component_logger("alerts")


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning" 
    CRITICAL = "critical"
    EMERGENCY = "emergency"


class AlertType(Enum):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    SYSTEM_HEALTH = "system_health"
    PERFORMANCE = "performance"
    DIAMOND_ORDER = "diamond_order"
    HIGH_VALUE_ORDER = "high_value_order"
    MARKET_ANOMALY = "market_anomaly"
    API_ERROR = "api_error"
    CONNECTION_LOST = "connection_lost"


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""
    id: str
    timestamp: datetime
    level: AlertLevel
    type: AlertType
    title: str
    message: str
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    component: Optional[str] = None
    symbol: Optional[str] = None
    exchange: Optional[str] = None
    
    # –î–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞
    data: Optional[Dict[str, Any]] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    acknowledged: bool = False
    resolved: bool = False
    resolved_at: Optional[datetime] = None
    
    def __post_init__(self):
        if self.data is None:
            self.data = {}


class AlertRule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, 
                 rule_id: str,
                 alert_type: AlertType,
                 alert_level: AlertLevel,
                 condition_func: Callable[[Dict], bool],
                 title_template: str,
                 message_template: str,
                 cooldown_seconds: int = 300):
        """
        Args:
            rule_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∞–≤–∏–ª–∞
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞
            alert_level: –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
            condition_func: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è
            title_template: –®–∞–±–ª–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
            message_template: –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            cooldown_seconds: –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        """
        self.rule_id = rule_id
        self.alert_type = alert_type
        self.alert_level = alert_level
        self.condition_func = condition_func
        self.title_template = title_template
        self.message_template = message_template
        self.cooldown_seconds = cooldown_seconds
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        self.last_triggered = None
        self.trigger_count = 0
        self.is_active = True
    
    def check_condition(self, context: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.is_active:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if self.last_triggered:
            cooldown_expires = self.last_triggered + timedelta(seconds=self.cooldown_seconds)
            if datetime.now(timezone.utc) < cooldown_expires:
                return False
        
        try:
            return self.condition_func(context)
        except Exception as e:
            logger.warning("Error in alert rule condition", 
                          rule_id=self.rule_id, error=str(e))
            return False
    
    def create_alert(self, context: Dict) -> Alert:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        alert_id = f"{self.rule_id}_{int(datetime.now(timezone.utc).timestamp())}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            title = self.title_template.format(**context)
            message = self.message_template.format(**context)
        except KeyError as e:
            title = f"Alert: {self.rule_id}"
            message = f"Alert triggered but template formatting failed: {e}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        self.last_triggered = datetime.now(timezone.utc)
        self.trigger_count += 1
        
        return Alert(
            id=alert_id,
            timestamp=datetime.now(timezone.utc),
            level=self.alert_level,
            type=self.alert_type,
            title=title,
            message=message,
            component=context.get('component'),
            symbol=context.get('symbol'),
            exchange=context.get('exchange'),
            data=context.copy()
        )


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logger
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–ª–µ—Ä—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª
        self.active_alerts: Dict[str, Alert] = {}
        self.alert_history: List[Alert] = []
        self.alert_rules: Dict[str, AlertRule] = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_handlers: Dict[str, Callable] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.max_history_size = 1000
        self.auto_resolve_timeout = 3600  # 1 —á–∞—Å
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.alerts_file = Path("data/alerts.json")
        self.alerts_file.parent.mkdir(exist_ok=True)
        
        # –ó–∞–¥–∞—á–∏
        self.cleanup_task = None
        self.save_task = None
        self.is_running = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        self._setup_default_rules()
    
    def _setup_default_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        
        # –ê–ª–µ—Ä—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        self.add_rule(AlertRule(
            rule_id="component_critical",
            alert_type=AlertType.SYSTEM_HEALTH,
            alert_level=AlertLevel.CRITICAL,
            condition_func=lambda ctx: ctx.get('health_status') == 'critical',
            title_template="Critical: {component} system failure",
            message_template="Component {component} is in critical state: {message}",
            cooldown_seconds=300
        ))
        
        # –ê–ª–µ—Ä—Ç –≤—ã—Å–æ–∫–æ–≥–æ error rate
        self.add_rule(AlertRule(
            rule_id="high_error_rate",
            alert_type=AlertType.PERFORMANCE,
            alert_level=AlertLevel.WARNING,
            condition_func=lambda ctx: ctx.get('error_rate', 0) > 0.1,
            title_template="High Error Rate: {component}",
            message_template="Component {component} has error rate {error_rate:.2%}, threshold exceeded",
            cooldown_seconds=600
        ))
        
        # –ê–ª–µ—Ä—Ç diamond –æ—Ä–¥–µ—Ä–∞
        self.add_rule(AlertRule(
            rule_id="diamond_order_detected",
            alert_type=AlertType.DIAMOND_ORDER,
            alert_level=AlertLevel.INFO,
            condition_func=lambda ctx: (
                ctx.get('category') == 'diamond' and 
                ctx.get('usd_value', 0) > 10000
            ),
            title_template="üíé Diamond Order: {symbol}",
            message_template="Diamond order detected: {symbol} ${usd_value:,.2f} (weight: {weight:.3f})",
            cooldown_seconds=60
        ))
        
        # –ê–ª–µ—Ä—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
        self.add_rule(AlertRule(
            rule_id="high_value_order",
            alert_type=AlertType.HIGH_VALUE_ORDER,
            alert_level=AlertLevel.WARNING,
            condition_func=lambda ctx: ctx.get('usd_value', 0) > 100000,
            title_template="üö® Large Order: {symbol}",
            message_template="Very large order: {symbol} ${usd_value:,.2f} - {side} at ${price}",
            cooldown_seconds=300
        ))
        
        # –ê–ª–µ—Ä—Ç –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.add_rule(AlertRule(
            rule_id="connection_lost", 
            alert_type=AlertType.CONNECTION_LOST,
            alert_level=AlertLevel.CRITICAL,
            condition_func=lambda ctx: not ctx.get('is_connected', True),
            title_template="Connection Lost: {component}",
            message_template="Lost connection to {component} ({exchange})",
            cooldown_seconds=60
        ))
        
        # –ê–ª–µ—Ä—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ API
        self.add_rule(AlertRule(
            rule_id="slow_api_response",
            alert_type=AlertType.PERFORMANCE,
            alert_level=AlertLevel.WARNING,
            condition_func=lambda ctx: ctx.get('avg_response_time', 0) > 5.0,
            title_template="Slow API Response: {component}",
            message_template="API response time is {avg_response_time:.2f}s (threshold: 5.0s)",
            cooldown_seconds=300
        ))
    
    def add_rule(self, rule: AlertRule):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        self.alert_rules[rule.rule_id] = rule
        self.logger.debug("Alert rule added", rule_id=rule.rule_id, type=rule.alert_type.value)
    
    def remove_rule(self, rule_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        if rule_id in self.alert_rules:
            del self.alert_rules[rule_id]
            self.logger.debug("Alert rule removed", rule_id=rule_id)
    
    def add_notification_handler(self, name: str, handler: Callable[[Alert], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_handlers[name] = handler
        self.logger.info("Notification handler added", name=name)
    
    def remove_notification_handler(self, name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if name in self.notification_handlers:
            del self.notification_handlers[name]
            self.logger.info("Notification handler removed", name=name)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
        if self.is_running:
            return
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        self.cleanup_task = asyncio.create_task(self._cleanup_loop())
        self.save_task = asyncio.create_task(self._save_loop())
        
        self.logger.info("Alert system started", 
                        rules_count=len(self.alert_rules),
                        handlers_count=len(self.notification_handlers))
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
        if not self.is_running:
            return
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        if self.save_task:
            self.save_task.cancel()
            try:
                await self.save_task
            except asyncio.CancelledError:
                pass
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await self._save_alerts()
        
        self.logger.info("Alert system stopped")
    
    async def check_conditions(self, context: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –∞–ª–µ—Ä—Ç–æ–≤"""
        if not self.is_running:
            return
        
        triggered_alerts = []
        
        for rule in self.alert_rules.values():
            if rule.check_condition(context):
                alert = rule.create_alert(context)
                triggered_alerts.append(alert)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
        for alert in triggered_alerts:
            await self._process_alert(alert)
    
    async def _process_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            self.active_alerts[alert.id] = alert
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.alert_history.append(alert)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.alert_history) > self.max_history_size:
                self.alert_history = self.alert_history[-self.max_history_size:]
            
            self.logger.info("Alert triggered", 
                           alert_id=alert.id,
                           level=alert.level.value,
                           type=alert.type.value,
                           title=alert.title)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self._send_notifications(alert)
            
        except Exception as e:
            self.logger.error("Error processing alert", alert_id=alert.id, error=str(e))
    
    async def _send_notifications(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        for handler_name, handler in self.notification_handlers.items():
            try:
                if asyncio.iscoroutinefunction(handler):
                    await handler(alert)
                else:
                    handler(alert)
                    
            except Exception as e:
                self.logger.error("Error in notification handler", 
                                handler=handler_name, 
                                alert_id=alert.id, 
                                error=str(e))
    
    async def acknowledge_alert(self, alert_id: str, user: str = "system"):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        if alert_id in self.active_alerts:
            alert = self.active_alerts[alert_id]
            alert.acknowledged = True
            
            self.logger.info("Alert acknowledged", 
                           alert_id=alert_id, user=user)
    
    async def resolve_alert(self, alert_id: str, user: str = "system"):
        """–†–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        if alert_id in self.active_alerts:
            alert = self.active_alerts[alert_id]
            alert.resolved = True
            alert.resolved_at = datetime.now(timezone.utc)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            del self.active_alerts[alert_id]
            
            self.logger.info("Alert resolved", 
                           alert_id=alert_id, user=user)
    
    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        while self.is_running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self._cleanup_old_alerts()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error("Error in cleanup loop", error=str(e))
    
    async def _cleanup_old_alerts(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        cutoff_time = datetime.now(timezone.utc) - timedelta(seconds=self.auto_resolve_timeout)
        
        to_resolve = []
        for alert_id, alert in self.active_alerts.items():
            if alert.timestamp < cutoff_time and not alert.acknowledged:
                to_resolve.append(alert_id)
        
        for alert_id in to_resolve:
            await self.resolve_alert(alert_id, "auto-cleanup")
    
    async def _save_loop(self):
        """–¶–∏–∫–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        while self.is_running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self._save_alerts()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error("Error in save loop", error=str(e))
    
    async def _save_alerts(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            export_data = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'active_alerts': {
                    alert_id: {
                        **asdict(alert),
                        'timestamp': alert.timestamp.isoformat(),
                        'resolved_at': alert.resolved_at.isoformat() if alert.resolved_at else None,
                        'level': alert.level.value,
                        'type': alert.type.value
                    }
                    for alert_id, alert in self.active_alerts.items()
                },
                'recent_history': [
                    {
                        **asdict(alert),
                        'timestamp': alert.timestamp.isoformat(),
                        'resolved_at': alert.resolved_at.isoformat() if alert.resolved_at else None,
                        'level': alert.level.value,
                        'type': alert.type.value
                    }
                    for alert in self.alert_history[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∞–ª–µ—Ä—Ç–æ–≤
                ]
            }
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
            temp_file = self.alerts_file.with_suffix('.tmp')
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            temp_file.replace(self.alerts_file)
            
        except Exception as e:
            self.logger.error("Error saving alerts", error=str(e))
    
    def get_active_alerts(self, level: AlertLevel = None) -> List[Alert]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        alerts = list(self.active_alerts.values())
        
        if level:
            alerts = [a for a in alerts if a.level == level]
        
        return sorted(alerts, key=lambda x: x.timestamp, reverse=True)
    
    def get_alert_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤"""
        active_by_level = {}
        for alert in self.active_alerts.values():
            level = alert.level.value
            active_by_level[level] = active_by_level.get(level, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 24 —á–∞—Å–∞–º
        cutoff_24h = datetime.now(timezone.utc) - timedelta(hours=24)
        recent_alerts = [a for a in self.alert_history if a.timestamp >= cutoff_24h]
        
        recent_by_level = {}
        for alert in recent_alerts:
            level = alert.level.value
            recent_by_level[level] = recent_by_level.get(level, 0) + 1
        
        return {
            'active_alerts_total': len(self.active_alerts),
            'active_by_level': active_by_level,
            'total_history': len(self.alert_history),
            'recent_24h_total': len(recent_alerts),
            'recent_24h_by_level': recent_by_level,
            'rules_count': len(self.alert_rules),
            'handlers_count': len(self.notification_handlers),
            'is_running': self.is_running
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤
_alert_manager: Optional[AlertManager] = None


def get_alert_manager() -> AlertManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    global _alert_manager
    
    if _alert_manager is None:
        _alert_manager = AlertManager()
    
    return _alert_manager


async def start_alerts():
    """–ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    manager = get_alert_manager()
    await manager.start()
    return manager


async def stop_alerts():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    global _alert_manager
    
    if _alert_manager:
        await _alert_manager.stop()
        _alert_manager = None


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
async def alert_diamond_order(symbol: str, usd_value: float, weight: float, **kwargs):
    """–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç diamond –æ—Ä–¥–µ—Ä–∞"""
    manager = get_alert_manager()
    context = {
        'category': 'diamond',
        'symbol': symbol,
        'usd_value': usd_value,
        'weight': weight,
        **kwargs
    }
    await manager.check_conditions(context)


async def alert_system_health(component: str, health_status: str, message: str, **kwargs):
    """–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    manager = get_alert_manager()
    context = {
        'component': component,
        'health_status': health_status,
        'message': message,
        **kwargs
    }
    await manager.check_conditions(context)
