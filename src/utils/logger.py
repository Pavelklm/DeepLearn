"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
"""

import logging
import logging.handlers
from pathlib import Path
from datetime import datetime
from typing import Optional

from config.main_config import LOGGING_CONFIG, FILE_CONFIG


def setup_logger(name: str, level: Optional[str] = None) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path(FILE_CONFIG["logs_directory"])
    logs_dir.mkdir(exist_ok=True)
    
    # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = level or LOGGING_CONFIG["level"]
    numeric_level = getattr(logging, log_level.upper(), logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(name)
    logger.setLevel(numeric_level)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        fmt='%(asctime)s [%(levelname)s] %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –§–∞–π–ª –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
    log_file = logs_dir / "scanner.log"
    file_handler = logging.handlers.RotatingFileHandler(
        filename=log_file,
        maxBytes=LOGGING_CONFIG["max_file_size"],
        backupCount=LOGGING_CONFIG["backup_count"],
        encoding='utf-8'
    )
    file_handler.setLevel(numeric_level)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = logging.StreamHandler()
    console_handler.setLevel(numeric_level)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # –§–∞–π–ª –æ—à–∏–±–æ–∫
    error_file = logs_dir / "errors.log"
    error_handler = logging.handlers.RotatingFileHandler(
        filename=error_file,
        maxBytes=LOGGING_CONFIG["max_file_size"],
        backupCount=LOGGING_CONFIG["backup_count"],
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    logger.addHandler(error_handler)
    
    return logger


def get_component_logger(component: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Args:
        component: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return setup_logger(f"scanner.{component}")


class SimpleLogger:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, component: str):
        self.logger = get_component_logger(component)
        self.component = component
    
    def info(self, message: str, **kwargs):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if kwargs:
            details = ", ".join([f"{k}: {v}" for k, v in kwargs.items()])
            self.logger.info(f"{message} ({details})")
        else:
            self.logger.info(message)
    
    def debug(self, message: str, **kwargs):
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if kwargs:
            details = ", ".join([f"{k}: {v}" for k, v in kwargs.items()])
            self.logger.debug(f"{message} ({details})")
        else:
            self.logger.debug(message)
    
    def warning(self, message: str, **kwargs):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        if kwargs:
            details = ", ".join([f"{k}: {v}" for k, v in kwargs.items()])
            self.logger.warning(f"{message} ({details})")
        else:
            self.logger.warning(message)
    
    def error(self, message: str, **kwargs):
        """–û—à–∏–±–∫–∞"""
        if kwargs:
            details = ", ".join([f"{k}: {v}" for k, v in kwargs.items()])
            self.logger.error(f"{message} ({details})")
        else:
            self.logger.error(message)
    
    def success(self, message: str, **kwargs):
        """–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–∫–∞–∫ info –Ω–æ —Å –ø–æ–º–µ—Ç–∫–æ–π)"""
        self.info(f"‚úì {message}", **kwargs)
    
    def start_operation(self, operation: str):
        """–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.info(f"–ó–∞–ø—É—Å–∫: {operation}")
    
    def finish_operation(self, operation: str, duration: float = None, success: bool = True):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        status = "—É—Å–ø–µ—à–Ω–æ" if success else "—Å –æ—à–∏–±–∫–æ–π"
        if duration:
            self.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {status}: {operation} ({duration:.2f}—Å)")
        else:
            self.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {status}: {operation}")
    
    def stats(self, title: str, **stats):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_str = ", ".join([f"{k}: {v}" for k, v in stats.items()])
        self.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {title}: {stats_str}")
    
    def order_event(self, event: str, symbol: str, usd_value: float = None, order_hash: str = None):
        """–°–æ–±—ã—Ç–∏–µ —Å –æ—Ä–¥–µ—Ä–æ–º"""
        details = [symbol]
        if usd_value:
            details.append(f"${usd_value:,.0f}")
        if order_hash:
            details.append(f"#{order_hash[:8]}")
        
        self.info(f"–û—Ä–¥–µ—Ä {event}: {' '.join(details)}")
    
    def api_call(self, exchange: str, method: str, symbol: str = None, success: bool = True, duration: float = None):
        """API –≤—ã–∑–æ–≤"""
        status = "OK" if success else "–û–®–ò–ë–ö–ê"
        details = [exchange, method]
        if symbol:
            details.append(symbol)
        if duration:
            details.append(f"{duration:.2f}—Å")
        
        self.debug(f"API {status}: {' '.join(details)}")
    
    def pool_status(self, pool_name: str, orders_count: int, symbols_count: int = None):
        """–°—Ç–∞—Ç—É—Å –ø—É–ª–∞"""
        details = [f"–æ—Ä–¥–µ—Ä–æ–≤: {orders_count}"]
        if symbols_count:
            details.append(f"—Å–∏–º–≤–æ–ª–æ–≤: {symbols_count}")
        
        self.info(f"–ü—É–ª {pool_name}: {', '.join(details)}")


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
main_logger = SimpleLogger("main")
scanner_logger = SimpleLogger("scanner")  
pools_logger = SimpleLogger("pools")
observer_logger = SimpleLogger("observer") 
hot_pool_logger = SimpleLogger("hot_pool")
exchange_logger = SimpleLogger("exchange")
websocket_logger = SimpleLogger("websocket")
analytics_logger = SimpleLogger("analytics")


def log_system_start():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    main_logger.info("=" * 50)
    main_logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ö–ê–ù–ù–ï–†–ê –ë–û–õ–¨–®–ò–• –û–†–î–ï–†–û–í")
    main_logger.info("=" * 50)


def log_system_stop():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""  
    main_logger.info("=" * 50)
    main_logger.info("üõë –û–°–¢–ê–ù–û–í–ö–ê –°–ö–ê–ù–ù–ï–†–ê")
    main_logger.info("=" * 50)


def log_scan_results(total_orders: int, symbols_count: int, duration: float):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    scanner_logger.success(f"–ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    scanner_logger.stats("—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                        –æ—Ä–¥–µ—Ä–æ–≤=total_orders,
                        —Å–∏–º–≤–æ–ª–æ–≤=symbols_count, 
                        –≤—Ä–µ–º—è=f"{duration:.1f}—Å")


def log_hot_pool_update(diamond_count: int, gold_count: int, basic_count: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞"""
    hot_pool_logger.pool_status("–≥–æ—Ä—è—á–∏–π",
                               diamond_count + gold_count + basic_count)
    if diamond_count > 0:
        hot_pool_logger.info(f"üíé Diamond –æ—Ä–¥–µ—Ä–æ–≤: {diamond_count}")


def log_order_transition(symbol: str, from_pool: str, to_pool: str, usd_value: float):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ä–¥–µ—Ä–∞ –º–µ–∂–¥—É –ø—É–ª–∞–º–∏"""
    pools_logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ä–¥–µ—Ä–∞: {symbol} ${usd_value:,.0f} ({from_pool} ‚Üí {to_pool})")


def log_exchange_connection(exchange: str, success: bool, symbols_count: int = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
    if success:
        details = f"—Å–∏–º–≤–æ–ª–æ–≤: {symbols_count}" if symbols_count else ""
        exchange_logger.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange} ({details})")
    else:
        exchange_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {exchange}")


def log_websocket_client(action: str, client_type: str, clients_count: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    websocket_logger.info(f"WebSocket {action}: {client_type} (–≤—Å–µ–≥–æ: {clients_count})")


def log_weight_calculation(symbol: str, algorithm: str, weight: float, category: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)"""
    analytics_logger.debug(f"–í–µ—Å {symbol}: {algorithm}={weight:.3f} ‚Üí {category}")


def log_error_with_context(component: str, error: str, **context):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    logger = SimpleLogger(component)
    context_str = ", ".join([f"{k}: {v}" for k, v in context.items()]) if context else ""
    
    if context_str:
        logger.error(f"–û—à–∏–±–∫–∞: {error} | –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_str}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞: {error}")


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class Timer:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, logger: SimpleLogger, operation: str):
        self.logger = logger
        self.operation = operation
        self.start_time = None
    
    def __enter__(self):
        self.start_time = datetime.now()
        self.logger.debug(f"–ù–∞—á–∞–ª–æ: {self.operation}")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.start_time:
            duration = (datetime.now() - self.start_time).total_seconds()
            success = exc_type is None
            self.logger.finish_operation(self.operation, duration, success)
            
            if not success:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ {self.operation}: {exc_val}")
