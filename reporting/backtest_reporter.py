# –§–∞–π–ª: trading/reporting/backtest_reporter.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from risk_management.performance_tracker import PerformanceTracker
from analytics.metrics_calculator import MetricsCalculator


class BacktestReporter:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±—ç–∫—Ç–µ—Å—Ç–∞.
    """
    def __init__(self, bot_name: str, tracker: PerformanceTracker, initial_balance: float):
        self.bot_name = bot_name
        self.tracker = tracker
        self.initial_balance = initial_balance

        sns.set_theme(style="darkgrid")

    def generate_report(self, ohlcv_data: pd.DataFrame, save_path: str = "charts"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: —Ç–µ–∫—Å—Ç + –≥—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫.
        """
        trade_history_dicts = [t.__dict__ for t in self.tracker.trade_history]

        if not trade_history_dicts:
            print(f"–û—Ç—á–µ—Ç –¥–ª—è '{self.bot_name}': –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        report_text = self._generate_text_summary(trade_history_dicts)
        print(report_text)
        self._generate_trade_chart(ohlcv_data, trade_history_dicts, save_path)

    def _generate_text_summary(self, trade_history_dicts: list) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        metrics_calculator = MetricsCalculator(trade_history_dicts, self.initial_balance)
        metrics = metrics_calculator.calculate_all_metrics()

        summary = self.tracker.get_statistics_summary()

        total_return_pct = metrics.total_return_pct
        final_balance = self.initial_balance * (1 + metrics.total_return_pct / 100)
        max_drawdown_pct = metrics.max_drawdown_pct

        report = f"""
        ============================================================
        üìä –û–¢–ß–ï–¢ –ü–û –ë–≠–ö–¢–ï–°–¢–£: {self.bot_name}
        ============================================================

        –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
        -------------------
        - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${summary.get('total_profit', 0):.2f}
        - –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return_pct:.2f}%
        - –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}
        - –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:.2f}

        –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:
        ------------------
        - –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary.get('total_trades', 0)}
        - –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {summary.get('winning_trades', 0)}
        - –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {summary.get('losing_trades', 0)}
        - –í–∏–Ω—Ä–µ–π—Ç (Win Rate): {summary.get('winrate', 0) * 100:.2f}%

        –ú–ï–¢–†–ò–ö–ò –†–ò–°–ö–ê –ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:
        -------------------------------
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown_pct:.2f}%
        - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics.sharpe_ratio:.4f}
        - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ: {metrics.sortino_ratio:.4f}
        - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞: {metrics.calmar_ratio:.4f}

        ============================================================
        """
        return report

    def _generate_trade_chart(self, ohlcv_data: pd.DataFrame, trade_history_dicts: list, save_path_str: str):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω—è—é—â–∏–º–∏ –ª–∏–Ω–∏—è–º–∏.
        """
        df_trades = pd.DataFrame(trade_history_dicts)
        if df_trades.empty:
            return

        df_trades['timestamp'] = pd.to_datetime(df_trades['timestamp'])
        df_trades['entry_timestamp'] = pd.to_datetime(df_trades['entry_timestamp'])

        plt.figure(figsize=(20, 10))

        # === –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã ===
        plt.plot(ohlcv_data.index, ohlcv_data['Close'],
                 label='–¶–µ–Ω–∞ Close', color='lightblue', alpha=0.7)

        # –ú–µ—Ç–∫–∏ –≤—Ö–æ–¥–æ–≤
        plt.plot(df_trades['entry_timestamp'], df_trades['entry_price'],
                 '^', markersize=8, color='blue', label='–í—Ö–æ–¥')

        # –í—ã—Ö–æ–¥—ã + —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i, trade in df_trades.iterrows():
            entry_time = trade['entry_timestamp']
            exit_time = trade['timestamp']
            entry_price = trade['entry_price']
            exit_price = trade['exit_price']

            color = 'green' if trade['success'] else 'red'

            # —Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞
            plt.plot(exit_time, exit_price, 'o', markersize=8,
                     color=color, label='–í—ã—Ö–æ–¥' if i == 0 else "")

            # —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è –ª–∏–Ω–∏—è (–≤—Ö–æ–¥ ‚Üí –≤—ã—Ö–æ–¥)
            plt.plot([entry_time, exit_time],
                     [entry_price, exit_price],
                     color=color, linewidth=2, alpha=0.8)

        # === –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ===
        plt.title(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è: {self.bot_name}')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–¶–µ–Ω–∞ (USD)')
        plt.legend(loc='upper left', framealpha=0.9)
        plt.xticks(rotation=45)
        plt.tight_layout()

        save_path = Path(save_path_str)
        save_path.mkdir(parents=True, exist_ok=True)
        chart_file = save_path / f"{self.bot_name}.png"
        plt.savefig(chart_file)
        plt.close()
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {chart_file}")
