import json
import logging
import time
import argparse
from collections import Counter
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any
import pandas as pd
import yfinance as yf
from tqdm import tqdm
import optuna
import sys

# --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É __package__, —á—Ç–æ–±—ã —è–≤–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç.
# –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤, —á–µ–º try/except ImportError.
try:
    if __package__:
        # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞–∫–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'python -m optimizer.main_optimizer').
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã.
        from .objective_function import OptimizerObjective
        from .validation_engine import ValidationEngine
        from .statistical_tests import StatisticalValidator
        from .utils import OptimizerUtils, OptimizerReporter
    else:
        # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é. –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path.
        current_dir = Path(__file__).parent
        if str(current_dir) not in sys.path:
            sys.path.insert(0, str(current_dir))
        
        from objective_function import OptimizerObjective
        from validation_engine import ValidationEngine
        from statistical_tests import StatisticalValidator
        from utils import OptimizerUtils, OptimizerReporter

except ImportError as e:
    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    logging.basicConfig(level=logging.CRITICAL, format="%(asctime)s - %(levelname)s - %(message)s")
    logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å. {e}")
    logging.critical("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã ('objective_function.py', 'utils.py' –∏ –¥—Ä.) "
                     "–Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ 'main_optimizer.py'.")
    sys.exit(1)

# ------------------------------------


class AdvancedOptimizer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç overfitting."""

    def __init__(self, config_path: Optional[str] = None):
        self.config_path = config_path or str(Path(__file__).parent / "optimizer_config.json")
        self.config: Dict[str, Any] = self._load_config()
        self._setup_logging()
        self._setup_directories()

        self.objective = OptimizerObjective(self.config)
        self.validator = ValidationEngine(self.config)
        self.statistical = StatisticalValidator(self.config)
        self.utils = OptimizerUtils(self.config)
        self.reporter = OptimizerReporter(self.config)

        self.results: Dict[str, Any] = {}
        self.overfitting_warnings: List[str] = []
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.start_time = None
        self.window_times = []

    def _load_config(self) -> Dict[str, Any]:
        try:
            with open(self.config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤ JSON –∫–æ–Ω—Ñ–∏–≥–µ: {e}")

    def _setup_logging(self):
        log_config = self.config.get("logging", {})
        level_str = log_config.get("level", "INFO").upper()
        level = getattr(logging, level_str, logging.INFO)

        handlers = [logging.StreamHandler(sys.stdout)]
        if log_config.get("save_to_file"):
            log_file = Path(__file__).parent / log_config.get("log_file", "optimizer.log")
            handlers.append(logging.FileHandler(log_file, encoding='utf-8'))

        logging.basicConfig(
            level=level,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            handlers=handlers,
            force=True
        )
        self.logger = logging.getLogger(__name__)
        
        if isinstance(handlers[0], logging.StreamHandler) and hasattr(handlers[0].stream, 'reconfigure'):
             try:
                handlers[0].stream.reconfigure(encoding='utf-8')
             except TypeError:
                pass

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        optuna.logging.set_verbosity(optuna.logging.ERROR)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
        logging.getLogger("risk_management.performance_tracker").setLevel(logging.ERROR)
        logging.getLogger("risk_management.telegram_notifier").setLevel(logging.ERROR)
        logging.getLogger("bot_process").setLevel(logging.ERROR)
        logging.getLogger("yfinance").setLevel(logging.ERROR)
        logging.getLogger("urllib3.connectionpool").setLevel(logging.ERROR)
        logging.getLogger("matplotlib").setLevel(logging.ERROR)
        logging.getLogger("matplotlib.font_manager").setLevel(logging.ERROR)
        logging.getLogger("PIL").setLevel(logging.ERROR)

    def _setup_directories(self):
        charts_dir = Path(self.config.get("reporting", {}).get("charts_directory", "./charts"))
        charts_dir.mkdir(parents=True, exist_ok=True)
    
    def _format_time(self, seconds: float) -> str:
        """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
        if seconds < 60:
            return f"{seconds:.1f}—Å"
        elif seconds < 3600:
            return f"{seconds/60:.1f}–º"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}—á {minutes}–º"
    
    def _estimate_eta(self, completed: int, total: int, elapsed: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏."""
        if completed == 0:
            return "~"
        
        avg_time_per_window = elapsed / completed
        remaining = total - completed
        eta_seconds = avg_time_per_window * remaining
        
        return self._format_time(eta_seconds)
    
    def _print_window_summary(self, window_result: Dict, window_num: int, total_windows: int, elapsed: float):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–∫–Ω—É."""
        success = "[+]" if window_result.get('success', False) else "[-]"
        test_score = window_result.get('test_score', 0)
        trades = window_result.get('test_trades', 0)
        eta = self._estimate_eta(window_num, total_windows, elapsed)
        progress = window_num / total_windows * 100
        
        # –ü—Ä–æ—Ñ–∏—Ç –∏–∑ –º–µ—Ç—Ä–∏–∫
        profit_pct = 0.0
        sharpe = 0.0
        if window_result.get('test_metrics'):
            metrics = window_result['test_metrics']
            if hasattr(metrics, 'total_return_pct'):
                profit_pct = metrics.total_return_pct
            if hasattr(metrics, 'sharpe_ratio'):
                sharpe = metrics.sharpe_ratio
        
        print(f"\n{success} –û–∫–Ω–æ {window_num:2d}/{total_windows} [{progress:5.1f}%] | "
              f"–û—Ü–µ–Ω–∫–∞: {test_score:6.3f} | –°–¥–µ–ª–æ–∫: {trades:3d} | "
              f"–ü—Ä–æ—Ñ–∏—Ç: {profit_pct:+6.2f}% | Sharpe: {sharpe:5.2f} | "
              f"–ü—Ä–æ—à–ª–æ: {self._format_time(elapsed)} | ETA: {eta}")
        
        # –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω
        if window_result.get('success', False) and window_result.get('best_params'):
            params = window_result['best_params']
            params_str = ', '.join([f"{k}={v:.2f}" if isinstance(v, float) else f"{k}={v}" for k, v in params.items()])
            print(f"    ‚úì –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_str[:80]}{'...' if len(params_str) > 80 else ''}")
        
        if not window_result.get('success', False):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
            rejections = window_result.get('rejection_summary', {})
            if rejections:
                top_reason = max(rejections.items(), key=lambda x: x[1])
                print(f"    ‚ö†Ô∏è  –û—Å–Ω. –ø—Ä–æ–±–ª–µ–º–∞: {top_reason[0]} ({top_reason[1]}/{sum(rejections.values())} –ø–æ–ø—ã—Ç–æ–∫)")

    def load_data(
        self,
        ticker: Optional[str] = None,
        period: Optional[str] = None,
        interval: Optional[str] = None,
    ) -> pd.DataFrame:
        data_config = self.config.get("data_settings", {})
        ticker = ticker or data_config.get("default_ticker", "AAPL")
        period = period or data_config.get("default_period", "1y")
        interval = interval or data_config.get("default_interval", "1d")

        print(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {ticker} | {period} | {interval}")
        df = yf.download(tickers=ticker, period=period, interval=interval, auto_adjust=True, progress=False)

        if df is None or df.empty:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}")

        min_points = data_config.get("min_data_points", 100)
        if len(df) < min_points:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} < {min_points}")

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Å–≤–µ—á–µ–π ({df.index[0].date()} - {df.index[-1].date()})")
        return df

    def create_data_splits(self, data: pd.DataFrame) -> List[Dict[str, Any]]:
        wf_config = self.config.get("walk_forward", {})

        def get_offset(months_value):
            if isinstance(months_value, float):
                return pd.DateOffset(days=int(months_value * 30.44))
            return pd.DateOffset(months=int(months_value))

        train_offset = get_offset(wf_config.get("train_months", 6))
        val_offset = get_offset(wf_config.get("validation_months", 3))
        test_offset = get_offset(wf_config.get("test_months", 3))
        step_offset = get_offset(wf_config.get("step_months", 1))

        start_date = data.index[0]
        end_date = data.index[-1]
        windows = []
        current_start = start_date

        while True:
            train_end = current_start + train_offset
            val_end = train_end + val_offset
            test_end = val_end + test_offset
            if test_end > end_date:
                break

            window = {
                "window_id": len(windows) + 1,
                "train_start": current_start, "train_end": train_end,
                "val_start": train_end, "val_end": val_end,
                "test_start": val_end, "test_end": test_end,
                "train_data": data.loc[current_start:train_end],
                "val_data": data.loc[train_end:val_end],
                "test_data": data.loc[val_end:test_end],
            }
            windows.append(window)
            current_start += step_offset
            if len(windows) >= wf_config.get("max_windows", 12):
                break

        if not windows or len(windows) < wf_config.get("min_windows", 1):
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è walk-forward: —Å–æ–∑–¥–∞–Ω–æ {len(windows)} –æ–∫–æ–Ω, "
                             f"—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {wf_config.get('min_windows', 1)}")
        return windows

    def optimize_single_window(self, window: Dict[str, Any], strategy_config_path: str) -> Dict[str, Any]:
        window_id = window["window_id"]
        opt_config = self.config.get("optimization", {})
        window_start_time = time.time()

        study = optuna.create_study(direction=opt_config.get("study_direction", "maximize"))
        objective_func = lambda trial: self.objective.evaluate(trial, window["train_data"], strategy_config_path, mode="train")

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤
        study.optimize(
            objective_func, 
            n_trials=opt_config.get("trials_per_window", 50),
            timeout=opt_config.get("timeout_minutes", 10) * 60,
            n_jobs=opt_config.get("n_jobs", 1)
        )

        # FIX: –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è trials
        rejection_reasons = [t.user_attrs.get('rejection_reason', 'Accepted') for t in study.trials]
        rejection_summary = Counter(reason for reason in rejection_reasons if reason != 'Accepted')

        if not study.best_trial:
             raise RuntimeError("Optuna –Ω–µ –Ω–∞—à–ª–∞ –ª—É—á—à–µ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π.")

        best_params = study.best_trial.params
        train_score = study.best_trial.value

        val_result = self.objective.evaluate_fixed_params(best_params, window["val_data"], strategy_config_path, mode="validation")
        val_score = val_result.get("score", 0.0)
        test_result = self.objective.evaluate_fixed_params(best_params, window["test_data"], strategy_config_path, mode="test")
        test_score = test_result.get("score", 0.0)

        overfitting_detected = True if train_score is None else self.validator.detect_overfitting(train_score, val_score, test_score)
        statistical_valid = self.statistical.validate_trades(test_result.get("trades", [])) if test_result.get("trades") else False

        window_result = {
            "window_id": window_id,
            "train_period": f"{window['train_start'].date()} ‚Üí {window['train_end'].date()}",
            "val_period": f"{window['val_start'].date()} ‚Üí {window['val_end'].date()}",
            "test_period": f"{window['test_start'].date()} ‚Üí {window['test_end'].date()}",
            "best_params": best_params,
            "train_score": train_score, "val_score": val_score, "test_score": test_score,
            "test_metrics": test_result.get("metrics", {}),
            "test_trades": len(test_result.get("trades", [])),
            "overfitting_detected": overfitting_detected,
            "statistical_valid": statistical_valid,
            "success": test_score > self.config.get("validation", {}).get("min_test_score", 0) and not overfitting_detected and statistical_valid,
            "rejection_summary": rejection_summary,
        }
        return window_result

    def run_walk_forward_optimization(self, data: pd.DataFrame, strategy_config_path: str) -> Dict[str, Any]:
        print("\n" + "="*80)
        print("üöÄ WALK-FORWARD –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø STARTED")
        print("="*80)
        
        self.start_time = time.time()
        windows = self.create_data_splits(data)
        window_results = []
        
        strategy_name = Path(strategy_config_path).stem
        print(f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        print(f"üìÖ –û–∫–æ–Ω: {len(windows)} | –ü–µ—Ä–∏–æ–¥: {data.index[0].date()} - {data.index[-1].date()}")
        print(f"üìù –î–∞–Ω–Ω—ã—Ö: {len(data)} —Å–≤–µ—á–µ–π | Trials/–æ–∫–Ω–æ: {self.config.get('optimization', {}).get('trials_per_window', 50)}")
        print("-" * 80)

        for i, window in enumerate(windows, 1):
            window_start_time = time.time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–∫–Ω–∞
            try:
                result = self.optimize_single_window(window, strategy_config_path)
                window_results.append(result)
                
                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                elapsed = time.time() - self.start_time
                self._print_window_summary(result, i, len(windows), elapsed)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                window_time = time.time() - window_start_time
                self.window_times.append(window_time)
                
            except Exception as e:
                error_result = {"window_id": window.get("window_id", -1), "success": False, "error": str(e)}
                window_results.append(error_result)
                
                elapsed = time.time() - self.start_time
                self._print_window_summary(error_result, i, len(windows), elapsed)
                print(f"    >> –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–Ω–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                window_time = time.time() - window_start_time
                self.window_times.append(window_time)

        analysis = self.validator.analyze_walk_forward_results(window_results)
        best_params = self.utils.find_robust_parameters(window_results)

        final_backtest = None
        if best_params:
            print("\n" + "-"*80)
            print("üèÜ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞...")
            final_backtest = self.objective.evaluate_fixed_params(best_params, data, strategy_config_path, mode="final")
        else:
            print("\n" + "-"*80)
            print("‚ö†Ô∏è  –ù–µ—Ç —Ä–æ–±–∞—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞")

        duration = time.time() - self.start_time
        
        # FIX: –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π —Å–æ –≤—Å–µ—Ö –æ–∫–æ–Ω
        total_rejections = Counter()
        for res in window_results:
            if res.get("rejection_summary"):
                total_rejections.update(res["rejection_summary"])

        results = {
            "strategy_config": strategy_config_path,
            "total_windows": len(windows),
            "successful_windows": len([w for w in window_results if w.get("success")]),
            "window_results": window_results,
            "analysis": analysis,
            "best_parameters": best_params,
            "final_backtest": final_backtest,
            "execution_time_minutes": duration / 60,
            "overfitting_warnings": analysis.get("warnings", []),
            "timestamp": datetime.now().isoformat(),
            "total_rejection_summary": total_rejections,
        }

        self.results = results
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑ –ª–æ–≥–æ–≤
        print("\nüìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        self.reporter.generate_full_report(results, data)
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._print_final_summary(results)
        
        print(f"\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {self._format_time(duration)}")
        return results
    
    def _print_final_summary(self, results: Dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        print("\n" + "="*80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*80)
        
        strategy_name = Path(results['strategy_config']).stem
        successful_windows = results['successful_windows']
        total_windows = results['total_windows']
        success_rate = (successful_windows / total_windows * 100) if total_windows > 0 else 0
        
        print(f"üìù –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self._format_time(results['execution_time_minutes'] * 60)}")
        print(f"üó∫Ô∏è  –î–∞—Ç–∞: {results['timestamp'][:19].replace('T', ' ')}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if hasattr(self, 'window_times') and self.window_times:
            avg_window_time = sum(self.window_times) / len(self.window_times)
            print(f"‚è±Ô∏è  –°—Ä. –≤—Ä–µ–º—è/–æ–∫–Ω–æ: {self._format_time(avg_window_time)}")
        
        print(f"\nüìä –û–ö–ù–ê:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_windows}/{total_windows} ({success_rate:.1f}%)")
        
        if successful_windows > 0:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ø–µ—à–Ω—ã–º –æ–∫–Ω–∞–º
            successful_results = [w for w in results['window_results'] if w.get('success', False)]
            
            test_scores = [w.get('test_score', 0) for w in successful_results]
            trade_counts = [w.get('test_trades', 0) for w in successful_results]
            
            profits = []
            for w in successful_results:
                if w.get('test_metrics') and hasattr(w['test_metrics'], 'total_return_pct'):
                    profits.append(w['test_metrics'].total_return_pct)
                else:
                    profits.append(0.0)
            
            print(f"   üíØ –°—Ä. –æ—Ü–µ–Ω–∫–∞: {sum(test_scores)/len(test_scores):.3f}")
            print(f"   üìã –°—Ä. —Å–¥–µ–ª–æ–∫: {sum(trade_counts)/len(trade_counts):.1f}")
            print(f"   üí∞ –°—Ä. –ø—Ä–æ—Ñ–∏—Ç: {sum(profits)/len(profits):+.2f}%")
            print(f"   üîÑ –ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç: {max(profits):+.2f}% | –ú–∏–Ω.: {min(profits):+.2f}%")
            
            # –û–≤–µ—Ä—Ñ–∏—Ç—Ç–∏–Ω–≥ —Å–∫–æ—Ä
            analysis = results.get('analysis', {})
            if analysis and analysis.get('status') != 'insufficient_data':
                overfitting_score = analysis.get('overfitting_score', 0)
                print(f"\nüéØ OVERFITTING SCORE: {overfitting_score:.1f}/100")
                if overfitting_score < 40:
                    verdict = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
                elif overfitting_score < 70:
                    verdict = "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"
                else:
                    verdict = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
                print(f"   {verdict}")
            
            # –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            best_params = results.get('best_parameters')
            if best_params:
                print(f"\nüèÜ –õ–£–ß–®–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
                for param, value in best_params.items():
                    if isinstance(value, float):
                        print(f"   {param}: {value:.3f}")
                    else:
                        print(f"   {param}: {value}")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
            final_backtest = results.get('final_backtest')
            if final_backtest and final_backtest.get('success'):
                metrics = final_backtest.get('metrics')
                if metrics:
                    print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢:")
                    print(f"   üí∞ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:+.2f}%")
                    print(f"   üìâ Sharpe Ratio: {metrics.sharpe_ratio:.3f}")
                    print(f"   üìâ Sortino Ratio: {metrics.sortino_ratio:.3f}")
                    print(f"   üìä Max Drawdown: {metrics.max_drawdown_pct:.2f}%")
        
        else:
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
            rejections = results.get('total_rejection_summary')
            if rejections:
                total_failed_trials = sum(rejections.values())
                print(f"\n‚ö†Ô∏è  –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú ({total_failed_trials} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫):")
                for reason, count in rejections.most_common(5):  # –¢–æ–ø-5 –ø—Ä–æ–±–ª–µ–º
                    percentage = (count / total_failed_trials) * 100
                    print(f"   {percentage:5.1f}% - {reason}")
                
                print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–¥–µ–ª–æ–∫)")
                print(f"   ‚Ä¢ –†–∞—Å—à–∏—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                print(f"   ‚Ä¢ –°–Ω–∏–∑—å—Ç–µ min_trades_for_significance –≤ optimizer_config.json")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = results.get('overfitting_warnings', [])
        if warnings:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in warnings:
                print(f"   ‚Ä¢ {warning}")
        
        print("\n" + "="*80)

    def _print_detailed_summary(self, results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É, –≤–∫–ª—é—á–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫."""
        print("\n" + "="*80)
        print("üéâ –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("="*80)
        
        strategy_name = Path(results['strategy_config']).stem
        print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['execution_time_minutes']:.1f} –º–∏–Ω—É—Ç")
        print(f"üóìÔ∏è  –î–∞—Ç–∞: {results['timestamp']}")
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ö–û–ù:")
        successful_windows = results['successful_windows']
        total_windows = results['total_windows']
        success_rate = (successful_windows / total_windows * 100) if total_windows > 0 else 0
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω: {successful_windows}/{total_windows} ({success_rate:.1f}%)")
        
        analysis = results.get('analysis', {})
        if analysis and analysis.get('status') != 'insufficient_data':
            overfitting_score = analysis.get('overfitting_score', 0)
            print(f"   üéØ Overfitting Score: {overfitting_score:.1f}/100")
            if overfitting_score < 40: verdict = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            elif overfitting_score < 70: verdict = "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            else: verdict = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            print(f"   üìã –û—Ü–µ–Ω–∫–∞: {verdict}")

        # FIX: –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω
        if successful_windows == 0:
            print("\n" + "-"*30 + " –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú " + "-"*30)
            rejections = results.get('total_rejection_summary')
            if not rejections:
                print("   –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω. –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                total_failed_trials = sum(rejections.values())
                print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–∫–Ω–∞. –ê–Ω–∞–ª–∏–∑ {total_failed_trials} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:")
                for reason, count in rejections.most_common():
                    percentage = (count / total_failed_trials) * 100 if total_failed_trials > 0 else 0
                    print(f"   - {percentage:.1f}% –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: '{reason}'")
                print("\n   –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–¥–µ–ª–æ–∫.")
                print("   - –†–∞—Å—à–∏—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
                print("   - –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ 'risk_limits' –∏ 'validation' –≤ 'optimizer_config.json'.")

        best_params = results.get('best_parameters')
        if best_params:
            print(f"\nüèÜ –õ–£–ß–®–ò–ï –†–û–ë–ê–°–¢–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
            for param, value in best_params.items():
                print(f"   {param}: {value}")
        
        final_backtest = results.get('final_backtest')
        if final_backtest and final_backtest.get('success'):
            metrics = final_backtest.get('metrics')
            if metrics:
                print(f"\nüí∞ –§–ò–ù–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢:")
                print(f"   üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}%")
                print(f"   üìä Sharpe Ratio: {metrics.sharpe_ratio:.3f}")
                print(f"   üìä Sortino Ratio: {metrics.sortino_ratio:.3f}")
                print(f"   üìâ Max Drawdown: {metrics.max_drawdown_pct:.2f}%")
        
        warnings = results.get('overfitting_warnings', [])
        if warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in warnings:
                print(f"   ‚Ä¢ {warning}")
        
        print("\n" + "="*80)


    def run_strategy_optimization(
        self,
        strategy_config_path: str,
        ticker: Optional[str] = None,
        period: Optional[str] = None,
        interval: Optional[str] = None,
    ):
        ticker_final = ticker or self.config.get("data_settings", {}).get("default_ticker", "AAPL")
        period_final = period or self.config.get("data_settings", {}).get("default_period", "1y")
        interval_final = interval or self.config.get("data_settings", {}).get("default_interval", "1d")

        try:
            data = self.load_data(ticker_final, period_final, interval_final)
            results = self.run_walk_forward_optimization(data, strategy_config_path)
            return results
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            raise


def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    parser.add_argument("strategy_config", help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    parser.add_argument("--ticker", default=None, help="–¢–∏–∫–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    parser.add_argument("--period", default=None, help="–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--interval", default=None, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--config", default=None, help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")

    args = parser.parse_args()

    print("\n" + "="*80)
    print("üöÄ –¢–û–†–ì–û–í–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† | –í–µ—Ä—Å–∏—è 2.0")
    print("="*80)

    try:
        strategy_path_str = args.strategy_config
        if "configsoptimizer" in strategy_path_str and '\\' not in strategy_path_str and '/' not in strategy_path_str:
            print("üìù –ü–û–î–°–ö–ê–ó–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            corrected_path_str = strategy_path_str.replace('configsoptimizer', 'configs/optimizer/')
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {corrected_path_str}")
            strategy_path_str = corrected_path_str

        strategy_path = Path(strategy_path_str).resolve()
        if not strategy_path.is_file():
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {strategy_path}")

        print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_path.name}")
        
        optimizer = AdvancedOptimizer(args.config)
        optimizer.run_strategy_optimization(str(strategy_path), args.ticker, args.period, args.interval)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        exit(1)


if __name__ == "__main__":
    main()

