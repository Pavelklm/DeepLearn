# –§–∞–π–ª: optimizer/main_optimizer.py

import json
import logging
import time
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
import pandas as pd
import numpy as np
import yfinance as yf
from tqdm import tqdm
import optuna

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
try:
    from .objective_function import OptimizerObjective
    from .validation_engine import ValidationEngine
    from .statistical_tests import StatisticalValidator
    # –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –∏–∑ utils
    from .utils import OptimizerUtils, OptimizerReporter
except (ImportError, ValueError):
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    import sys
    from pathlib import Path
    current_dir = Path(__file__).parent
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))
    
    try:
        from objective_function import OptimizerObjective
        from validation_engine import ValidationEngine
        from statistical_tests import StatisticalValidator
        # –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –∏–∑ utils
        from utils import OptimizerUtils, OptimizerReporter
    except ImportError as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ optimizer/")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ importlib
        try:
            import importlib.util
            
            # –ò–º–ø–æ—Ä—Ç utils
            utils_path = current_dir / "utils.py"
            spec = importlib.util.spec_from_file_location("utils", utils_path)
            utils_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(utils_module)
            
            OptimizerUtils = utils_module.OptimizerUtils
            OptimizerReporter = utils_module.OptimizerReporter
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —á–µ—Ä–µ–∑ importlib")
            
        except Exception as final_e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {final_e}")
            raise


class AdvancedOptimizer:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç overfitting.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –¢—Ä–µ—Ö—á–∞—Å—Ç–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (train/validation/test)
    2. Walk-forward –∞–Ω–∞–ª–∏–∑ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    3. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    4. –î–µ—Ç–µ–∫—Ü–∏—è –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    5. –†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å-—Ç–µ—Å—Ç—ã
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
        self.config_path = config_path if config_path else str(Path(__file__).parent / "optimizer_config.json")
        self.config = self._load_config()
        self._setup_logging()
        self._setup_directories()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.objective = OptimizerObjective(self.config)
        self.validator = ValidationEngine(self.config)
        self.statistical = StatisticalValidator(self.config)
        self.utils = OptimizerUtils(self.config)
        self.reporter = OptimizerReporter(self.config)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results = {}
        self.overfitting_warnings = []
        
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞."""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        except FileNotFoundError:
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤ JSON –∫–æ–Ω—Ñ–∏–≥–µ: {e}")
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        log_config = self.config['logging']
        level = getattr(logging, log_config['level'])
        
        handlers = []
        handlers.append(logging.StreamHandler())
        if log_config['save_to_file']:
            log_file = Path(__file__).parent / log_config['log_file']
            handlers.append(logging.FileHandler(log_file))
        
        logging.basicConfig(
            level=level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=handlers
        )
        self.logger = logging.getLogger(__name__)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ Optuna –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        if not log_config['verbose_trials']:
            optuna.logging.set_verbosity(optuna.logging.WARNING)
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        charts_dir = Path(self.config['reporting']['charts_directory'])
        charts_dir.mkdir(parents=True, exist_ok=True)
    
    def load_data(self, ticker: Optional[str] = None, period: Optional[str] = None, interval: Optional[str] = None) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        data_config = self.config['data_settings']
        
        ticker = ticker or data_config['default_ticker']
        period = period or data_config['default_period']
        interval = interval or data_config['default_interval']
        
        self.logger.info(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {ticker}, {period}, {interval}")
        
        try:
            df = yf.download(tickers=ticker, period=period, interval=interval, auto_adjust=True)
            
            if df is None or df.empty:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            min_points = data_config['min_data_points']
            if len(df) < min_points:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} < {min_points}")
            
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Å–≤–µ—á–µ–π ({df.index[0].date()} ‚Üí {df.index[-1].date()})")
            return df
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def create_data_splits(self, data: pd.DataFrame) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–∞ walk-forward —Å —Ç—Ä–µ—Ö—á–∞—Å—Ç–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º.
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω —Å train/validation/test –ø–µ—Ä–∏–æ–¥–∞–º–∏
        """
        wf_config = self.config['walk_forward']
        
        total_months = wf_config['train_months'] + wf_config['validation_months'] + wf_config['test_months']
        step_months = wf_config['step_months']
        
        start_date = data.index[0]
        end_date = data.index[-1]
        
        windows = []
        current_start = start_date
        
        while True:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞
            train_end = current_start + pd.DateOffset(months=wf_config['train_months'])
            val_end = train_end + pd.DateOffset(months=wf_config['validation_months'])
            test_end = val_end + pd.DateOffset(months=wf_config['test_months'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if test_end > end_date:
                break
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
            window = {
                'window_id': len(windows) + 1,
                'train_start': current_start,
                'train_end': train_end,
                'val_start': train_end,
                'val_end': val_end,
                'test_start': val_end,
                'test_end': test_end,
                'train_data': data.loc[current_start:train_end],
                'val_data': data.loc[train_end:val_end],
                'test_data': data.loc[val_end:test_end]
            }
            
            windows.append(window)
            current_start += pd.DateOffset(months=step_months)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω
            if len(windows) >= wf_config['max_windows']:
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω
        if len(windows) < wf_config['min_windows']:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è walk-forward: {len(windows)} < {wf_config['min_windows']}")
        
        self.logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(windows)} –æ–∫–æ–Ω walk-forward")
        return windows
    
    def optimize_single_window(self, window: Dict, strategy_config_path: str) -> Dict:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
        
        Args:
            window: –û–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å train/validation/test
            strategy_config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞
        """
        window_id = window['window_id']
        opt_config = self.config['optimization']
        
        self.logger.info(f"üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ {window_id}")
        
        # –°–æ–∑–¥–∞–µ–º study –¥–ª—è Optuna
        study = optuna.create_study(
            direction=opt_config['study_direction'],
            study_name=f"window_{window_id}_{int(time.time())}"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º objective function
        objective_func = lambda trial: self.objective.evaluate(
            trial, window['train_data'], strategy_config_path, mode='train'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        with tqdm(total=opt_config['trials_per_window'], 
                 desc=f"–û–∫–Ω–æ {window_id}", 
                 leave=False,
                 disable=not self.config['logging']['show_progress_bars']) as pbar:
            
            def callback(study, trial):
                pbar.update(1)
                if trial.value is not None:
                    pbar.set_postfix({
                        'Best': f"{study.best_value:.3f}",
                        'Current': f"{trial.value:.3f}"
                    })
            
            study.optimize(
                objective_func,
                n_trials=opt_config['trials_per_window'],
                timeout=opt_config['timeout_minutes'] * 60,
                callbacks=[callback],
                n_jobs=opt_config['n_jobs']
            )
        
        best_params = study.best_trial.params
        train_score = study.best_trial.value
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ validation set
        val_result = self.objective.evaluate_fixed_params(
            best_params, window['val_data'], strategy_config_path, mode='validation'
        )
        val_score = val_result.get('score', 0.0)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ test set
        test_result = self.objective.evaluate_fixed_params(
            best_params, window['test_data'], strategy_config_path, mode='test'
        )
        test_score = test_result.get('score', 0.0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ overfitting
        if train_score is None:
            overfitting_detected = True
        else:
            overfitting_detected = self.validator.detect_overfitting(
                train_score, val_score, test_score
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if test_result['trades']:
            statistical_valid = self.statistical.validate_trades(test_result['trades'])
        else:
            statistical_valid = False
        
        window_result = {
            'window_id': window_id,
            'train_period': f"{window['train_start'].date()} ‚Üí {window['train_end'].date()}",
            'val_period': f"{window['val_start'].date()} ‚Üí {window['val_end'].date()}",
            'test_period': f"{window['test_start'].date()} ‚Üí {window['test_end'].date()}",
            'best_params': best_params,
            'train_score': train_score,
            'val_score': val_score,
            'test_score': test_score,
            'test_metrics': test_result['metrics'],
            'test_trades': len(test_result['trades']) if test_result['trades'] else 0,
            'overfitting_detected': overfitting_detected,
            'statistical_valid': statistical_valid,
            'success': test_score > 0 and not overfitting_detected and statistical_valid
        }
        
        return window_result
    
    def run_walk_forward_optimization(self, data: pd.DataFrame, strategy_config_path: str) -> Dict:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–æ–ª–Ω—ã–π walk-forward –∞–Ω–∞–ª–∏–∑.
        
        Args:
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            strategy_config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            Dict: –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        self.logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú WALK-FORWARD –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
        windows = self.create_data_splits(data)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –æ–∫–Ω–æ
        window_results = []
        for window in windows:
            try:
                result = self.optimize_single_window(window, strategy_config_path)
                window_results.append(result)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–∫–Ω–µ {window['window_id']}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                error_result = {
                    'window_id': window['window_id'],
                    'success': False,
                    'error': str(e)
                }
                window_results.append(error_result)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis = self.validator.analyze_walk_forward_results(window_results)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        best_params = self.utils.find_robust_parameters(window_results)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π backtest –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        final_backtest = None
        if best_params:
            self.logger.info("üèÜ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π backtest —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            final_backtest = self.objective.evaluate_fixed_params(
                best_params, data, strategy_config_path, mode='final'
            )
        
        duration = time.time() - start_time
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'strategy_config': strategy_config_path,
            'total_windows': len(windows),
            'successful_windows': len([w for w in window_results if w.get('success', False)]),
            'window_results': window_results,
            'analysis': analysis,
            'best_parameters': best_params,
            'final_backtest': final_backtest,
            'execution_time_minutes': duration / 60,
            'overfitting_warnings': analysis.get('warnings', []),
            'timestamp': datetime.now().isoformat()
        }
        
        self.results = results
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        self.reporter.generate_full_report(results, data)
        
        self.logger.info(f"üéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {duration/60:.1f} –º–∏–Ω")
        return results
    
    def run_strategy_optimization(self, strategy_config_path: str, 
                                ticker: Optional[str] = None, period: Optional[str] = None, interval: Optional[str] = None):
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        
        Args:
            strategy_config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –¢–∏–∫–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            period: –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ None, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å type-checker
            ticker_final = ticker or self.config['data_settings']['default_ticker']
            period_final = period or self.config['data_settings']['default_period']
            interval_final = interval or self.config['data_settings']['default_interval']

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = self.load_data(ticker_final, period_final, interval_final)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            results = self.run_walk_forward_optimization(data, strategy_config_path)
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            self.reporter.print_summary(results)
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            raise


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    parser.add_argument("strategy_config", help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    parser.add_argument("--ticker", default=None, help="–¢–∏–∫–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    parser.add_argument("--period", default=None, help="–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--interval", default=None, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--config", default=None, help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = AdvancedOptimizer(args.config)
    optimizer.run_strategy_optimization(
        args.strategy_config,
        args.ticker,
        args.period, 
        args.interval
    )


if __name__ == "__main__":
    main()
