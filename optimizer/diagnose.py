# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
# –ó–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤

import sys
import traceback
from pathlib import Path

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    libraries_to_test = [
        ("pandas", "import pandas as pd"),
        ("numpy", "import numpy as np"),
        ("yfinance", "import yfinance as yf"),
        ("scipy", "import scipy.stats"),
        ("optuna", "import optuna"),
        ("matplotlib", "import matplotlib.pyplot as plt"),
        ("seaborn", "import seaborn as sns"),
        ("sklearn", "from sklearn.metrics import silhouette_score"),
    ]
    
    for name, import_str in libraries_to_test:
        try:
            exec(import_str)
            print(f"‚úÖ {name}")
        except ImportError as e:
            print(f"‚ùå {name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  {name}: {e}")
    
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ù–£–¢–†–ï–ù–ù–ò–• –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ path
    current_dir = Path(__file__).parent
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))
    
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
    internal_modules = [
        ("objective_function", "from optimizer.objective_function import OptimizerObjective"),
        ("validation_engine", "from optimizer.validation_engine import ValidationEngine"),
        ("statistical_tests", "from optimizer.statistical_tests import StatisticalValidator"),
        ("utils", "from optimizer.utils import OptimizerUtils"),
        ("bot_process", "from bot_process import Playground"),
        ("metrics_calculator", "from analytics.metrics_calculator import MetricsCalculator"),
        ("config_manager", "from risk_management.config_manager import ConfigManager"),
        ("rsi_sma_strategy", "from strategies.rsi_sma_strategy import Strategy"),
    ]
    
    for name, import_str in internal_modules:
        try:
            exec(import_str)
            print(f"‚úÖ {name}")
        except ImportError as e:
            print(f"‚ùå {name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  {name}: {e}")

def test_configs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
    print("=" * 50)
    
    configs_to_test = [
        ("optimizer_config.json", "optimizer/optimizer_config.json"),
        ("rsi_sma.json", "configs/optimizer/rsi_sma.json"),
        ("live_default.json", "configs/live_default.json"),
    ]
    
    for name, path in configs_to_test:
        try:
            file_path = Path(path)
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    import json
                    json.load(f)
                print(f"‚úÖ {name}")
            else:
                print(f"‚ùå {name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  {name}: {e}")

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        import yfinance as yf
        df = yf.download("BTC-USD", period="5d", interval="1h", progress=False)
        if df is not None and len(df) > 0:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Å–≤–µ—á–µ–π")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞...")
        from optimizer.main_optimizer import AdvancedOptimizer
        optimizer = AdvancedOptimizer()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        print("Traceback:")
        traceback.print_exc()

def test_strategy_instantiation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 50)
    
    try:
        from strategies.rsi_sma_strategy import Strategy
        strategy = Strategy(
            rsi_period=14,
            sma_period=50,
            oversold_level=30,
            tp_multiplier=1.05,
            overbought_level=70
        )
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy.name}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        import pandas as pd
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range('2023-01-01', periods=100, freq='H')
        test_data = pd.DataFrame({
            'Open': np.random.random(100) * 100 + 50000,
            'High': np.random.random(100) * 100 + 50100,
            'Low': np.random.random(100) * 100 + 49900,
            'Close': np.random.random(100) * 100 + 50000,
            'Volume': np.random.random(100) * 1000
        }, index=dates)
        
        result = strategy.analyze(test_data)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.get('signal', 'unknown')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        traceback.print_exc()

def diagnose_full_pipeline():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    print("\nüîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 50)
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        import json
        from pathlib import Path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        strategy_config_path = "configs/optimizer/rsi_sma.json"
        
        if not Path(strategy_config_path).exists():
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {strategy_config_path}")
            return
            
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–π–¥–µ–Ω: {strategy_config_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω walk-forward
        from optimizer.main_optimizer import AdvancedOptimizer
        import pandas as pd
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range('2023-01-01', periods=2000, freq='H')
        test_data = pd.DataFrame({
            'Open': np.random.random(2000) * 100 + 50000,
            'High': np.random.random(2000) * 100 + 50100,
            'Low': np.random.random(2000) * 100 + 49900,
            'Close': np.random.random(2000) * 100 + 50000,
            'Volume': np.random.random(2000) * 1000
        }, index=dates)
        
        optimizer = AdvancedOptimizer()
        windows = optimizer.create_data_splits(test_data)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(windows)} –æ–∫–æ–Ω walk-forward")
        
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
        if windows:
            window = windows[0]
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ: train={len(window['train_data'])}, "
                  f"val={len(window['val_data'])}, test={len(window['test_data'])}")
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–†–ì–û–í–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...\n")
    
    test_imports()
    test_configs() 
    test_basic_functionality()
    test_strategy_instantiation()
    diagnose_full_pipeline()
    
    print("\n" + "=" * 60)
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("\n–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ ‚úÖ, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.")
    print("–ï—Å–ª–∏ –µ—Å—Ç—å ‚ùå, —Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã.")
    print("\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ Traceback –∑–∞–ø—É—Å—Ç–∏:")
    print("python optimizer/main_optimizer.py configs/optimizer/rsi_sma.json")

if __name__ == "__main__":
    main()