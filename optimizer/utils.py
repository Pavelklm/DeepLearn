# –§–∞–π–ª: optimizer/utils.py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import json
import time
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')


class OptimizerUtils:
    """
    –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(__name__)
    
    def find_robust_parameters(self, window_results: List[Dict]) -> Optional[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–æ–±–∞—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏.
        
        Args:
            window_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –æ–∫–æ–Ω walk-forward
            
        Returns:
            Dict: –õ—É—á—à–∏–µ —Ä–æ–±–∞—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ None
        """
        successful_windows = [w for w in window_results if w.get('success', False)]
        
        if len(successful_windows) < 2:
            self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–æ–±–∞—Å—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∏
        param_scores = {}
        
        for window in successful_windows:
            params = window.get('best_params', {})
            score = window.get('test_score', 0)
            
            for param_name, param_value in params.items():
                if param_name not in param_scores:
                    param_scores[param_name] = []
                param_scores[param_name].append((param_value, score))
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ª—É—á—à–∏–º —Å—Ä–µ–¥–Ω–∏–º —Å–∫–æ—Ä–æ–º
        robust_params = {}
        
        for param_name, value_score_pairs in param_scores.items():
            if not value_score_pairs:
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Å–∫–æ—Ä—ã
            value_groups = {}
            for value, score in value_score_pairs:
                # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(value, (int, float)):
                    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    if isinstance(value, int):
                        group_key = value
                    else:
                        group_key = round(value, 2)
                else:
                    group_key = value
                
                if group_key not in value_groups:
                    value_groups[group_key] = []
                value_groups[group_key].append(score)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ª—É—á—à–∏–º —Å—Ä–µ–¥–Ω–∏–º —Å–∫–æ—Ä–æ–º
            best_value = None
            best_avg_score = -float('inf')
            
            for group_value, scores in value_groups.items():
                avg_score = np.mean(scores)
                if avg_score > best_avg_score:
                    best_avg_score = avg_score
                    best_value = group_value
            
            robust_params[param_name] = best_value
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Ä–æ–±–∞—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {robust_params}")
        return robust_params
    
    def calculate_parameter_stability(self, window_results: List[Dict]) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏.
        
        Args:
            window_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–∫–æ–Ω
            
        Returns:
            Dict: –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        successful_windows = [w for w in window_results if w.get('success', False)]
        
        if len(successful_windows) < 2:
            return {'status': 'insufficient_data'}
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        all_params = []
        param_names = set()
        
        for window in successful_windows:
            params = window.get('best_params', {})
            if params:
                all_params.append(params)
                param_names.update(params.keys())
        
        if not all_params:
            return {'status': 'no_parameters'}
        
        stability_metrics = {}
        
        for param_name in param_names:
            values = []
            for params in all_params:
                if param_name in params:
                    values.append(params[param_name])
            
            if len(values) < 2:
                continue
            
            if all(isinstance(v, (int, float)) for v in values):
                # –ß–∏—Å–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                mean_val = np.mean(values)
                std_val = np.std(values)
                cv = std_val / abs(mean_val) if mean_val != 0 else float('inf')
                
                stability_metrics[param_name] = {
                    'type': 'numeric',
                    'values': values,
                    'mean': float(mean_val),
                    'std': float(std_val),
                    'coefficient_of_variation': float(cv),
                    'min': float(min(values)),
                    'max': float(max(values)),
                    'range_pct': float((max(values) - min(values)) / mean_val * 100) if mean_val != 0 else 0.0
                }
            else:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                from collections import Counter
                value_counts = Counter(values)
                most_common = value_counts.most_common(1)[0]
                consistency = most_common[1] / len(values)
                
                stability_metrics[param_name] = {
                    'type': 'categorical',
                    'values': values,
                    'value_counts': dict(value_counts),
                    'most_common_value': most_common[0],
                    'consistency': consistency,
                    'unique_values': len(value_counts)
                }
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        numeric_cvs = [m['coefficient_of_variation'] for m in stability_metrics.values() 
                      if m['type'] == 'numeric']
        categorical_consistencies = [m['consistency'] for m in stability_metrics.values() 
                                   if m['type'] == 'categorical']
        
        overall_stability = 0.0
        if numeric_cvs:
            avg_cv = np.mean(numeric_cvs)
            numeric_stability = max(0, 1 - avg_cv / 2)  # CV = 2 –¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å 0
            overall_stability += numeric_stability * 0.7
        
        if categorical_consistencies:
            avg_consistency = np.mean(categorical_consistencies)
            overall_stability += avg_consistency * 0.3
        
        return {
            'status': 'success',
            'parameter_metrics': stability_metrics,
            'overall_stability': overall_stability,
            'summary': {
                'total_parameters': len(stability_metrics),
                'numeric_parameters': len(numeric_cvs),
                'categorical_parameters': len(categorical_consistencies),
                'avg_numeric_cv': np.mean(numeric_cvs) if numeric_cvs else None,
                'avg_categorical_consistency': np.mean(categorical_consistencies) if categorical_consistencies else None
            }
        }


class OptimizerReporter:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞.
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.charts_dir = Path(config['reporting']['charts_directory'])
        self.charts_dir.mkdir(parents=True, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤
        try:
            plt.style.use(config['reporting']['chart_style'])
        except:
            plt.style.use('default')
        
        sns.set_palette("husl")
    
    def generate_full_report(self, results: Dict, data: pd.DataFrame):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        strategy_name = Path(results['strategy_config']).stem
        
        self.logger.info("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        try:
            # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ walk-forward
            self._generate_walk_forward_charts(results, strategy_name, timestamp)
            
            # 2. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self._generate_parameter_analysis_charts(results, strategy_name, timestamp)
            
            # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self._generate_detailed_statistics_chart(results, strategy_name, timestamp)
            
            # 4. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if results.get('final_backtest'):
                self._generate_final_backtest_chart(results, data, strategy_name, timestamp)
            
            # 5. CSV –æ—Ç—á–µ—Ç—ã
            if self.config['reporting']['export_to_csv']:
                self._export_csv_reports(results, strategy_name, timestamp)
            
            # 6. JSON –æ—Ç—á–µ—Ç
            self._save_json_report(results, strategy_name, timestamp)
            
            self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.charts_dir}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    def _generate_walk_forward_charts(self, results: Dict, strategy_name: str, timestamp: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ walk-forward –∞–Ω–∞–ª–∏–∑–∞."""
        window_results = results['window_results']
        successful_windows = [w for w in window_results if w.get('success', False)]
        
        if not successful_windows:
            self.logger.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle(f'Walk-Forward Analysis: {strategy_name}', fontsize=16, fontweight='bold')
        
        window_ids = [w['window_id'] for w in successful_windows]
        test_scores = [w.get('test_score', 0) for w in successful_windows]
        val_scores = [w.get('val_score', 0) for w in successful_windows]
        train_scores = [w.get('train_score', 0) for w in successful_windows]
        trade_counts = [w.get('test_trades', 0) for w in successful_windows]
        
        # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Train/Val/Test scores
        ax1.plot(window_ids, train_scores, 'o-', label='Train Score', linewidth=2, markersize=6)
        ax1.plot(window_ids, val_scores, 's-', label='Validation Score', linewidth=2, markersize=6)
        ax1.plot(window_ids, test_scores, '^-', label='Test Score', linewidth=2, markersize=6)
        ax1.set_title('üéØ –û—Ü–µ–Ω–∫–∏ –ø–æ –æ–∫–Ω–∞–º', fontweight='bold')
        ax1.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
        ax1.set_ylabel('–û—Ü–µ–Ω–∫–∞')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # 2. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ–∫–Ω–∞–º
        profits = []
        for w in successful_windows:
            metrics = w.get('test_metrics')
            if metrics and hasattr(metrics, 'total_return_pct'):
                profits.append(metrics.total_return_pct)
            else:
                profits.append(0)
        
        colors = ['green' if p > 0 else 'red' for p in profits]
        bars = ax2.bar(window_ids, profits, color=colors, alpha=0.7, edgecolor='black')
        ax2.axhline(0, color='black', alpha=0.3)
        ax2.set_title('üí∞ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ–∫–Ω–∞–º (%)', fontweight='bold')
        ax2.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
        ax2.set_ylabel('–ü—Ä–∏–±—ã–ª—å (%)')
        ax2.grid(True, alpha=0.3)
        
        # –ü–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –±–∞—Ä–∞—Ö
        for bar, profit in zip(bars, profits):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + (0.1 if height > 0 else -0.3),
                    f'{profit:.1f}%', ha='center', va='bottom' if height > 0 else 'top', fontsize=9)
        
        # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        ax3.bar(window_ids, trade_counts, color='orange', alpha=0.7, edgecolor='black')
        ax3.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ –æ–∫–Ω–∞–º', fontweight='bold')
        ax3.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        ax3.grid(True, alpha=0.3)
        
        # 4. –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        degradations = []
        for w in successful_windows:
            train_score = w.get('train_score', 0)
            test_score = w.get('test_score', 0)
            if train_score > 0:
                degradation = (train_score - test_score) / train_score * 100
                degradations.append(degradation)
            else:
                degradations.append(0)
        
        ax4.plot(window_ids, degradations, 'ro-', linewidth=2, markersize=6)
        ax4.axhline(0, color='green', alpha=0.5, linestyle='--', label='–ù–µ—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏')
        ax4.axhline(30, color='red', alpha=0.5, linestyle='--', label='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è')
        ax4.set_title('üìâ –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è Train‚ÜíTest (%)', fontweight='bold')
        ax4.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
        ax4.set_ylabel('–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è (%)')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        filename = self.charts_dir / f"WalkForward_{strategy_name}_{timestamp}.png"
        plt.savefig(filename, dpi=self.config['reporting']['chart_dpi'], 
                   bbox_inches='tight', facecolor='white')
        plt.close()
        
        self.logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ walk-forward —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def _generate_parameter_analysis_charts(self, results: Dict, strategy_name: str, timestamp: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        window_results = results['window_results']
        successful_windows = [w for w in window_results if w.get('success', False)]
        
        if len(successful_windows) < 2:
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        all_params = {}
        param_names = set()
        
        for w in successful_windows:
            params = w.get('best_params', {})
            window_id = w['window_id']
            
            for param_name, param_value in params.items():
                if param_name not in all_params:
                    all_params[param_name] = {'windows': [], 'values': []}
                
                all_params[param_name]['windows'].append(window_id)
                all_params[param_name]['values'].append(param_value)
                param_names.add(param_name)
        
        if not param_names:
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        n_params = len(param_names)
        n_cols = min(3, n_params)
        n_rows = (n_params + n_cols - 1) // n_cols
        
        fig, axes = plt.subplots(n_rows, n_cols, figsize=(5*n_cols, 4*n_rows))
        fig.suptitle(f'–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {strategy_name}', fontsize=16, fontweight='bold')
        
        if n_params == 1:
            axes = [axes]
        elif n_rows == 1:
            axes = [axes] if n_cols == 1 else axes
        else:
            axes = axes.flatten()
        
        for idx, param_name in enumerate(param_names):
            ax = axes[idx] if idx < len(axes) else None
            if ax is None:
                break
            
            windows = all_params[param_name]['windows']
            values = all_params[param_name]['values']
            
            if all(isinstance(v, (int, float)) for v in values):
                # –ß–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                ax.plot(windows, values, 'o-', linewidth=2, markersize=8)
                ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                mean_val = np.mean(values)
                std_val = np.std(values)
                ax.axhline(mean_val, color='red', alpha=0.5, linestyle='--', 
                          label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_val:.2f}')
                ax.fill_between(windows, mean_val - std_val, mean_val + std_val, 
                               alpha=0.2, color='red', label=f'¬±1œÉ: {std_val:.2f}')
                ax.legend()
            else:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç
                from collections import Counter
                value_counts = Counter(values)
                
                categories = list(value_counts.keys())
                counts = list(value_counts.values())
                
                ax.bar(categories, counts, alpha=0.7)
                ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
                
                # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if len(categories) > 3:
                    ax.tick_params(axis='x', rotation=45)
            
            ax.set_title(f'{param_name}', fontweight='bold')
            ax.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
            ax.grid(True, alpha=0.3)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ subplot'—ã
        for idx in range(n_params, len(axes)):
            fig.delaxes(axes[idx])
        
        plt.tight_layout()
        filename = self.charts_dir / f"Parameters_{strategy_name}_{timestamp}.png"
        plt.savefig(filename, dpi=self.config['reporting']['chart_dpi'], 
                   bbox_inches='tight', facecolor='white')
        plt.close()
        
        self.logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def _generate_detailed_statistics_chart(self, results: Dict, strategy_name: str, timestamp: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        analysis = results.get('analysis', {})
        
        if not analysis:
            return
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle(f'–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {strategy_name}', fontsize=16, fontweight='bold')
        
        # 1. Overfitting Score
        overfitting_score = analysis.get('overfitting_score', 0)
        colors = ['green' if overfitting_score < 40 else 'orange' if overfitting_score < 70 else 'red']
        
        ax1.bar(['Overfitting Score'], [overfitting_score], color=colors, alpha=0.7)
        ax1.axhline(40, color='orange', alpha=0.5, linestyle='--', label='–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫')
        ax1.axhline(70, color='red', alpha=0.5, linestyle='--', label='–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫')
        ax1.set_title('üéØ –†–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', fontweight='bold')
        ax1.set_ylabel('Score (0-100)')
        ax1.set_ylim(0, 100)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ü–µ–Ω–∫–æ–π
        if overfitting_score < 40:
            verdict = "‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        elif overfitting_score < 70:
            verdict = "‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"
        else:
            verdict = "üö® –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        
        ax1.text(0, overfitting_score + 5, f'{overfitting_score:.1f}\n{verdict}', 
                ha='center', va='bottom', fontweight='bold', fontsize=12)
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        total_windows = results['total_windows']
        successful_windows = results['successful_windows']
        
        success_data = [successful_windows, total_windows - successful_windows]
        success_labels = ['–£—Å–ø–µ—à–Ω—ã–µ', '–ù–µ—É—Å–ø–µ—à–Ω—ã–µ']
        colors_pie = ['green', 'red']
        
        ax2.pie(success_data, labels=success_labels, colors=colors_pie, autopct='%1.1f%%', startangle=90)
        ax2.set_title(f'üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–∫–æ–Ω\n({successful_windows}/{total_windows})', fontweight='bold')
        
        # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        window_results = results['window_results']
        successful_test_scores = [w.get('test_score', 0) for w in window_results if w.get('success', False)]
        
        if successful_test_scores:
            ax3.hist(successful_test_scores, bins=min(10, len(successful_test_scores)), 
                    alpha=0.7, color='blue', edgecolor='black')
            ax3.axvline(np.mean(successful_test_scores), color='red', linestyle='--', 
                       label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(successful_test_scores):.3f}')
            ax3.set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Test Scores', fontweight='bold')
            ax3.set_xlabel('Test Score')
            ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
        else:
            ax3.text(0.5, 0.5, '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω', ha='center', va='center', transform=ax3.transAxes)
            ax3.set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Test Scores', fontweight='bold')
        
        # 4. –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        if len(successful_test_scores) >= 3:
            window_ids = [w['window_id'] for w in window_results if w.get('success', False)]
            correlation = np.corrcoef(window_ids, successful_test_scores)[0, 1]
            
            ax4.scatter(window_ids, successful_test_scores, alpha=0.7, s=100)
            
            # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            z = np.polyfit(window_ids, successful_test_scores, 1)
            p = np.poly1d(z)
            ax4.plot(window_ids, p(window_ids), "r--", alpha=0.8, 
                    label=f'–¢—Ä–µ–Ω–¥ (r={correlation:.3f})')
            
            ax4.set_title('‚è∞ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏', fontweight='bold')
            ax4.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
            ax4.set_ylabel('Test Score')
            ax4.legend()
            ax4.grid(True, alpha=0.3)
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            if correlation < -0.5:
                trend_text = "üìâ –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è"
            elif correlation > 0.3:
                trend_text = "üìà –£–ª—É—á—à–µ–Ω–∏–µ"
            else:
                trend_text = "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ"
            
            ax4.text(0.05, 0.95, trend_text, transform=ax4.transAxes, 
                    fontweight='bold', fontsize=12, va='top')
        else:
            ax4.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞', 
                    ha='center', va='center', transform=ax4.transAxes)
            ax4.set_title('‚è∞ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏', fontweight='bold')
        
        plt.tight_layout()
        filename = self.charts_dir / f"Statistics_{strategy_name}_{timestamp}.png"
        plt.savefig(filename, dpi=self.config['reporting']['chart_dpi'], 
                   bbox_inches='tight', facecolor='white')
        plt.close()
        
        self.logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def _generate_final_backtest_chart(self, results: Dict, data: pd.DataFrame, 
                                     strategy_name: str, timestamp: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞."""
        final_backtest = results.get('final_backtest')
        if not final_backtest or not final_backtest.get('success'):
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è equity curve
        # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        
        fig, ax = plt.subplots(1, 1, figsize=(12, 8))
        
        metrics = final_backtest.get('metrics')
        if metrics:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            info_text = f"""
            –§–ò–ù–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢: {strategy_name}
            
            üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}%
            üìä Sharpe Ratio: {metrics.sharpe_ratio:.3f}
            üìä Sortino Ratio: {metrics.sortino_ratio:.3f}
            üìä Calmar Ratio: {metrics.calmar_ratio:.3f}
            üìâ Max Drawdown: {metrics.max_drawdown_pct:.2f}%
            
            üìÖ –ü–µ—Ä–∏–æ–¥: {data.index[0].date()} - {data.index[-1].date()}
            üî¢ –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: {len(data)} —Å–≤–µ—á–µ–π
            
            –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
            {json.dumps(results.get('best_parameters', {}), indent=2)}
            """
            
            ax.text(0.05, 0.95, info_text, transform=ax.transAxes, fontsize=12,
                   verticalalignment='top', fontfamily='monospace',
                   bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue", alpha=0.7))
        
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        ax.set_title(f'–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {strategy_name}', fontsize=16, fontweight='bold')
        
        plt.tight_layout()
        filename = self.charts_dir / f"FinalBacktest_{strategy_name}_{timestamp}.png"
        plt.savefig(filename, dpi=self.config['reporting']['chart_dpi'], 
                   bbox_inches='tight', facecolor='white')
        plt.close()
        
        self.logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    def _export_csv_reports(self, results: Dict, strategy_name: str, timestamp: str):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª—ã."""
        try:
            # 1. –°–≤–æ–¥–∫–∞ –ø–æ –æ–∫–Ω–∞–º
            window_results = results['window_results']
            df_windows = pd.DataFrame(window_results)
            
            csv_windows = self.charts_dir / f"Windows_{strategy_name}_{timestamp}.csv"
            df_windows.to_csv(csv_windows, index=False)
            
            # 2. –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if results.get('best_parameters'):
                df_params = pd.DataFrame([results['best_parameters']])
                csv_params = self.charts_dir / f"BestParams_{strategy_name}_{timestamp}.csv"
                df_params.to_csv(csv_params, index=False)
            
            self.logger.info(f"üíæ CSV –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.charts_dir}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
    
    def _save_json_report(self, results: Dict, strategy_name: str, timestamp: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ JSON."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            json_results = self._prepare_for_json(results)
            
            json_file = self.charts_dir / f"Report_{strategy_name}_{timestamp}.json"
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(json_results, f, indent=2, ensure_ascii=False, default=str)
            
            self.logger.info(f"üíæ JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
    
    def _prepare_for_json(self, obj):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if hasattr(obj, '__dict__'):
            return self._prepare_for_json(obj.__dict__)
        elif isinstance(obj, dict):
            return {key: self._prepare_for_json(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self._prepare_for_json(item) for item in obj]
        elif isinstance(obj, (np.integer, np.floating)):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        elif pd.isna(obj):
            return None
        else:
            return obj
    
    def print_summary(self, results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        print("\n" + "="*80)
        print("üéâ –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("="*80)
        
        strategy_name = Path(results['strategy_config']).stem
        print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['execution_time_minutes']:.1f} –º–∏–Ω—É—Ç")
        print(f"üóìÔ∏è  –î–∞—Ç–∞: {results['timestamp']}")
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ö–û–ù:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω: {results['successful_windows']}/{results['total_windows']} "
              f"({results['successful_windows']/results['total_windows']*100:.1f}%)")
        
        analysis = results.get('analysis', {})
        if analysis:
            overfitting_score = analysis.get('overfitting_score', 0)
            print(f"   üéØ Overfitting Score: {overfitting_score:.1f}/100")
            
            if overfitting_score < 40:
                verdict = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            elif overfitting_score < 70:
                verdict = "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            else:
                verdict = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            print(f"   üìã –û—Ü–µ–Ω–∫–∞: {verdict}")
        
        # –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        best_params = results.get('best_parameters')
        if best_params:
            print(f"\nüèÜ –õ–£–ß–®–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
            for param, value in best_params.items():
                print(f"   {param}: {value}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
        final_backtest = results.get('final_backtest')
        if final_backtest and final_backtest.get('success'):
            metrics = final_backtest.get('metrics')
            if metrics:
                print(f"\nüí∞ –§–ò–ù–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢:")
                print(f"   üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.total_return_pct:.2f}%")
                print(f"   üìä Sharpe Ratio: {metrics.sharpe_ratio:.3f}")
                print(f"   üìä Sortino Ratio: {metrics.sortino_ratio:.3f}")
                print(f"   üìâ Max Drawdown: {metrics.max_drawdown_pct:.2f}%")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = results.get('overfitting_warnings', [])
        if warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in warnings:
                print(f"   ‚Ä¢ {warning}")
        
        print("\n" + "="*80)