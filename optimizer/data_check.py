# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º walk-forward
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

def check_data_coverage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üìä –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ –∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ
    df = yf.download("BTC-USD", period="2y", interval="1h", progress=False)
    
    if df is None or df.empty:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None
        
    print(f"üìà –¢–∏–∫–µ—Ä: BTC-USD")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: 2y, –∏–Ω—Ç–µ—Ä–≤–∞–ª: 1h") 
    print(f"üî¢ –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(df)}")
    print(f"üìÜ –ù–∞—á–∞–ª–æ: {df.index[0]}")
    print(f"üìÜ –ö–æ–Ω–µ—Ü: {df.index[-1]}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    duration = df.index[-1] - df.index[0]
    days = duration.days
    months = days / 30.44  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    
    print(f"‚è±Ô∏è  –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {days} –¥–Ω–µ–π ({months:.1f} –º–µ—Å—è—Ü–µ–≤)")
    
    return df, months

def suggest_walk_forward_config(available_months):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ walk-forward"""
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û WALK-FORWARD")
    print("=" * 50)
    
    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º ~80% –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–æ–Ω
    usable_months = available_months * 0.8
    
    configs = []
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∞–ª–µ–Ω—å–∫–∏–µ –æ–∫–Ω–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    config1 = {
        "name": "–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "train_months": 1.0,
        "validation_months": 0.25,  # ~1 –Ω–µ–¥–µ–ª—è
        "test_months": 0.5,         # ~2 –Ω–µ–¥–µ–ª–∏
        "step_months": 0.25,        # —à–∞–≥ –Ω–µ–¥–µ–ª—è
    }
    window_size1 = config1["train_months"] + config1["validation_months"] + config1["test_months"]
    max_windows1 = int((usable_months - window_size1) / config1["step_months"]) + 1
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ä–µ–¥–Ω–∏–µ –æ–∫–Ω–∞ (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ)  
    config2 = {
        "name": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "train_months": 1.5,
        "validation_months": 0.5,
        "test_months": 0.75,
        "step_months": 0.5,
    }
    window_size2 = config2["train_months"] + config2["validation_months"] + config2["test_months"]
    max_windows2 = int((usable_months - window_size2) / config2["step_months"]) + 1
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ë–æ–ª—å—à–∏–µ –æ–∫–Ω–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    config3 = {
        "name": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
        "train_months": 2.0,
        "validation_months": 0.5,
        "test_months": 1.0,
        "step_months": 0.75,
    }
    window_size3 = config3["train_months"] + config3["validation_months"] + config3["test_months"]
    max_windows3 = int((usable_months - window_size3) / config3["step_months"]) + 1
    
    configs = [
        (config1, window_size1, max_windows1),
        (config2, window_size2, max_windows2), 
        (config3, window_size3, max_windows3)
    ]
    
    for i, (config, window_size, max_windows) in enumerate(configs, 1):
        print(f"\nüìã –í–∞—Ä–∏–∞–Ω—Ç {i}: {config['name']}")
        print(f"   –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {window_size:.1f} –º–µ—Å")
        print(f"   –ú–∞–∫—Å–∏–º—É–º –æ–∫–æ–Ω: {max_windows}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥:")
        for key, value in config.items():
            if key != "name":
                print(f"     \"{key}\": {value},")
        
        if max_windows >= 3:
            print(f"   ‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç (>= 3 –æ–∫–æ–Ω)")
        else:
            print(f"   ‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (< 3 –æ–∫–æ–Ω)")
    
    return configs

def generate_fixed_config(selected_config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥"""
    
    print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–§–ò–ì")
    print("=" * 50)
    
    fixed_config = f'''{{
    "data_settings": {{
        "default_ticker": "BTC-USD",
        "default_period": "2y",
        "default_interval": "1h",
        "min_data_points": 1000
    }},

    "walk_forward": {{
        "train_months": {selected_config["train_months"]},
        "validation_months": {selected_config["validation_months"]},
        "test_months": {selected_config["test_months"]},
        "step_months": {selected_config["step_months"]},
        "min_windows": 3,
        "max_windows": 20
    }},

    "optimization": {{
        "trials_per_window": 15,
        "timeout_minutes": 10,
        "n_jobs": 1,
        "study_direction": "maximize"
    }},

    "validation": {{
        "min_trades_for_significance": 3,
        "statistical_significance_level": 0.05
    }},

    "risk_limits": {{
        "max_drawdown_threshold": 0.20,
        "min_win_rate": 0.20,
        "min_profit_factor": 1.05
    }},

    "metrics_weights": {{
        "sharpe_ratio": 0.4,
        "sortino_ratio": 0.3,
        "calmar_ratio": 0.2,
        "stability_bonus": 0.1
    }},

    "overfitting_detection": {{
        "max_profitable_windows_ratio": 0.90,
        "min_parameter_consistency": 0.2,
        "max_score_degradation": 0.5
    }},

    "reporting": {{
        "charts_directory": "charts/optimizer",
        "export_to_csv": true,
        "chart_dpi": 300,
        "chart_style": "default"
    }},

    "logging": {{
        "level": "INFO",
        "save_to_file": true,
        "log_file": "optimizer.log"
    }}
}}'''

    return fixed_config

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ò –ù–ê–°–¢–†–û–ô–ö–ê WALK-FORWARD")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    result = check_data_coverage()
    if result is None:
        return
        
    df, available_months = result
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    configs = suggest_walk_forward_config(available_months)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π)
    best_config = None
    for config, window_size, max_windows in configs:
        if max_windows >= 3:
            best_config = config
            break
    
    if best_config:
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –í–´–ë–û–†: {best_config['name']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
        fixed_config_content = generate_fixed_config(best_config)
        print(fixed_config_content)
        
        print(f"\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
        print(f"1. –°–æ—Ö—Ä–∞–Ω–∏ –∫–æ–Ω—Ñ–∏–≥ –≤—ã—à–µ –≤ —Ñ–∞–π–ª 'optimizer_config_fixed.json'")
        print(f"2. –ó–∞–ø—É—Å—Ç–∏: python optimizer/main_optimizer.py configs/optimizer/rsi_sma.json --config optimizer_config_fixed.json")
        print(f"3. –ò–ª–∏ –∑–∞–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ optimizer/optimizer_config.json")
        
    else:
        print(f"\n‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–•")
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ {available_months:.1f} –º–µ—Å—è—Ü–µ–≤, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ~4-5 –º–µ—Å—è—Ü–µ–≤")
        print(f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä –∏–ª–∏ –±–æ–ª—å—à–∏–π –ø–µ—Ä–∏–æ–¥")

if __name__ == "__main__":
    main()