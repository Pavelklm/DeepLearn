# –§–∞–π–ª: trading/objective_function.py

import pandas as pd
import numpy as np
import json
import importlib

from bot_process import Playground
from analytics.metrics_calculator import MetricsCalculator
from risk_management.config_manager import ConfigManager

def calculate_final_score(metrics) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å —É—á—ë—Ç–æ–º –∂—ë—Å—Ç–∫–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.
    –í–ï–°–´ –ù–ï –ò–ó–ú–ï–ù–ï–ù–´ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # --- –í–µ—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏ ---
    weights = {
        'sortino': 0.45, # 45% - —É–ø–æ—Ä –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å –±–µ–∑ –ø–ª–æ—Ö–∏—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤
        'sharpe': 0.45,  # 45% - —É–ø–æ—Ä –Ω–∞ –æ–±—â—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        'calmar': 0.10   # 10% - –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–æ–≤
    }

    sharpe = metrics.sharpe_ratio
    calmar = metrics.calmar_ratio
    sortino = metrics.sortino_ratio

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π ---
    # –ï—Å–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ), –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
    if sharpe > 8.0 or sortino > 12.0 or calmar > 15.0:
        print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: Sharpe={sharpe:.2f}, Sortino={sortino:.2f}, Calmar={calmar:.2f}")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    sharpe_score = max(0, sharpe)
    calmar_score = max(0, calmar)
    sortino_score = max(0, sortino)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
    final_score = (
        sortino_score * weights['sortino'] +
        sharpe_score * weights['sharpe'] +
        calmar_score * weights['calmar']
    )
    
    return final_score


def validate_strategy_quality(trade_history_dicts, metrics) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, reason_if_invalid).
    """
    total_trades = len(trade_history_dicts)
    
    # 1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if total_trades < 15:
        return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {total_trades}/15"
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏
    total_profit = sum(t['profit'] for t in trade_history_dicts)
    if total_profit <= 0:
        return False, f"–£–±—ã—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø—Ä–∏–±—ã–ª—å = {total_profit:.2f}"
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    if (metrics.sharpe_ratio > 15.0 or 
        metrics.sortino_ratio > 20.0 or 
        metrics.calmar_ratio > 25.0):
        return False, "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã - –≤–æ–∑–º–æ–∂–Ω–∞—è –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–¥–µ–ª–æ–∫
    winning_trades = sum(1 for t in trade_history_dicts if t['success'])
    losing_trades = total_trades - winning_trades
        
    return True, "OK"


def objective_function(trial, ohlcv_data: pd.DataFrame, config_path: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    """
    with open(config_path, 'r', encoding='utf-8') as f:
        opt_config = json.load(f)

    strategy_params = {}
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è Optuna –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞
    for param in opt_config["parameters"]:
        name = param["name"]
        p_type = param["type"]
        
        dependency = param.get("depends_on")
        low = param["low"]
        if dependency:
            dependent_param_value = strategy_params.get(dependency["name"])
            if dependent_param_value is not None:
                margin = dependency.get("margin", 1)
                if dependency["condition"] == "greater":
                    low = dependent_param_value + margin
        try:
            if p_type == "int":
                strategy_params[name] = trial.suggest_int(name, low, param["high"])
            elif p_type == "float":
                strategy_params[name] = trial.suggest_float(name, low, param["high"], step=param.get("step"))
            elif p_type == "categorical":
                strategy_params[name] = trial.suggest_categorical(name, param["choices"])
        except ValueError:
            # –ï—Å–ª–∏ low > high –∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –¥–µ–ª–∞–µ–º trial –Ω–µ–≤—ã–≥–æ–¥–Ω—ã–º
            trial.set_user_attr('rejection_reason', 'Invalid parameter range')
            return -100.0

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    try:
        strategy_module_path = f"strategies.{opt_config['strategy_file']}"
        strategy_module = importlib.import_module(strategy_module_path)
        # –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'Strategy' –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é
        StrategyClass = strategy_module.Strategy 
    except (ImportError, AttributeError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {opt_config['strategy_file']}: {e}")
        trial.set_user_attr('rejection_reason', f'Strategy loading error: {e}')
        return -100.0

    bot_name = f"optimizer_trial_{trial.number}"
    bot_config = {
        "bot_name": bot_name,
        "strategy_file": opt_config["strategy_file"], 
        "symbol": "BTC-USD",
        "strategy_params": strategy_params,
        "risk_config_file": 'configs/live_default.json',
        "StrategyClass": StrategyClass 
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    try:
        backtest = Playground(
            ohlcv_data=ohlcv_data,
            bot_config=bot_config,
            bot_name=bot_name
        )
        backtest.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ –¥–ª—è trial {trial.number}: {e}")
        trial.set_user_attr('rejection_reason', f'Backtest error: {e}')
        return -50.0
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    trade_history = backtest.risk_manager.performance_tracker.trade_history
    trade_history_dicts = [trade.__dict__ for trade in trade_history]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    base_config = ConfigManager.load_config(bot_config['risk_config_file'])
    initial_balance = base_config.trading.initial_balance
    metrics_calculator = MetricsCalculator(trade_history=trade_history_dicts, initial_balance=initial_balance)
    all_metrics = metrics_calculator.calculate_all_metrics()
    
    # –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    is_valid, rejection_reason = validate_strategy_quality(trade_history_dicts, all_metrics)
    if not is_valid:
        trial.set_user_attr('rejection_reason', rejection_reason)
        print(f"üö´ Trial {trial.number} –æ—Ç–∫–ª–æ–Ω–µ–Ω: {rejection_reason}")
        return -25.0  # –ú—è–≥–∫–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ trial –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∞
    trial.set_user_attr('sharpe_ratio', all_metrics.sharpe_ratio)
    trial.set_user_attr('sortino_ratio', all_metrics.sortino_ratio)
    trial.set_user_attr('calmar_ratio', all_metrics.calmar_ratio)
    
    total_trades = len(trade_history_dicts)
    winning_trades = sum(1 for t in trade_history_dicts if t['success'])
    win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
    total_profit = sum(t['profit'] for t in trade_history_dicts)

    trial.set_user_attr('trade_count', total_trades)
    trial.set_user_attr('win_rate', win_rate)
    trial.set_user_attr('total_profit', total_profit)
    trial.set_user_attr('rejection_reason', 'Accepted')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
    final_score = calculate_final_score(all_metrics)

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if pd.isna(final_score) or not np.isfinite(final_score):
        trial.set_user_attr('rejection_reason', 'Invalid final score')
        return -10.0
        
    return final_score