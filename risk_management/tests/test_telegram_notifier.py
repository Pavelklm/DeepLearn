"""–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º"""
import pytest
import os
import logging
import asyncio
import threading
import time
from unittest.mock import patch, Mock, AsyncMock, MagicMock
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config_manager import ConfigManager
from telegram_notifier import TelegramNotifier
from telegram.error import TelegramError


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


@pytest.fixture
def real_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π config.json –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logger.info("–ó–ê–ì–†–£–ó–ö–ê_–§–ò–ö–°–¢–£–†–´: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è Telegram —Ç–µ—Å—Ç–æ–≤")
    config_path = os.path.join(os.path.dirname(__file__), '..', 'config.json')
    config = ConfigManager.load_config(config_path)
    logger.info(f"CONFIG_LOADED: telegram_token –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç={bool(config.telegram_token)}")
    logger.info(f"CONFIG_LOADED: telegram_chat_id={config.telegram_chat_id}")
    return config


@pytest.fixture
def mock_telegram_bot():
    """–ú–æ–∫–∞–µ–º Telegram Bot API"""
    logger.info("–ú–û–ö–ê–ï–ú_–¢–ï–õ–ï–ì–†–ê–ú: –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è Telegram Bot API")
    
    with patch('telegram_notifier.Bot') as mock_bot:
        # –ú–æ–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ send_message
        mock_bot.return_value.send_message = AsyncMock()
        mock_bot.return_value.send_message.return_value = Mock(message_id=123)
        
        logger.info("–¢–ï–õ–ï–ì–†–ê–ú_–ó–ê–ú–û–ö–ê–ù: send_message –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        yield mock_bot


# ===============================
# –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ (–ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨)
# ===============================

def test_send_notification_success(real_config, mock_telegram_bot):
    """‚úÖ –ë–ê–ó–û–í–´–ô –¢–ï–°–¢: –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_send_notification_success")
    
    notifier = TelegramNotifier(real_config)
    test_message = "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"
    
    result = notifier.send_notification(test_message)
    
    assert result == True
    mock_telegram_bot.return_value.send_message.assert_called_once()
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    assert call_args.kwargs['chat_id'] == real_config.telegram_chat_id
    assert call_args.kwargs['text'] == test_message
    assert call_args.kwargs['parse_mode'] == 'HTML'
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì")


def test_send_notification_telegram_error(real_config, mock_telegram_bot):
    """‚ùå –ë–ê–ó–û–í–´–ô –¢–ï–°–¢: –û—à–∏–±–∫–∞ Telegram API"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_send_notification_telegram_error")
    
    mock_telegram_bot.return_value.send_message.side_effect = TelegramError("Network timeout")
    
    notifier = TelegramNotifier(real_config)
    result = notifier.send_notification("Test message")
    
    assert result == False
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: TelegramError –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚úì")


def test_telegram_notifier_initialization(real_config):
    """üîß –ë–ê–ó–û–í–´–ô –¢–ï–°–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_telegram_notifier_initialization")
    
    notifier = TelegramNotifier(real_config)
    
    assert notifier is not None
    assert hasattr(notifier, 'bot')
    assert hasattr(notifier, 'chat_id')
    assert notifier.chat_id == real_config.telegram_chat_id
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚úì")


# ===============================
# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ (EVENT LOOP –ü–†–û–ë–õ–ï–ú–´)
# ===============================

def test_event_loop_already_running_critical(real_config, mock_telegram_bot):
    """üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: Event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω - RuntimeError"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_event_loop_already_running_critical")
    logger.info("üö® –ü–†–û–í–ï–†–Ø–ï–ú –°–ê–ú–´–ô –û–ü–ê–°–ù–´–ô –ë–ê–ì –° EVENT LOOP!")
    
    notifier = TelegramNotifier(real_config)
    
    async def simulate_running_loop():
        """–°–∏–º—É–ª–∏—Ä—É–µ–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop"""
        logger.info("–°–¶–ï–ù–ê–†–ò–ô: Event loop —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ event loop
        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ RuntimeError –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        with patch('asyncio.new_event_loop') as mock_new_loop:
            with patch('asyncio.set_event_loop') as mock_set_loop:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º RuntimeError –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π loop
                mock_new_loop.side_effect = RuntimeError("Event loop is already running")
                
                result = notifier.send_notification("Test in running loop")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢_–í_–ê–ö–¢–ò–í–ù–û–ú_LOOP: {result}")
                assert result == False, "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –ø—Ä–∏ RuntimeError"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ event loop
    try:
        asyncio.run(simulate_running_loop())
        logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: Event loop RuntimeError –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚úì")
    except RuntimeError as e:
        if "already running" in str(e):
            logger.info("–û–ñ–ò–î–ê–ï–ú–ê–Ø_–û–®–ò–ë–ö–ê: Event loop –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚úì")
        else:
            raise


def test_multiple_concurrent_notifications_race_condition(real_config, mock_telegram_bot):
    """üîÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - race condition"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_multiple_concurrent_notifications_race_condition")
    logger.info("üö® –ü–†–û–í–ï–†–Ø–ï–ú RACE CONDITION –ü–†–ò –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–•!")
    
    notifier = TelegramNotifier(real_config)
    results = []
    errors = []
    
    def send_notification_in_thread(thread_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info(f"–ü–û–¢–û–ö_{thread_id}: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            result = notifier.send_notification(f"Message from thread {thread_id}")
            results.append((thread_id, result))
            logger.info(f"–ü–û–¢–û–ö_{thread_id}: –†–µ–∑—É–ª—å—Ç–∞—Ç = {result}")
        except Exception as e:
            errors.append((thread_id, str(e)))
            logger.error(f"–ü–û–¢–û–ö_{thread_id}: –û—à–∏–±–∫–∞ = {e}")
    
    # –°–æ–∑–¥–∞–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    threads = []
    for i in range(5):
        thread = threading.Thread(target=send_notification_in_thread, args=(i,))
        threads.append(thread)
    
    logger.info("–ó–ê–ü–£–°–ö_–ü–û–¢–û–ö–û–í: –°—Ç–∞—Ä—Ç—É–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    for thread in threads:
        thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join(timeout=10.0)  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ—Ç–æ–∫
    
    logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´_–ü–û–¢–û–ö–û–í: success={len(results)}, errors={len(errors)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if errors:
        logger.warning(f"–û–ë–ù–ê–†–£–ñ–ï–ù–´_–û–®–ò–ë–ö–ò: {errors}")
        # –í –∏–¥–µ–∞–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫, –Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ç–∏–ø
        for thread_id, error in errors:
            logger.info(f"–û–®–ò–ë–ö–ê_–ü–û–¢–û–ö–ê_{thread_id}: {error}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
    successful_results = [r for r in results if r[1] == True]
    assert len(successful_results) > 0, "–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–±–æ–µ–≤ ‚úì")


def test_asyncio_runtime_error_handling(real_config, mock_telegram_bot):
    """‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –û–±—Ä–∞–±–æ—Ç–∫–∞ RuntimeError –æ—Ç asyncio"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_asyncio_runtime_error_handling")
    
    notifier = TelegramNotifier(real_config)
    
    # –ú–æ–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ asyncio –æ—à–∏–±–∫–∏
    asyncio_errors = [
        RuntimeError("There is no current event loop in thread"),
        RuntimeError("Event loop is closed"),
        RuntimeError("This event loop is already running"),
        OSError("Too many open files")
    ]
    
    for error in asyncio_errors:
        logger.info(f"–¢–ï–°–¢–ò–†–£–ï–ú_ASYNCIO_–û–®–ò–ë–ö–£: {type(error).__name__}: {error}")
        
        with patch('asyncio.new_event_loop') as mock_new_loop:
            mock_new_loop.side_effect = error
            
            result = notifier.send_notification("Test asyncio error")
            
            # –í—Å–µ asyncio –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False
            assert result == False, f"AsyncIO –æ—à–∏–±–∫–∞ {error} –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å False"
            
            logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢_{type(error).__name__}: False ‚úì")
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ asyncio RuntimeError –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ‚úì")


# ===============================
# EDGE CASES –¢–ï–°–¢–´
# ===============================

def test_notify_trade_executed_short_position(real_config, mock_telegram_bot):
    """üìâ EDGE CASE: SHORT –ø–æ–∑–∏—Ü–∏—è (TP < entry_price)"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_notify_trade_executed_short_position")
    
    notifier = TelegramNotifier(real_config)
    
    # SHORT —Å–¥–µ–ª–∫–∞: –≤—Ö–æ–¥–∏–º –Ω–∞ 50000, TP –Ω–∞ 48000 (–ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏)
    trade_details = {
        'entry_price': 50000.0,
        'tp_price': 48000.0,   # TP –ú–ï–ù–¨–®–ï entry –¥–ª—è SHORT
        'sl_price': 51000.0,   # SL –ë–û–õ–¨–®–ï entry –¥–ª—è SHORT
        'position_size_usd': 1000.0,
        'order_id': 'SHORT_12345',
        'side': 'SELL'
    }
    
    logger.info(f"SHORT_–î–ï–¢–ê–õ–ò: entry={trade_details['entry_price']}, tp={trade_details['tp_price']}, sl={trade_details['sl_price']}")
    
    result = notifier.notify_trade_executed(trade_details)
    assert result == True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_message = call_args.kwargs['text']
    
    assert "SHORT" in sent_message, "–î–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å SHORT –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    assert "üìâ" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏ –ø–∞–¥–µ–Ω–∏—è"
    assert "üî¥" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è SHORT"
    assert "48,000" in sent_message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å TP —Ü–µ–Ω–∞"
    assert "51,000" in sent_message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å SL —Ü–µ–Ω–∞"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: SHORT –ø–æ–∑–∏—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úì")


def test_notify_risk_limit_breach_unknown_type(real_config, mock_telegram_bot):
    """‚ùì EDGE CASE: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_notify_risk_limit_breach_unknown_type")
    
    notifier = TelegramNotifier(real_config)
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞
    unknown_limit_type = 'unknown_super_limit'
    current_value = 999.99
    
    logger.info(f"–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô_–¢–ò–ü: {unknown_limit_type}, value={current_value}")
    
    result = notifier.notify_risk_limit_breach(unknown_limit_type, current_value)
    assert result == True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ else –≤–µ—Ç–∫–∞
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_message = call_args.kwargs['text']
    
    assert "üö®" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—â–∏–π —ç–º–æ–¥–∑–∏ —Ç—Ä–µ–≤–æ–≥–∏"
    assert "UNKNOWN_SUPER_LIMIT" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø –ª–∏–º–∏—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"
    assert "999.99" in sent_message, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    assert "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in sent_message, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚úì")


def test_notify_trade_closed_manual_type(real_config, mock_telegram_bot):
    """üñêÔ∏è EDGE CASE: –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ (MANUAL)"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_notify_trade_closed_manual_type")
    
    notifier = TelegramNotifier(real_config)
    
    # –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å –ø—Ä–∏–±—ã–ª—å—é
    trade_result = {
        'entry_price': 50000.0,
        'exit_price': 50500.0,
        'profit': 100.0,
        'success': True,
        'position_size': 1000.0,
        'trade_type': 'MANUAL'  # –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    }
    
    logger.info(f"–†–£–ß–ù–û–ï_–ó–ê–ö–†–´–¢–ò–ï: trade_type={trade_result['trade_type']}, profit={trade_result['profit']}")
    
    result = notifier.notify_trade_closed(trade_result)
    assert result == True
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_message = call_args.kwargs['text']
    
    assert "–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è"
    assert "‚úÖ" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏"
    assert "–ü–†–ò–ë–´–õ–¨" in sent_message, "–î–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚úì")


def test_notify_trade_closed_unknown_type(real_config, mock_telegram_bot):
    """‚ùì EDGE CASE: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_notify_trade_closed_unknown_type")
    
    notifier = TelegramNotifier(real_config)
    
    trade_result = {
        'entry_price': 50000.0,
        'exit_price': 49500.0,
        'profit': -100.0,
        'success': False,
        'position_size': 1000.0,
        'trade_type': 'WEIRD_CLOSE_TYPE'  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
    }
    
    logger.info(f"–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô_–¢–ò–ü_–ó–ê–ö–†–´–¢–ò–Ø: {trade_result['trade_type']}")
    
    result = notifier.notify_trade_closed(trade_result)
    assert result == True
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_message = call_args.kwargs['text']
    
    # –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    assert "WEIRD_CLOSE_TYPE" in sent_message, "–î–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø"
    assert "‚ùå" in sent_message, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏ –Ω–µ—É–¥–∞—á–∏ –¥–ª—è —É–±—ã—Ç–∫–∞"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚úì")


def test_trade_data_with_none_values(real_config, mock_telegram_bot):
    """üö´ EDGE CASE: None –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_trade_data_with_none_values")
    
    notifier = TelegramNotifier(real_config)
    
    # –°–¥–µ–ª–∫–∞ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    problematic_trade = {
        'entry_price': None,
        'exit_price': None,
        'profit': None,
        'success': False,
        'position_size': None,
        'trade_type': None
    }
    
    logger.info(f"–ü–†–û–ë–õ–ï–ú–ù–´–ï_–î–ê–ù–ù–´–ï: {problematic_trade}")
    
    # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è
    result = notifier.notify_trade_closed(problematic_trade)
    assert result == True, "–î–∞–∂–µ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_message = call_args.kwargs['text']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (–¥–∞–∂–µ –µ—Å–ª–∏ —Å None)
    assert "–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê" in sent_message, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: None –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è ‚úì")


def test_zero_division_edge_cases(real_config, mock_telegram_bot):
    """‚ûó EDGE CASE: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_zero_division_edge_cases")
    
    notifier = TelegramNotifier(real_config)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    zero_position_trade = {
        'entry_price': 50000.0,
        'tp_price': 51000.0,
        'sl_price': 49000.0,
        'position_size_usd': 0.0,  # –ù–û–õ–¨!
        'order_id': 'ZERO_POS',
        'side': 'BUY'
    }
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_1: –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
    result1 = notifier.notify_trade_executed(zero_position_trade)
    assert result1 == True, "–ù—É–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è"
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–µ–Ω—ã entry –∏ TP
    same_prices_trade = {
        'entry_price': 50000.0,
        'tp_price': 50000.0,  # –¢–ê –ñ–ï –¶–ï–ù–ê!
        'sl_price': 49000.0,
        'position_size_usd': 1000.0,
        'order_id': 'SAME_PRICE',
        'side': 'BUY'
    }
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_2: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ entry –∏ TP —Ü–µ–Ω—ã")
    result2 = notifier.notify_trade_executed(same_prices_trade)
    assert result2 == True, "–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è"
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù—É–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –∑–∞–∫—Ä—ã—Ç–∏–∏
    zero_profit_close = {
        'entry_price': 50000.0,
        'exit_price': 50000.0,
        'profit': 0.0,  # –ù–û–õ–¨ –ü–†–ò–ë–´–õ–ò!
        'success': True,
        'position_size': 0.0,  # –ò –ù–û–õ–¨ –ü–û–ó–ò–¶–ò–ò!
        'trade_type': 'TP'
    }
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_3: –ù—É–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∏ —Ä–∞–∑–º–µ—Ä")
    result3 = notifier.notify_trade_closed(zero_profit_close)
    assert result3 == True, "–ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ‚úì")


# ===============================
# –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ò –û–®–ò–ë–ö–ò
# ===============================

def test_non_telegram_exceptions(real_config, mock_telegram_bot):
    """EDGE CASE: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–æ–∫–∏–Ω–≥"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_non_telegram_exceptions")
    
    notifier = TelegramNotifier(real_config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ send_message (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    unexpected_exceptions = [
        ConnectionError("Network unreachable"),
        TimeoutError("Request timeout"),
        OSError("Too many open files"),
        MemoryError("Out of memory"),
        RuntimeError("Event loop error"),
        Exception("Generic unknown error")
    ]
    
    for exception in unexpected_exceptions:
        logger.info(f"–¢–ï–°–¢–ò–†–£–ï–ú_–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {type(exception).__name__}: {exception}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —ç—Ç–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        mock_telegram_bot.return_value.send_message.side_effect = exception
        
        # –í—Å–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False
        result = notifier.send_notification("Test exception handling")
        
        assert result == False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ {type(exception).__name__} –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å False"
        logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢_{type(exception).__name__}: False –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º side_effect –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        mock_telegram_bot.return_value.send_message.side_effect = None
        mock_telegram_bot.return_value.send_message.return_value = Mock(message_id=123)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è KeyboardInterrupt
    logger.info("–¢–ï–°–¢–ò–†–£–ï–ú_KeyboardInterrupt:")
    mock_telegram_bot.return_value.send_message.side_effect = KeyboardInterrupt("User interrupted")
    
    try:
        result = notifier.send_notification("Test KeyboardInterrupt")
        assert result == False, "KeyboardInterrupt –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
        logger.info("KeyboardInterrupt –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ False")
    except KeyboardInterrupt:
        logger.info("KeyboardInterrupt –ø—Ä–æ–±—Ä–æ—Å–∏–ª—Å—è –¥–∞–ª—å—à–µ (—Ç–æ–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–æ–∫–∏–Ω–≥")


def test_malformed_config_edge_cases(real_config):
    """EDGE CASE: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_malformed_config_edge_cases")
    
    from copy import deepcopy
    from telegram.error import InvalidToken
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü—É—Å—Ç–æ–π token - –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è, –Ω–æ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    config_empty_token = deepcopy(real_config)
    config_empty_token.telegram_token = ""
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_1: –ü—É—Å—Ç–æ–π telegram_token")
    try:
        notifier1 = TelegramNotifier(config_empty_token)
        logger.info("–°–û–ó–î–ê–ù–ò–ï_–£–°–ü–ï–®–ù–û: TelegramNotifier —Å–æ–∑–¥–∞–Ω —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º
        with patch('telegram_notifier.Bot') as mock_bot:
            mock_bot.side_effect = InvalidToken("Invalid token")
            result = notifier1.send_notification("Test empty token")
            assert result == False, "–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ False –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"
            logger.info("–û–¢–ü–†–ê–í–ö–ê_–ü–†–û–í–ê–õ–ï–ù–ê: –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
    except InvalidToken as e:
        logger.info(f"–°–û–ó–î–ê–ù–ò–ï_–ü–†–û–í–ê–õ–ï–ù–û_EXPECTEDLY: InvalidToken –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ç–æ–∫–µ–Ω–µ: {e}")
        assert True, "–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: None token - –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å InvalidToken
    config_none_token = deepcopy(real_config)
    config_none_token.telegram_token = None
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_2: None telegram_token")
    try:
        notifier2 = TelegramNotifier(config_none_token)
        assert False, "None —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"
    except InvalidToken as e:
        logger.info(f"–û–ñ–ò–î–ê–ï–ú–ê–Ø_–û–®–ò–ë–ö–ê_NONE_TOKEN: InvalidToken: {e}")
        assert "token" in str(e).lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å —Ç–æ–∫–µ–Ω"
        assert True, "None —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å InvalidToken"
    except (TypeError, AttributeError) as e:
        logger.info(f"–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø_–û–®–ò–ë–ö–ê_NONE_TOKEN: {type(e).__name__}: {e}")
        assert True, "None —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫"
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—É—Å—Ç–æ–π chat_id - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    config_empty_chat = deepcopy(real_config)
    config_empty_chat.telegram_chat_id = ""
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_3: –ü—É—Å—Ç–æ–π chat_id")
    notifier3 = TelegramNotifier(config_empty_chat)
    
    with patch('telegram_notifier.Bot') as mock_bot:
        mock_bot.return_value.send_message = AsyncMock()
        mock_bot.return_value.send_message.side_effect = Exception("Bad Request: chat not found")
        
        result = notifier3.send_notification("Test empty chat_id")
        assert result == False, "–ü—É—Å—Ç–æ–π chat_id –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ False"
        logger.info("–ü–£–°–¢–û–ô_CHAT_ID: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    config_invalid_chat = deepcopy(real_config)
    config_invalid_chat.telegram_chat_id = "not_a_number"
    
    logger.info("–°–¶–ï–ù–ê–†–ò–ô_4: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π chat_id")
    notifier4 = TelegramNotifier(config_invalid_chat)
    
    with patch('telegram_notifier.Bot') as mock_bot:
        mock_bot.return_value.send_message = AsyncMock()
        mock_bot.return_value.send_message.side_effect = Exception("Bad Request: invalid chat_id")
        
        result = notifier4.send_notification("Test invalid chat_id")
        assert result == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π chat_id –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ False"
        logger.info("–ù–ï–í–ê–õ–ò–î–ù–´–ô_CHAT_ID: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏")


def test_extremely_long_messages(real_config, mock_telegram_bot):
    """EDGE CASE: –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_extremely_long_messages")
    
    notifier = TelegramNotifier(real_config)
    
    # –¢–µ—Å—Ç 1: –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –Ω–∞ –ª–∏–º–∏—Ç–µ Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    limit_message = "A" * 4096
    logger.info(f"–õ–ò–ú–ò–¢–ù–û–ï_–°–û–û–ë–©–ï–ù–ò–ï: {len(limit_message)} —Å–∏–º–≤–æ–ª–æ–≤ (—Ä–æ–≤–Ω–æ –ª–∏–º–∏—Ç)")
    
    result = notifier.send_notification(limit_message)
    assert isinstance(result, bool), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å bool"
    mock_telegram_bot.return_value.send_message.assert_called()
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_text = call_args.kwargs['text']
    assert len(sent_text) == 4096, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ª–∏–º–∏—Ç–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    logger.info("–õ–ò–ú–ò–¢–ù–û–ï_–°–û–û–ë–©–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –°–±—Ä–æ—Å –º–æ–∫–∞
    mock_telegram_bot.return_value.send_message.reset_mock()
    
    # –¢–µ—Å—Ç 2: –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
    over_limit_message = "B" * 5000
    logger.info(f"–°–í–ï–†–•_–õ–ò–ú–ò–¢–ù–û–ï_–°–û–û–ë–©–ï–ù–ò–ï: {len(over_limit_message)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    result = notifier.send_notification(over_limit_message)
    assert isinstance(result, bool), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å bool"
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_text = call_args.kwargs['text']
    assert len(sent_text) == 5000, "–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–æ–±—Ä–µ–∑–∫–∞ - –∑–∞–¥–∞—á–∞ API)"
    logger.info("–°–í–ï–†–•_–õ–ò–ú–ò–¢–ù–û–ï_–°–û–û–ë–©–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    # –°–±—Ä–æ—Å –º–æ–∫–∞
    mock_telegram_bot.return_value.send_message.reset_mock()
    
    # –¢–µ—Å—Ç 3: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info("–ü–£–°–¢–û–ï_–°–û–û–ë–©–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
    result = notifier.send_notification("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –±—ã–ª –≤—ã–∑–≤–∞–Ω (–¥–∞–∂–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    assert isinstance(result, bool), "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å bool"
    mock_telegram_bot.return_value.send_message.assert_called()
    
    call_args = mock_telegram_bot.return_value.send_message.call_args
    sent_text = call_args.kwargs['text']
    assert sent_text == "", "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –ø—É—Å—Ç—ã–º"
    logger.info("–ü–£–°–¢–û–ï_–°–û–û–ë–©–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 4: None —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info("NONE_–°–û–û–ë–©–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º None")
    try:
        result = notifier.send_notification(None)
        # –ï—Å–ª–∏ –Ω–µ —É–ø–∞–ª–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == False, "None —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
        logger.info("NONE_–°–û–û–ë–©–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ False")
    except (TypeError, AttributeError) as e:
        logger.info(f"NONE_–°–û–û–ë–©–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø–∞–ª–æ —Å {type(e).__name__}: {e}")
        assert True, "None —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞–¥–∞—Ç—å"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª–∏–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")


def test_unicode_and_special_characters(real_config, mock_telegram_bot):
    """EDGE CASE: Unicode —Å–∏–º–≤–æ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_unicode_and_special_characters")
    
    notifier = TelegramNotifier(real_config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    special_test_cases = [
        ("emoji", "üöÄüíéüìàüí∞üéØüî•‚ö°Ô∏èüåüüí´üö®"),
        ("currency", "–¶–µ–Ω–∞: $50,000.00 ‚Çø1.0 ‚Ç¨45,000"),
        ("html_xml", "<b>HTML</b> & XML & JSON {\"test\": true}"),
        ("cyrillic", "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏ —ë–Å—ä–™"),
        ("multilang", "‰∏≠ÊñáÊµãËØï ÿßŸÑÿπÿ±ÿ®Ÿäÿ© —Ç–µ—Å—Ç ◊¢◊ë◊®◊ô◊™"),
        ("escapes", "\\n\\t\\r —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã \\\"–∫–∞–≤—ã—á–∫–∏\\\""),
        ("diacritics", "√§ √∂ √º √ü √Ü √ò √Ö √± √ß"),
        ("math", "Math: ‚àë‚àÜ‚àá‚àû¬±‚â§‚â•‚â†‚âà‚àù‚àà‚àâ‚äÇ‚äÉ‚à©‚à™"),
        ("zero_width", "–¢–µ–∫—Å—Ç\u200b—Å\u200b–Ω–µ–≤–∏–¥–∏–º—ã–º–∏\u200b–ø—Ä–æ–±–µ–ª–∞–º–∏"),
        ("control_chars", "–ö–æ–Ω—Ç—Ä–æ–ª—å\x00—Å–∏–º–≤–æ–ª—ã\x01—Ç–µ—Å—Ç\x02")
    ]
    
    for test_name, message in special_test_cases:
        logger.info(f"–¢–ï–°–¢_{test_name.upper()}: {message[:30]}...")
        
        # –û—á–∏—â–∞–µ–º –º–æ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        mock_telegram_bot.return_value.send_message.reset_mock()
        mock_telegram_bot.return_value.send_message.return_value = Mock(message_id=123)
        
        result = notifier.send_notification(message)
        assert result == True, f"–°–æ–æ–±—â–µ–Ω–∏–µ {test_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑
        assert mock_telegram_bot.return_value.send_message.call_count == 1, f"API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è {test_name}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        call_args = mock_telegram_bot.return_value.send_message.call_args
        assert call_args is not None, f"call_args –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –¥–ª—è {test_name}"
        
        sent_text = call_args.kwargs.get('text')
        assert sent_text is not None, f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –¥–ª—è {test_name}"
        assert sent_text == message, f"–°–æ–æ–±—â–µ–Ω–∏–µ {test_name} –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º chat_id –∏ parse_mode
        assert call_args.kwargs.get('chat_id') == real_config.telegram_chat_id, f"chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –¥–ª—è {test_name}"
        assert call_args.kwargs.get('parse_mode') == 'HTML', f"parse_mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTML –¥–ª—è {test_name}"
        
        logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢_{test_name.upper()}: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ Unicode –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")


def test_full_workflow_integration(real_config, mock_telegram_bot):
    """–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π workflow —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_full_workflow_integration")
    
    notifier = TelegramNotifier(real_config)
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã API
    all_calls = []
    
    def track_calls(*args, **kwargs):
        all_calls.append(kwargs.copy())
        return Mock(message_id=len(all_calls))
    
    mock_telegram_bot.return_value.send_message.side_effect = track_calls
    
    # 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
    logger.info("–®–ê–ì_1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ")
    result1 = notifier.notify_system_status('started', '–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
    assert result1 == True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert len(all_calls) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
    assert "–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê" in all_calls[0]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞"
    
    # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
    logger.info("–®–ê–ì_2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ")
    trade_details = {
        'entry_price': 50000.0,
        'tp_price': 52000.0,
        'sl_price': 48000.0,
        'position_size_usd': 1500.0,
        'order_id': 'INTEGRATION_001',
        'side': 'BUY'
    }
    result2 = notifier.notify_trade_executed(trade_details)
    assert result2 == True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert len(all_calls) == 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏"
    assert "–°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê" in all_calls[1]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ"
    assert "50,000" in all_calls[1]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–Ω—É –≤—Ö–æ–¥–∞"
    
    # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
    logger.info("–®–ê–ì_3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏")
    trade_result = {
        'entry_price': 50000.0,
        'exit_price': 51800.0,
        'profit': 540.0,
        'success': True,
        'position_size': 1500.0,
        'trade_type': 'TP'
    }
    result3 = notifier.notify_trade_closed(trade_result)
    assert result3 == True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert len(all_calls) == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è"
    assert "–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê" in all_calls[2]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏"
    assert "–ü–†–ò–ë–´–õ–¨" in all_calls[2]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–∏–±—ã–ª—å"
    
    # 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    logger.info("–®–ê–ì_4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ")
    result4 = notifier.notify_risk_limit_breach('daily_drawdown', 0.08, 0.05)
    assert result4 == True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert len(all_calls) == 4, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞"
    assert "–ü–†–ï–í–´–®–ï–ù–ê –î–ù–ï–í–ù–ê–Ø –ü–†–û–°–ê–î–ö–ê" in all_calls[3]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ"
    
    # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã
    logger.info("–®–ê–ì_5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
    result5 = notifier.notify_system_status('stopped', '–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')
    assert result5 == True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert len(all_calls) == 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –≤—ã–∑–æ–≤–æ–≤ –≤ –∏—Ç–æ–≥–µ"
    assert "–°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê" in all_calls[4]['text'], "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    for i, call in enumerate(all_calls):
        assert call['chat_id'] == real_config.telegram_chat_id, f"–í—ã–∑–æ–≤ {i+1}: chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º"
        assert call['parse_mode'] == 'HTML', f"–í—ã–∑–æ–≤ {i+1}: parse_mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTML"
        assert isinstance(call['text'], str), f"–í—ã–∑–æ–≤ {i+1}: —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
        assert len(call['text']) > 0, f"–í—ã–∑–æ–≤ {i+1}: —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–Ω—ã–π workflow –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")


def test_performance_stress_test(real_config, mock_telegram_bot):
    """–°–¢–†–ï–°–° –¢–ï–°–¢: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    logger.info("–¢–ï–°–¢_–°–¢–ê–†–¢: test_performance_stress_test")
    
    notifier = TelegramNotifier(real_config)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    call_times = []
    
    def timed_mock(*args, **kwargs):
        call_times.append(time.time())
        return Mock(message_id=len(call_times))
    
    mock_telegram_bot.return_value.send_message.side_effect = timed_mock
    
    test_count = 50  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info(f"–°–¢–†–ï–°–°_–¢–ï–°–¢: {test_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥")
    
    start_time = time.time()
    successful_sends = 0
    failed_sends = 0
    
    for i in range(test_count):
        message = f"–°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{i:03d} –≤ {time.time():.3f}"
        result = notifier.send_notification(message)
        
        if result:
            successful_sends += 1
        else:
            failed_sends += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (i + 1) % 10 == 0:
            elapsed = time.time() - start_time
            rate = (i + 1) / elapsed if elapsed > 0 else 0
            logger.info(f"–ü–†–û–ì–†–ï–°–°: {i+1}/{test_count}, —Å–∫–æ—Ä–æ—Å—Ç—å: {rate:.1f} —Å–æ–æ–±—â/—Å–µ–∫")
    
    end_time = time.time()
    execution_time = end_time - start_time
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´_–°–¢–†–ï–°–°_–¢–ï–°–¢–ê:")
    logger.info(f"  –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {successful_sends}/{test_count}")
    logger.info(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {failed_sends}/{test_count}")
    logger.info(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f} —Å–µ–∫—É–Ω–¥")
    logger.info(f"  –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {test_count/execution_time:.1f} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/—Å–µ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    if len(call_times) >= 2:
        intervals = [call_times[i] - call_times[i-1] for i in range(1, len(call_times))]
        avg_interval = sum(intervals) / len(intervals)
        max_interval = max(intervals)
        min_interval = min(intervals)
        
        logger.info(f"  –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval:.3f}—Å")
        logger.info(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {max_interval:.3f}—Å")
        logger.info(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval:.3f}—Å")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        stability_ratio = max_interval / avg_interval if avg_interval > 0 else 0
        logger.info(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {stability_ratio:.1f}x (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–Ω–µ –º–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
        if avg_interval > 0.1:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –±–æ–ª—å—à–µ 100–º—Å
            assert max_interval <= avg_interval * 10, f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: avg={avg_interval:.3f}—Å, max={max_interval:.3f}—Å"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    assert successful_sends >= test_count * 0.95, f"–û–∂–∏–¥–∞–ª–∏ ‚â•95% —É—Å–ø–µ—Ö–∞, –ø–æ–ª—É—á–∏–ª–∏ {successful_sends/test_count*100:.1f}%"
    assert execution_time <= 20.0, f"–°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ 20—Å, –∑–∞–Ω—è–ª–æ {execution_time:.2f}—Å"
    assert test_count/execution_time >= 2.0, f"–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â•2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/—Å–µ–∫, –ø–æ–ª—É—á–∏–ª–∏ {test_count/execution_time:.1f}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
    assert len(call_times) == successful_sends, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ API –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏"
    
    logger.info("–¢–ï–°–¢_–†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")


def test_comprehensive_coverage_report():
    """–û–¢–ß–ï–¢: –ü–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    logger.info("=" * 80)
    logger.info("–û–¢–ß–ï–¢ –û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ú –ü–û–ö–†–´–¢–ò–ò TELEGRAM NOTIFIER")
    logger.info("=" * 80)
    
    covered_scenarios = {
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏": [
            "Event loop RuntimeError", 
            "Race condition –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏",
            "AsyncIO –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"
        ],
        "Edge cases": [
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã –ª–∏–º–∏—Ç–æ–≤",
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–∫—Ä—ã—Ç–∏—è", 
            "MANUAL –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫",
            "None –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö",
            "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
        ],
        "–ò—Å–∫–ª—é—á–µ–Ω–∏—è": [
            "–†–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–æ–∫",
            "–°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
            "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏"
        ],
        "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": [
            "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π",
            "Unicode —Å–∏–º–≤–æ–ª—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏", 
            "–ü—É—Å—Ç—ã–µ –∏ None —Å–æ–æ–±—â–µ–Ω–∏—è",
            "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
        ],
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": [
            "–ü–æ–ª–Ω—ã–π workflow —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            "–°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        ]
    }
    
    total_scenarios = 0
    for category, scenarios in covered_scenarios.items():
        logger.info(f"\n{category}:")
        for scenario in scenarios:
            logger.info(f"  ‚úì {scenario}")
            total_scenarios += 1
    
    logger.info("=" * 80)
    logger.info(f"–í–°–ï–ì–û –ü–û–ö–†–´–¢–û –°–¶–ï–ù–ê–†–ò–ï–í: {total_scenarios}")
    logger.info("–ò–°–ü–†–ê–í–õ–ï–ù–´ –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    logger.info("  - –ú–æ–∫–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –æ—à–∏–±–æ–∫")
    logger.info("  - –°—Ç—Ä–æ–≥–∏–µ assertions –≤–º–µ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.info("  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ race conditions")
    logger.info("  - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    logger.info("=" * 80)