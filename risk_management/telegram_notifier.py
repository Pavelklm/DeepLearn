"""–ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
import logging
import asyncio
from typing import Dict, Any
from telegram import Bot
from telegram.error import TelegramError
from .config_manager import Config


logger = logging.getLogger(__name__)


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, config: Config):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ Telegram
        """
        self.config = config  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.bot = Bot(token=config.telegram_token)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        self.chat_id = config.telegram_chat_id  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info("Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _send_message_async(self, message: str) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    def send_notification(self, message: str) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message[:50]}...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(self._send_message_async(message))
            loop.close()
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def notify_risk_limit_breach(self, limit_type: str, current_value: float, limit_value: float = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞
        
        Args:
            limit_type: –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            current_value: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            limit_value: –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        logger.warning(f"–ù–∞—Ä—É—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞: {limit_type} = {current_value}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–∏–º–∏—Ç–∞
        if limit_type == 'daily_drawdown':
            emoji = "üìâ"
            title = "–ü–†–ï–í–´–®–ï–ù–ê –î–ù–ï–í–ù–ê–Ø –ü–†–û–°–ê–î–ö–ê"
            description = f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: <b>{current_value:.2%}</b>"
            if limit_value:
                description += f"\n–õ–∏–º–∏—Ç: <b>{limit_value:.2%}</b>"
            action = "–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            
        elif limit_type == 'losing_days':
            emoji = "üìä"
            title = "–ü–†–ï–í–´–®–ï–ù–û –ö–û–õ–ò–ß–ï–°–¢–í–û –£–ë–´–¢–û–ß–ù–´–• –î–ù–ï–ô"
            description = f"–£–±—ã—Ç–æ—á–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: <b>{int(current_value)}</b>"
            if limit_value:
                description += f"\n–õ–∏–º–∏—Ç: <b>{int(limit_value)}</b>"
            action = "–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
        elif limit_type == 'consecutive_losses':
            emoji = "‚ö†Ô∏è"
            title = "–ë–û–õ–¨–®–ê–Ø –°–ï–†–ò–Ø –£–ë–´–¢–ö–û–í"
            description = f"–£–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥: <b>{int(current_value)}</b>"
            action = "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–Ω–∏–∂–µ–Ω"
            
        else:
            emoji = "üö®"
            title = f"–ù–ê–†–£–®–ï–ù –õ–ò–ú–ò–¢: {limit_type.upper()}"
            description = f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_value}</b>"
            action = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
{emoji} <b>{title}</b>

{description}

üîß <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
"""
        
        return self.send_notification(message.strip())
    
    def notify_trade_executed(self, trade_details: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
        
        Args:
            trade_details: –î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ: {trade_details}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        entry_price = trade_details.get('entry_price', 0)
        tp_price = trade_details.get('tp_price', 0)
        sl_price = trade_details.get('sl_price', 0)
        position_size = trade_details.get('position_size_usd', 0)
        order_id = trade_details.get('order_id', 'N/A')
        # symbol –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —ç—Ç–æ –º–æ–¥—É–ª—å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        if tp_price > entry_price:
            direction = "LONG üìà"
            direction_emoji = "üü¢"
        else:
            direction = "SHORT üìâ"
            direction_emoji = "üî¥"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        potential_profit = abs(tp_price - entry_price) * (position_size / entry_price)
        potential_loss = abs(entry_price - sl_price) * (position_size / entry_price)
        risk_reward = potential_profit / potential_loss if potential_loss > 0 else 0
        
        message = f"""
{direction_emoji} <b>–°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê</b>

üìä <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}
üéØ <b>–í—Ö–æ–¥:</b> ${entry_price:,.2f}
üìà <b>Take Profit:</b> ${tp_price:,.2f}
üìâ <b>Stop Loss:</b> ${sl_price:,.2f}

üíµ <b>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> ${position_size:,.2f}
üíé <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏:</b> ${potential_profit:,.2f}
üîª <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–±—ã—Ç–∫–∞:</b> ${potential_loss:,.2f}
‚öñÔ∏è <b>Risk/Reward:</b> 1:{risk_reward:.2f}

üÜî <b>Order ID:</b> {order_id}
‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
"""
        
        return self.send_notification(message.strip())
    
    def notify_trade_closed(self, trade_result: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–µ
        
        Args:
            trade_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {trade_result}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        profit = trade_result.get('profit') or 0 
        success = trade_result.get('success', False)
        trade_type = trade_result.get('trade_type', 'UNKNOWN')
        entry_price = trade_result.get('entry_price') or 0
        exit_price = trade_result.get('exit_price') or 0
        position_size = trade_result.get('position_size') or 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è –∏ —ç–º–æ–¥–∑–∏
        if success:
            result_emoji = "‚úÖ"
            result_text = "–ü–†–ò–ë–´–õ–¨"
            color_emoji = "üü¢"
        else:
            result_emoji = "‚ùå"
            result_text = "–£–ë–´–¢–û–ö"
            color_emoji = "üî¥"
        
        close_type_text = {
            'TP': 'Take Profit',
            'SL': 'Stop Loss',
            'MANUAL': '–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ'
        }.get(trade_type, trade_type)
        
        message = f"""
{result_emoji} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê</b>

{color_emoji} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result_text}
üîÑ <b>–¢–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {close_type_text}

üìä <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${entry_price:,.2f}
üéØ <b>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:</b> ${exit_price:,.2f}
üíµ <b>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> ${position_size:,.2f}

üí∞ <b>–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫:</b> ${profit:,.2f}
üìà <b>ROI:</b> {(profit/position_size*100) if position_size > 0 else 0:.2f}%

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
"""
        
        return self.send_notification(message.strip())
    
    def notify_system_status(self, status: str, details: str = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (started, stopped, error, etc.)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã: {status}")
        
        status_config = {
            'started': {'emoji': 'üöÄ', 'title': '–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê'},
            'stopped': {'emoji': '‚èπÔ∏è', 'title': '–°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê'},
            'error': {'emoji': 'üí•', 'title': '–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê'},
            'warning': {'emoji': '‚ö†Ô∏è', 'title': '–°–ò–°–¢–ï–ú–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï'},
            'info': {'emoji': '‚ÑπÔ∏è', 'title': '–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø'}
        }
        
        config = status_config.get(status, {'emoji': 'üìã', 'title': f'–°–¢–ê–¢–£–°: {status.upper()}'})
        
        message = f"""
{config['emoji']} <b>{config['title']}</b>

{details if details else '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ'}

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
"""
        
        return self.send_notification(message.strip())
    
    def _get_current_time(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
        Returns:
            str: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        """
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
