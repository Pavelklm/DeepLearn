#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∫–∞–Ω–µ—Ä–∞ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
"""

import time
from typing import List, Tuple
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

from .api_client import BinanceAPIClient
from .symbol_manager import SymbolManager
from .metrics_calculator import MetricsCalculator
from .order_analyzer import OrderAnalyzer
from .data_storage import DataStorage
from .data_models import SymbolResult
from .config import ScannerConfig


class BinanceBigOrdersScanner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∫–∞–Ω–µ—Ä–∞ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Binance Futures"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.api_client = BinanceAPIClient()
        self.symbol_manager = SymbolManager(self.api_client)
        self.metrics_calculator = MetricsCalculator(self.api_client)
        self.order_analyzer = OrderAnalyzer()
        self.data_storage = DataStorage()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.max_workers = ScannerConfig.MAX_WORKERS
        self.persistent_mode = ScannerConfig.PERSISTENT_MODE
        self.verbose_logs = ScannerConfig.VERBOSE_LOGS
        self.first_run = True
    
    def set_verbose_logs(self, verbose: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        self.verbose_logs = verbose
        ScannerConfig.VERBOSE_LOGS = verbose
        self.symbol_manager.verbose_logs = verbose
        self.data_storage.verbose_logs = verbose
    
    def set_persistent_mode(self, persistent: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        self.persistent_mode = persistent
        ScannerConfig.PERSISTENT_MODE = persistent
    
    def process_symbol_with_index(self, symbol_task: tuple) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º (–∏ batch ticker –¥–∞–Ω–Ω—ã–º–∏)"""
        symbol, index, total, ticker_data = symbol_task
        try:
            if self.verbose_logs:
                print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol} ({index}/{total})")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É—è batch ticker)
            symbol_data = self.metrics_calculator.get_symbol_data(symbol, ticker_data)
            if not symbol_data:
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
            order_book = self.api_client.get_order_book(symbol)
            if not order_book:
                return 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏–º–≤–æ–ª–∞
            symbol_metrics = self.metrics_calculator.calculate_symbol_metrics(symbol_data, order_book)
            
            # –ò—â–µ–º –±–æ–ª—å—à–∏–µ –æ—Ä–¥–µ—Ä–∞
            big_orders = self.order_analyzer.find_big_orders(symbol, order_book, symbol_data, symbol_metrics)
            
            if big_orders:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                total_usd = sum(order.usd_value for order in big_orders)
                bid_count = len([o for o in big_orders if o.type == 'BID'])
                ask_count = len([o for o in big_orders if o.type == 'ASK'])
                price_str = f"${symbol_data.current_price:.4f}"
                print(f"üí∞ {symbol:<12} | {price_str:<12} | üü¢{bid_count}B/üî¥{ask_count}A | ${total_usd:>8,.0f}")
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞
                symbol_result = SymbolResult(
                    symbol=symbol,
                    timestamp=datetime.now().isoformat(),
                    current_price=symbol_data.current_price,
                    volatility_1h=symbol_metrics.volatility_1h,
                    volume_ratio=symbol_metrics.volume_ratio,
                    price_movement_5min=symbol_metrics.price_movement_5min,
                    is_round_level=symbol_metrics.is_round_level,
                    orders_count=len(big_orders),
                    orders=big_orders
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.save_symbol_data(symbol_result)
                return len(big_orders)
            
            return 0
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return 0
    
    def save_symbol_data(self, symbol_result: SymbolResult):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if self.persistent_mode:
            self.data_storage.save_symbol_data_persistent(symbol_result)
        else:
            self.data_storage.save_symbol_data_simple(symbol_result)
    
    def scan_all_symbols(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø-250 —Å–∏–º–≤–æ–ª–æ–≤ —Å BATCH –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        mode_text = "–ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–´–ú" if self.persistent_mode else "–û–ë–´–ß–ù–´–ú"
        
        if self.first_run:
            print(f"üöÄ –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {mode_text} —Ä–µ–∂–∏–º–µ ({self.max_workers} –≤–æ—Ä–∫–µ—Ä–æ–≤)")
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if not self.persistent_mode:
                self.data_storage.clear_data_file()
                print("üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)")
            else:
                print("üíæ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
            
            self.first_run = False  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
        else:
            # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"üîÑ –ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏—Ö ticker –¥–∞–Ω–Ω—ã–µ
        filtered_symbols, all_tickers = self.symbol_manager.get_filtered_symbols()
        if not filtered_symbols or not all_tickers:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ ticker –¥–∞–Ω–Ω—ã–µ")
            return
        
        total_big_orders = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ç–µ–∂–∏ (—Å–∏–º–≤–æ–ª, –∏–Ω–¥–µ–∫—Å, –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, ticker_data) –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbol_tasks = []
        for i, symbol in enumerate(filtered_symbols):
            ticker_data = all_tickers.get(symbol)  # –ü–æ–ª—É—á–∞–µ–º ticker –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            if ticker_data:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã —Å ticker –¥–∞–Ω–Ω—ã–º–∏
                symbol_tasks.append((symbol, i+1, len(filtered_symbols), ticker_data))
        
        print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(symbol_tasks)} —Å–∏–º–≤–æ–ª–æ–≤ ({ScannerConfig.MAX_WORKERS} –≤–æ—Ä–∫–µ—Ä–æ–≤)...")
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        symbols_with_orders = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if self.verbose_logs:
            print(f"\n{'='*70}")
            print(f"{'–°–ò–ú–í–û–õ':<12} | {'–¶–ï–ù–ê':<12} | {'–û–†–î–ï–†–ê':<8} | {'–û–ë–™–ï–ú':<12}")
            print(f"{'='*70}")
        
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            results = executor.map(self.process_symbol_with_index, symbol_tasks)
            for result in results:
                total_big_orders += result
                if result > 0:
                    symbols_with_orders += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_symbols_processed = len(symbol_tasks)
        success_rate = (total_symbols_processed / len(filtered_symbols)) * 100 if filtered_symbols else 0
        
        print(f"\n{'-'*70}")
        print(f"üèÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_symbols_processed}/{len(filtered_symbols)} ({success_rate:.1f}%)")
        print(f"üéØ –°–∏–º–≤–æ–ª–æ–≤ —Å –æ—Ä–¥–µ—Ä–∞–º–∏: {symbols_with_orders}")
        print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {total_big_orders}")
        if self.verbose_logs:
            print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.data_storage.data_file}")
    
    def continuous_scan(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"\nüîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {self.data_storage.data_file}")
        
        iteration = 1
        start_time = time.time()
        
        while True:
            try:
                iteration_start = time.time()
                print(f"\n{'='*60}")
                print(f"üîÑ –ò–¢–ï–†–ê–¶–ò–Ø #{iteration} | {datetime.now().strftime('%H:%M:%S')}")
                print(f"{'='*60}")
                
                self.scan_all_symbols()
                
                iteration_time = time.time() - iteration_start
                total_time = time.time() - start_time
                
                print(f"\n‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {iteration_time:.1f}—Å")
                print(f"üï∞Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time/60:.1f} –º–∏–Ω")
                
                iteration += 1
                
            except KeyboardInterrupt:
                print(f"\n\n{'='*60}")
                print("üõ± –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {iteration-1}")
                total_time = time.time() - start_time
                print(f"üï∞Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time/60:.1f} –º–∏–Ω")
                print(f"{'='*60}")
                break
            except Exception as e:
                print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ #{iteration}: {e}")
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
