#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
"""

import json
import os
import threading
from typing import List, Dict
from datetime import datetime

try:
    from data_models import SymbolResult, OrderData, OrderKey
    from config import ScannerConfig
except ImportError:
    from .data_models import SymbolResult, OrderData, OrderKey
    from .config import ScannerConfig


class DataStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    # –û–±—â–∏–π lock –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ DataStorage
    _whale_file_lock = threading.Lock()
    
    def __init__(self, data_file: str = None):
        self.data_file = data_file or ScannerConfig.DATA_FILE
        self.price_tolerance = ScannerConfig.PRICE_TOLERANCE
        self.verbose_logs = ScannerConfig.VERBOSE_LOGS
    
    def load_existing_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.data_file):
            return []
        
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def save_all_data(self, all_data: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(all_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def clear_data_file(self):
        """–û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
            if os.path.exists(self.data_file):
                os.remove(self.data_file)
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∏–º–≤–æ–ª–æ–≤
            whale_file = ScannerConfig.WHALE_SYMBOLS_FILE
            if os.path.exists(whale_file):
                os.remove(whale_file)
            
            print("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def merge_orders_data(self, new_symbol_data: SymbolResult) -> SymbolResult:
        """–û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        existing_data = self.load_existing_data()
        current_time = datetime.now().isoformat()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª
        existing_symbol_data = None
        for data in existing_data:
            if data['symbol'] == new_symbol_data.symbol:
                existing_symbol_data = data
                break
        
        if not existing_symbol_data:
            # –ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª - –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∫ –Ω–æ–≤—ã–µ
            for order in new_symbol_data.orders:
                order.first_seen = current_time
                order.last_seen = current_time  
                order.is_persistent = False
                order.scan_count = 1
                order.lifetime_minutes = 0
            return new_symbol_data
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
        merged_orders = []
        new_orders = new_symbol_data.orders
        existing_orders = [OrderData.from_dict(order_dict) 
                          for order_dict in existing_symbol_data.get('orders', [])]
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–æ–≤–æ–º —Å–∫–∞–Ω–µ
        found_existing_orders = set()
        persistent_orders_log = []  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
        for new_order in new_orders:
            matched_existing = None
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä
            for i, existing_order in enumerate(existing_orders):
                if OrderKey.orders_are_same(new_order, existing_order, self.price_tolerance):
                    matched_existing = existing_order
                    found_existing_orders.add(i)
                    break
            
            if matched_existing:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä - –æ–±–Ω–æ–≤–ª—è–µ–º
                updated_order = new_order
                updated_order.first_seen = matched_existing.first_seen or current_time
                updated_order.last_seen = current_time
                updated_order.is_persistent = True
                updated_order.scan_count = matched_existing.scan_count + 1
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
                try:
                    first_time = datetime.fromisoformat(matched_existing.first_seen or current_time)
                    current_time_dt = datetime.fromisoformat(current_time)
                    lifetime_minutes = (current_time_dt - first_time).total_seconds() / 60
                    updated_order.lifetime_minutes = round(lifetime_minutes, 1)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    order_info = f"{updated_order.type} ${updated_order.usd_value:,.0f} @ {updated_order.price:.4f}"
                    persistent_orders_log.append(f"  üîÑ {order_info} (–∂–∏–≤–µ—Ç {lifetime_minutes:.1f}–º–∏–Ω, —Å–∫–∞–Ω #{updated_order.scan_count})")
                    
                except:
                    updated_order.lifetime_minutes = 0
                
                merged_orders.append(updated_order)
            else:
                # –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                new_order.first_seen = current_time
                new_order.last_seen = current_time
                new_order.is_persistent = False  
                new_order.scan_count = 1
                new_order.lifetime_minutes = 0
                merged_orders.append(new_order)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if persistent_orders_log:
            print(f"üîç {new_symbol_data.symbol}: –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:")
            for log_line in persistent_orders_log:
                print(log_line)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏, –Ω–æ –∏—Å—á–µ–∑–ª–∏)
        removed_orders = []
        for i, existing_order in enumerate(existing_orders):
            if i not in found_existing_orders:  # –û—Ä–¥–µ—Ä –∏—Å—á–µ–∑
                removed_orders.append(existing_order)
        
        if removed_orders and self.verbose_logs:
            print(f"üóëÔ∏è {new_symbol_data.symbol}: –£–¥–∞–ª–µ–Ω—ã –∏—Å—á–µ–∑–Ω—É–≤—à–∏–µ –æ—Ä–¥–µ—Ä–∞:")
            for order in removed_orders:
                print(f"  ‚ùå {order.type} ${order.usd_value:,.0f} @ {order.price:.4f} (–∂–∏–ª {order.lifetime_minutes:.1f}–º–∏–Ω)")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (–∏—Å—á–µ–∑–Ω—É–≤—à–∏–µ –æ—Ä–¥–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã)
        new_symbol_data.orders = merged_orders
        return new_symbol_data
    
    def update_symbol_data(self, updated_symbol_data: SymbolResult):
        """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ñ–∞–π–ª–µ"""
        all_data = self.load_existing_data()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
        symbol_found = False
        for i, data in enumerate(all_data):
            if data['symbol'] == updated_symbol_data.symbol:
                all_data[i] = updated_symbol_data.to_dict()
                symbol_found = True
                break
        
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º
        if not symbol_found:
            all_data.append(updated_symbol_data.to_dict())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            self.save_all_data(all_data)
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            new_orders = [o for o in updated_symbol_data.orders if not o.is_persistent]
            persistent_orders = [o for o in updated_symbol_data.orders if o.is_persistent]
            
            if new_orders or self.verbose_logs:
                status_parts = []
                if new_orders:
                    status_parts.append(f"{len(new_orders)} –Ω–æ–≤—ã—Ö")
                if persistent_orders:
                    status_parts.append(f"{len(persistent_orders)} –ø–µ—Ä—Å.")
                
                status = ", ".join(status_parts) if status_parts else "0 –æ—Ä–¥–µ—Ä–æ–≤"
                symbol_log = f"‚úÖ {updated_symbol_data.symbol}: {status}"
                
                # –¢–æ–ª—å–∫–æ –≤ –≤–µ—Ä–±–æ–∑–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
                if new_orders or self.verbose_logs:
                    print(symbol_log)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def remove_symbol_from_data(self, symbol: str):
        """–£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤)"""
        all_data = self.load_existing_data()
        original_count = len(all_data)
        all_data = [data for data in all_data if data['symbol'] != symbol]
        
        if len(all_data) < original_count:
            try:
                self.save_all_data(all_data)
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –æ–Ω–æ —Ç–µ–ø–µ—Ä—å –≤ save_symbol_data_persistent
                
                # –°–†–ê–ó–£ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∏—Ç–æ–≤ (–µ—Å–ª–∏ –≤—ã–∑–æ–≤ –Ω–µ –∏–∑ save_symbol_data_persistent)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º stack trace —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                import traceback
                stack = traceback.extract_stack()
                if not any('save_symbol_data_persistent' in str(frame) for frame in stack):
                    self.remove_symbol_from_whale_list(symbol)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞: {e}")
    
    def save_symbol_data_persistent(self, symbol_result: SymbolResult):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º)"""
        if not symbol_result.orders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –æ—Ä–¥–µ—Ä–∞ —Ä–∞–Ω—å—à–µ
            existing_data = self.load_existing_data()
            existing_symbol = None
            for data in existing_data:
                if data['symbol'] == symbol_result.symbol:
                    existing_symbol = data
                    break
            
            if existing_symbol and existing_symbol.get('orders'):
                # –£ —Å–∏–º–≤–æ–ª–∞ –±—ã–ª–∏ –æ—Ä–¥–µ—Ä–∞, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Ö –Ω–µ—Ç - –ª–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                if self.verbose_logs:
                    print(f"üóëÔ∏è {symbol_result.symbol}: –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏—Å—á–µ–∑–ª–∏, —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª")
                    for order_dict in existing_symbol['orders']:
                        order = OrderData.from_dict(order_dict)
                        print(f"  ‚ùå {order.type} ${order.usd_value:,.0f} @ {order.price:.4f} (–∂–∏–ª {order.lifetime_minutes:.1f}–º–∏–Ω)")
            
            # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            self.remove_symbol_from_data(symbol_result.symbol)
            
            # –°–†–ê–ó–£ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∏—Ç–æ–≤
            self.remove_symbol_from_whale_list(symbol_result.symbol)
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        merged_symbol_data = self.merge_orders_data(symbol_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.update_symbol_data(merged_symbol_data)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø–∏—Å–∏ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—ã–∑–æ–≤—É
        import traceback
        stack = [str(frame) for frame in traceback.extract_stack()]
        is_from_hot_pool = any('hot_pool_worker' in frame for frame in stack)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–∏—Ç–æ–≤
        self.add_symbol_to_whale_list(merged_symbol_data, force_write=is_from_hot_pool)
    
    def save_symbol_data_simple(self, symbol_result: SymbolResult):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        if not symbol_result.orders:
            return
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        all_data = self.load_existing_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_data.append(symbol_result.to_dict())
        
        try:
            self.save_all_data(all_data)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(symbol_result.orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol_result.symbol}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_symbol_to_whale_list(self, symbol_result: SymbolResult, force_write: bool = False):
        """
        –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ —Å–ø–∏—Å–∫–µ –∫–∏—Ç–æ–≤
        force_write=True - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø–∏—Å–∏ (–≥–æ—Ä—è—á–∏–π –ø—É–ª)
        force_write=False - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ (–æ–±—â–∏–π –ø—É–ª)
        """
        with self._whale_file_lock:
            try:
                whale_file = ScannerConfig.WHALE_SYMBOLS_FILE
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                whale_symbols = []
                if os.path.exists(whale_file):
                    try:
                        with open(whale_file, 'r', encoding='utf-8') as f:
                            content = f.read().strip()
                            if content:
                                whale_symbols = json.loads(content)
                    except (json.JSONDecodeError, Exception) as e:
                        print(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π whale_symbols.json: {e}")
                        print("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                        whale_symbols = []
                
                # –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ï–ô –¥–ª—è –æ–±—â–µ–≥–æ –ø—É–ª–∞
                if not force_write:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª
                    for existing_symbol in whale_symbols:
                        if existing_symbol['symbol'] == symbol_result.symbol:
                            # print(f"‚ö†Ô∏è {symbol_result.symbol}: –£–∂–µ –≤ –≥–æ—Ä—è—á–µ–º –ø—É–ª–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            return  # –ü–†–û–ü–£–°–ö–ê–ï–ú –î–£–ë–õ–ò!
                
                # –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                total_volume = sum(order.usd_value for order in symbol_result.orders)
                largest_whale = max(order.usd_value for order in symbol_result.orders)
                longest_lifetime = max(order.lifetime_minutes for order in symbol_result.orders) if symbol_result.orders else 0
                
                new_symbol_data = {
                    "symbol": symbol_result.symbol,
                    "orders_count": len(symbol_result.orders),
                    "total_volume": round(total_volume, 2),
                    "largest_whale": round(largest_whale, 2),
                    "longest_order_lifetime": round(longest_lifetime, 1),
                    "last_updated": symbol_result.timestamp,
                    "current_price": symbol_result.current_price,
                    "volatility_1h": symbol_result.volatility_1h
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
                symbol_found = False
                for i, whale_symbol in enumerate(whale_symbols):
                    if whale_symbol['symbol'] == symbol_result.symbol:
                        whale_symbols[i] = new_symbol_data
                        symbol_found = True
                        break
                
                if not symbol_found:
                    whale_symbols.append(new_symbol_data)
                    pool_type = "üî• –ì–û–†–Ø–ß–ò–ô" if force_write else "üìä –û–ë–©–ò–ô"
                    print(f"üìã {symbol_result.symbol}: –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∏—Ç—ã {pool_type} (${total_volume:,.0f})")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                whale_symbols.sort(key=lambda x: x['total_volume'], reverse=True)
                
                # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
                temp_file = whale_file + ".tmp"
                with open(temp_file, 'w', encoding='utf-8') as f:
                    json.dump(whale_symbols, f, ensure_ascii=False, indent=2)
                
                # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                if os.name == 'nt':  # Windows
                    if os.path.exists(whale_file):
                        os.remove(whale_file)
                    os.rename(temp_file, whale_file)
                else:  # Unix/Linux
                    os.rename(temp_file, whale_file)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ whale_symbols: {e}")
    
    def remove_symbol_from_whale_list(self, symbol: str):
        """–£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∏—Ç–æ–≤ THREAD-SAFE"""
        with self._whale_file_lock:
            try:
                whale_file = ScannerConfig.WHALE_SYMBOLS_FILE
                
                if not os.path.exists(whale_file):
                    return  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                try:
                    with open(whale_file, 'r', encoding='utf-8') as f:
                        whale_symbols = json.load(f)
                except (json.JSONDecodeError, Exception) as e:
                    print(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π whale_symbols.json –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                    return
                
                # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª
                original_count = len(whale_symbols)
                whale_symbols = [ws for ws in whale_symbols if ws['symbol'] != symbol]
                
                if len(whale_symbols) < original_count:
                    print(f"üóëÔ∏è {symbol}: –£–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∏—Ç–æ–≤")
                    
                    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    temp_file = whale_file + ".tmp"
                    with open(temp_file, 'w', encoding='utf-8') as f:
                        json.dump(whale_symbols, f, ensure_ascii=False, indent=2)
                    
                    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                    if os.name == 'nt':  # Windows
                        if os.path.exists(whale_file):
                            os.remove(whale_file)
                        os.rename(temp_file, whale_file)
                    else:  # Unix/Linux
                        os.rename(temp_file, whale_file)
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whale_symbols: {e}")
