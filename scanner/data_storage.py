#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
"""

import json
import os
from typing import List, Dict
from datetime import datetime

try:
    from data_models import SymbolResult, OrderData, OrderKey
    from config import ScannerConfig
except ImportError:
    from .data_models import SymbolResult, OrderData, OrderKey
    from .config import ScannerConfig


class DataStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, data_file: str = None):
        self.data_file = data_file or ScannerConfig.DATA_FILE
        self.price_tolerance = ScannerConfig.PRICE_TOLERANCE
        self.verbose_logs = ScannerConfig.VERBOSE_LOGS
    
    def load_existing_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.data_file):
            return []
        
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def save_all_data(self, all_data: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(all_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def clear_data_file(self):
        """–û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            if os.path.exists(self.data_file):
                os.remove(self.data_file)
            print("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def merge_orders_data(self, new_symbol_data: SymbolResult) -> SymbolResult:
        """–û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        existing_data = self.load_existing_data()
        current_time = datetime.now().isoformat()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª
        existing_symbol_data = None
        for data in existing_data:
            if data['symbol'] == new_symbol_data.symbol:
                existing_symbol_data = data
                break
        
        if not existing_symbol_data:
            # –ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª - –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∫ –Ω–æ–≤—ã–µ
            for order in new_symbol_data.orders:
                order.first_seen = current_time
                order.last_seen = current_time  
                order.is_persistent = False
                order.scan_count = 1
                order.lifetime_minutes = 0
            return new_symbol_data
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
        merged_orders = []
        new_orders = new_symbol_data.orders
        existing_orders = [OrderData.from_dict(order_dict) 
                          for order_dict in existing_symbol_data.get('orders', [])]
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–æ–≤–æ–º —Å–∫–∞–Ω–µ
        found_existing_orders = set()
        persistent_orders_log = []  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
        for new_order in new_orders:
            matched_existing = None
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä
            for i, existing_order in enumerate(existing_orders):
                if OrderKey.orders_are_same(new_order, existing_order, self.price_tolerance):
                    matched_existing = existing_order
                    found_existing_orders.add(i)
                    break
            
            if matched_existing:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä - –æ–±–Ω–æ–≤–ª—è–µ–º
                updated_order = new_order
                updated_order.first_seen = matched_existing.first_seen or current_time
                updated_order.last_seen = current_time
                updated_order.is_persistent = True
                updated_order.scan_count = matched_existing.scan_count + 1
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
                try:
                    first_time = datetime.fromisoformat(matched_existing.first_seen or current_time)
                    current_time_dt = datetime.fromisoformat(current_time)
                    lifetime_minutes = (current_time_dt - first_time).total_seconds() / 60
                    updated_order.lifetime_minutes = round(lifetime_minutes, 1)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    order_info = f"{updated_order.type} ${updated_order.usd_value:,.0f} @ {updated_order.price:.4f}"
                    persistent_orders_log.append(f"  üîÑ {order_info} (–∂–∏–≤–µ—Ç {lifetime_minutes:.1f}–º–∏–Ω, —Å–∫–∞–Ω #{updated_order.scan_count})")
                    
                except:
                    updated_order.lifetime_minutes = 0
                
                merged_orders.append(updated_order)
            else:
                # –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                new_order.first_seen = current_time
                new_order.last_seen = current_time
                new_order.is_persistent = False  
                new_order.scan_count = 1
                new_order.lifetime_minutes = 0
                merged_orders.append(new_order)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if persistent_orders_log:
            print(f"üîç {new_symbol_data.symbol}: –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:")
            for log_line in persistent_orders_log:
                print(log_line)
        
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—á–µ–∑–ª–∏ (–æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è)
        new_symbol_data.orders = merged_orders
        return new_symbol_data
    
    def update_symbol_data(self, updated_symbol_data: SymbolResult):
        """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ñ–∞–π–ª–µ"""
        all_data = self.load_existing_data()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
        symbol_found = False
        for i, data in enumerate(all_data):
            if data['symbol'] == updated_symbol_data.symbol:
                all_data[i] = updated_symbol_data.to_dict()
                symbol_found = True
                break
        
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º
        if not symbol_found:
            all_data.append(updated_symbol_data.to_dict())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            self.save_all_data(all_data)
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            new_orders = [o for o in updated_symbol_data.orders if not o.is_persistent]
            persistent_orders = [o for o in updated_symbol_data.orders if o.is_persistent]
            
            if new_orders or self.verbose_logs:
                status_parts = []
                if new_orders:
                    status_parts.append(f"{len(new_orders)} –Ω–æ–≤—ã—Ö")
                if persistent_orders:
                    status_parts.append(f"{len(persistent_orders)} –ø–µ—Ä—Å.")
                
                status = ", ".join(status_parts) if status_parts else "0 –æ—Ä–¥–µ—Ä–æ–≤"
                symbol_log = f"‚úÖ {updated_symbol_data.symbol}: {status}"
                
                # –¢–æ–ª—å–∫–æ –≤ –≤–µ—Ä–±–æ–∑–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
                if new_orders or self.verbose_logs:
                    print(symbol_log)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def remove_symbol_from_data(self, symbol: str):
        """–£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤)"""
        all_data = self.load_existing_data()
        original_count = len(all_data)
        all_data = [data for data in all_data if data['symbol'] != symbol]
        
        if len(all_data) < original_count:
            try:
                self.save_all_data(all_data)
                print(f"  –£–¥–∞–ª–µ–Ω {symbol} (–Ω–µ—Ç –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤)")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞: {e}")
    
    def save_symbol_data_persistent(self, symbol_result: SymbolResult):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º)"""
        if not symbol_result.orders:
            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            # (—É–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç)
            self.remove_symbol_from_data(symbol_result.symbol)
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        merged_symbol_data = self.merge_orders_data(symbol_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.update_symbol_data(merged_symbol_data)
    
    def save_symbol_data_simple(self, symbol_result: SymbolResult):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        if not symbol_result.orders:
            return
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        all_data = self.load_existing_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_data.append(symbol_result.to_dict())
        
        try:
            self.save_all_data(all_data)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(symbol_result.orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol_result.symbol}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
