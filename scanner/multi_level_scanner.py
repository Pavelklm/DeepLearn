#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
"""

import time
import threading
from typing import List, Set
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

try:
    from scanner import BinanceBigOrdersScanner
    from pool_manager import PoolManager, PoolType
    from config import ScannerConfig
    from symbol_manager import SymbolManager
    from api_client import BinanceAPIClient
except ImportError:
    from .scanner import BinanceBigOrdersScanner
    from .pool_manager import PoolManager, PoolType
    from .config import ScannerConfig
    from .symbol_manager import SymbolManager
    from .api_client import BinanceAPIClient


class MultiLevelScanner:
    """–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —Å —Ç—Ä–µ–º—è –ø—É–ª–∞–º–∏"""
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.base_scanner = BinanceBigOrdersScanner()
        self.pool_manager = PoolManager()
        self.api_client = BinanceAPIClient()
        self.symbol_manager = SymbolManager(self.api_client)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.verbose_logs = ScannerConfig.VERBOSE_LOGS
        self.multi_level_mode = ScannerConfig.MULTI_LEVEL_MODE
        self.initial_full_scan = ScannerConfig.INITIAL_FULL_SCAN
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._stop_event = threading.Event()
        self._threads = []
        self._all_symbols_cache = []
        self._last_symbols_update = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'hot_scans': 0,
            'watch_scans': 0,
            'general_scans': 0,
            'symbols_moved_to_watch': 0,
            'symbols_moved_to_general': 0,
            'symbols_returned_to_hot': 0
        }
    
    def set_verbose_logs(self, verbose: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        self.verbose_logs = verbose
        self.base_scanner.set_verbose_logs(verbose)
    
    def get_all_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        now = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        if (not self._last_symbols_update or 
            (now - self._last_symbols_update).total_seconds() > 300):
            
            filtered_symbols, _ = self.symbol_manager.get_filtered_symbols()
            if filtered_symbols:
                self._all_symbols_cache = filtered_symbols
                self._last_symbols_update = now
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à —Å–∏–º–≤–æ–ª–æ–≤: {len(self._all_symbols_cache)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return self._all_symbols_cache
    
    def run_initial_full_scan(self):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∫–∞–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞"""
        print(f"\n{'='*80}")
        print("üöÄ –ù–ê–ß–ê–õ–¨–ù–´–ô –ü–û–õ–ù–´–ô –°–ö–ê–ù")
        print(f"{'='*80}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.base_scanner.data_storage.clear_data_file()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–∫–∞–Ω –±–∞–∑–æ–≤—ã–º —Å–∫–∞–Ω–µ—Ä–æ–º
        self.base_scanner.scan_all_symbols()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        hot_symbols = self.pool_manager.get_hot_pool_symbols()
        print(f"üî• –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫–∏—Ç–∞–º–∏: {len(hot_symbols)}")
        
        if hot_symbols and self.verbose_logs:
            print("   –ì–æ—Ä—è—á–∏–π –ø—É–ª:", ', '.join(sorted(hot_symbols)))
        
        print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Å–∫–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ä–µ–∂–∏–º")
    
    def hot_pool_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞"""
        print(f"üî• –ó–∞–ø—É—â–µ–Ω –≤–æ—Ä–∫–µ—Ä –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞")
        
        while not self._stop_event.is_set():
            try:
                hot_symbols = list(self.pool_manager.get_hot_pool_symbols())
                
                if not hot_symbols:
                    if self.verbose_logs:
                        print("üî• –ì–æ—Ä—è—á–∏–π –ø—É–ª –ø—É—Å—Ç, –∂–¥–µ–º...")
                    self._stop_event.wait(5)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º wait –≤–º–µ—Å—Ç–æ sleep
                    continue
                
                scan_start = time.time()
                symbols_scanned = 0
                orders_found = 0
                
                print(f"\nüî• –ì–û–†–Ø–ß–ò–ô –ü–£–õ: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(hot_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ–º ticker –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞
                try:
                    all_tickers = self.symbol_manager.get_all_tickers_batch()
                    if not all_tickers:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ticker –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é")
                        continue
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ticker –¥–∞–Ω–Ω—ã—Ö: {e}")
                    continue
                
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –≥–æ—Ä—è—á–µ–º –ø—É–ª–µ
                for i, symbol in enumerate(hot_symbols, 1):
                    if self._stop_event.is_set():
                        break
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞
                    try:
                        if symbol not in all_tickers:
                            continue
                        
                        ticker_data = all_tickers[symbol]
                        result = self.base_scanner.process_symbol_with_index(
                            (symbol, i, len(hot_symbols), ticker_data)
                        )
                        
                        if result > 0:
                            orders_found += result
                        symbols_scanned += 1
                        self.stats['hot_scans'] += 1
                        
                    except Exception as e:
                        if self.verbose_logs:
                            print(f"üî• –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
                
                scan_time = time.time() - scan_start
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ—Ä—è—á–µ–º –ø—É–ª–µ
                lost_symbols = self.pool_manager.check_hot_pool_changes()
                for symbol in lost_symbols:
                    self.pool_manager.add_to_watch_pool(symbol)
                    self.stats['symbols_moved_to_watch'] += 1
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                print(f"üî• –ì–æ—Ä—è—á–∏–π —Å–∫–∞–Ω: {symbols_scanned} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {scan_time:.1f}—Å, –Ω–∞–π–¥–µ–Ω–æ {orders_found} –æ—Ä–¥–µ—Ä–æ–≤")
                if lost_symbols:
                    print(f"üìã –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ: {len(lost_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∞–º–∏ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞
                if not self._stop_event.is_set():
                    self._stop_event.wait(2)
                
            except Exception as e:
                print(f"üî• –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞: {e}")
                if not self._stop_event.is_set():
                    self._stop_event.wait(5)
    
    def watch_pool_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        print(f"üìã –ó–∞–ø—É—â–µ–Ω –≤–æ—Ä–∫–µ—Ä –ø—É–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        
        while not self._stop_event.is_set():
            try:
                watch_symbols = list(self.pool_manager.get_watch_pool_symbols())
                
                if not watch_symbols:
                    time.sleep(ScannerConfig.WATCH_SCAN_INTERVAL)
                    continue
                
                print(f"üìã –ù–ê–ë–õ–Æ–î–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(watch_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
                
                symbols_to_remove = []
                orders_found = 0
                
                for symbol in watch_symbols:
                    if self._stop_event.is_set():
                        break
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª
                        filtered_symbols, all_tickers = self.symbol_manager.get_filtered_symbols()
                        if symbol not in all_tickers:
                            continue
                        
                        ticker_data = all_tickers[symbol]
                        result = self.base_scanner.process_symbol_with_index(
                            (symbol, 1, 1, ticker_data)
                        )
                        
                        if result > 0:
                            orders_found += result
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Ä–¥–µ—Ä–∞ - —Å–∏–º–≤–æ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –≥–æ—Ä—è—á–∏–π –ø—É–ª
                            # —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º data_storage
                        
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–æ–≤
                        should_move_to_general = self.pool_manager.increment_watch_scan(symbol)
                        if should_move_to_general:
                            symbols_to_remove.append(symbol)
                            self.stats['symbols_moved_to_general'] += 1
                        
                        self.stats['watch_scans'] += 1
                        
                    except Exception as e:
                        if self.verbose_logs:
                            print(f"üìã –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è {symbol}: {e}")
                
                if orders_found > 0:
                    print(f"üìã –ù–∞–±–ª—é–¥–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {orders_found} –æ—Ä–¥–µ—Ä–æ–≤")
                if symbols_to_remove:
                    print(f"üìã –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –æ–±—â–∏–π –ø—É–ª: {len(symbols_to_remove)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                self.pool_manager.cleanup_expired_watch_symbols()
                
                time.sleep(ScannerConfig.WATCH_SCAN_INTERVAL)
                
            except Exception as e:
                print(f"üìã –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {e}")
                time.sleep(ScannerConfig.WATCH_SCAN_INTERVAL)
    
    def general_pool_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –ø—É–ª–∞"""
        print(f"üìä –ó–∞–ø—É—â–µ–Ω –≤–æ—Ä–∫–µ—Ä –æ–±—â–µ–≥–æ –ø—É–ª–∞")
        
        while not self._stop_event.is_set():
            try:
                all_symbols = self.get_all_symbols()
                general_symbols = self.pool_manager.get_general_pool_symbols(all_symbols)
                
                if not general_symbols:
                    time.sleep(ScannerConfig.GENERAL_SCAN_INTERVAL)
                    continue
                
                scan_start = time.time()
                print(f"üìä –û–ë–©–ò–ô –ü–£–õ: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(general_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–≥–æ –ø—É–ª–∞
                orders_found = 0
                symbols_scanned = 0
                
                # –ü–æ–ª—É—á–∞–µ–º ticker –¥–∞–Ω–Ω—ã–µ
                filtered_symbols, all_tickers = self.symbol_manager.get_filtered_symbols()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
                symbol_tasks = []
                for i, symbol in enumerate(general_symbols):
                    if symbol in all_tickers:
                        ticker_data = all_tickers[symbol]
                        symbol_tasks.append((symbol, i+1, len(general_symbols), ticker_data))
                
                # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
                with ThreadPoolExecutor(max_workers=ScannerConfig.GENERAL_POOL_WORKERS) as executor:
                    results = executor.map(self.base_scanner.process_symbol_with_index, symbol_tasks)
                    for result in results:
                        if self._stop_event.is_set():
                            break
                        orders_found += result
                        symbols_scanned += 1
                        self.stats['general_scans'] += 1
                
                scan_time = time.time() - scan_start
                print(f"üìä –û–±—â–∏–π —Å–∫–∞–Ω: {symbols_scanned} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {scan_time:.1f}—Å, –Ω–∞–π–¥–µ–Ω–æ {orders_found} –æ—Ä–¥–µ—Ä–æ–≤")
                
                time.sleep(ScannerConfig.GENERAL_SCAN_INTERVAL)
                
            except Exception as e:
                print(f"üìä –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –æ–±—â–µ–≥–æ –ø—É–ª–∞: {e}")
                time.sleep(ScannerConfig.GENERAL_SCAN_INTERVAL)
    
    def print_status(self):
        """–í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        pools_status = self.pool_manager.get_pools_status()
        
        print(f"\n{'='*80}")
        print(f"üìä –°–¢–ê–¢–£–° –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ì–û –°–ö–ê–ù–ï–†–ê")
        print(f"{'='*80}")
        print(f"üî• –ì–æ—Ä—è—á–∏–π –ø—É–ª:    {pools_status['hot_pool']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –ü—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {pools_status['watch_pool']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if pools_status['watch_symbols_details']:
            print(f"   ‚îî‚îÄ –î–µ—Ç–∞–ª–∏: {', '.join(pools_status['watch_symbols_details'])}")
        
        general_count = len(self.get_all_symbols()) - pools_status['hot_pool'] - pools_status['watch_pool']
        print(f"üìä –û–±—â–∏–π –ø—É–ª:      {general_count} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üî• –°–∫–∞–Ω–æ–≤ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞:    {self.stats['hot_scans']}")
        print(f"   üìã –°–∫–∞–Ω–æ–≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:       {self.stats['watch_scans']}")
        print(f"   üìä –°–∫–∞–Ω–æ–≤ –æ–±—â–µ–≥–æ –ø—É–ª–∞:      {self.stats['general_scans']}")
        print(f"   ‚ÜóÔ∏è –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ:   {self.stats['symbols_moved_to_watch']}")
        print(f"   ‚ÜòÔ∏è –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –æ–±—â–∏–π –ø—É–ª:    {self.stats['symbols_moved_to_general']}")
        print(f"{'='*80}")
    
    def start_multi_level_scanning(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"\n{'='*80}")
        print("üöÄ –ó–ê–ü–£–°–ö –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ì–û –°–ö–ê–ù–ï–†–ê")
        print(f"{'='*80}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
        self.base_scanner.set_persistent_mode(True)
        self.base_scanner.set_verbose_logs(False)  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ symbol_manager –¥–ª—è –º–µ–Ω—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        self.symbol_manager.verbose_logs = False
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π —Å–∫–∞–Ω
        if self.initial_full_scan:
            self.run_initial_full_scan()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        print(f"\nüîß –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤...")
        
        # –ì–æ—Ä—è—á–∏–π –ø—É–ª –≤–æ—Ä–∫–µ—Ä
        hot_thread = threading.Thread(target=self.hot_pool_worker, daemon=True)
        hot_thread.start()
        self._threads.append(hot_thread)
        
        # –ü—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä  
        watch_thread = threading.Thread(target=self.watch_pool_worker, daemon=True)
        watch_thread.start()
        self._threads.append(watch_thread)
        
        # –û–±—â–∏–π –ø—É–ª –≤–æ—Ä–∫–µ—Ä
        general_thread = threading.Thread(target=self.general_pool_worker, daemon=True)
        general_thread.start()
        self._threads.append(general_thread)
        
        print(f"‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            while not self._stop_event.is_set():
                self._stop_event.wait(60)  # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if not self._stop_event.is_set():
                    self.print_status()
                
        except KeyboardInterrupt:
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã"""
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞...")
        self._stop_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self._threads:
            thread.join(timeout=5)
        
        self.print_status()
        print(f"‚úÖ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
