#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import os
from typing import Dict, List, Set, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum

try:
    from config import ScannerConfig
except ImportError:
    from .config import ScannerConfig


class PoolType(Enum):
    """–¢–∏–ø—ã –ø—É–ª–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    HOT = "hot"           # –ì–æ—Ä—è—á–∏–π –ø—É–ª - –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∏—Ç—ã
    WATCH = "watch"       # –ü—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è - –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ
    GENERAL = "general"   # –û–±—â–∏–π –ø—É–ª - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ


@dataclass
class WatchSymbol:
    """–°–∏–º–≤–æ–ª –≤ –ø—É–ª–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
    symbol: str
    added_time: str  # –ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    scan_count: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–æ–≤ –≤ –ø—É–ª–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    last_scan_time: Optional[str] = None
    
    def to_dict(self) -> Dict:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'WatchSymbol':
        return cls(**data)


class PoolManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.whale_file = ScannerConfig.WHALE_SYMBOLS_FILE
        self.watch_symbols: Dict[str, WatchSymbol] = {}  # –í –ø–∞–º—è—Ç–∏
        self._cached_hot_symbols: Set[str] = set()
        self._last_hot_update: Optional[datetime] = None
        
    def get_hot_pool_symbols(self, force_refresh: bool = False) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞ (whale_symbols.json)"""
        try:
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            now = datetime.now()
            if (not force_refresh and self._last_hot_update and 
                (now - self._last_hot_update).total_seconds() < 5):
                return self._cached_hot_symbols
            
            if not os.path.exists(self.whale_file):
                self._cached_hot_symbols = set()
                self._last_hot_update = now
                return self._cached_hot_symbols
            
            with open(self.whale_file, 'r', encoding='utf-8') as f:
                whale_data = json.load(f)
            
            self._cached_hot_symbols = {item['symbol'] for item in whale_data}
            self._last_hot_update = now
            return self._cached_hot_symbols
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞: {e}")
            return set()
    
    def get_watch_pool_symbols(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø—É–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        return set(self.watch_symbols.keys())
    
    def add_to_watch_pool(self, symbol: str):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –ø—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        if symbol not in self.watch_symbols:
            self.watch_symbols[symbol] = WatchSymbol(
                symbol=symbol,
                added_time=datetime.now().isoformat(),
                scan_count=0
            )
            print(f"üìã {symbol}: –î–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
    
    def increment_watch_scan(self, symbol: str) -> bool:
        """
        –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –æ–±—â–∏–π –ø—É–ª
        """
        if symbol not in self.watch_symbols:
            return False
        
        watch_symbol = self.watch_symbols[symbol]
        watch_symbol.scan_count += 1
        watch_symbol.last_scan_time = datetime.now().isoformat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞–Ω–æ–≤
        if watch_symbol.scan_count >= ScannerConfig.WATCH_MAX_SCANS:
            print(f"üîÑ {symbol}: –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–±—â–∏–π –ø—É–ª –ø–æ—Å–ª–µ {watch_symbol.scan_count} —Å–∫–∞–Ω–æ–≤")
            del self.watch_symbols[symbol]
            return True
        
        return False
    
    def remove_from_watch_pool(self, symbol: str):
        """–£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –ø—É–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–æ—Ä—è—á–∏–π)"""
        if symbol in self.watch_symbols:
            print(f"üî• {symbol}: –í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–æ—Ä—è—á–∏–π –ø—É–ª –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
            del self.watch_symbols[symbol]
    
    def check_hot_pool_changes(self) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ—Ä—è—á–µ–º –ø—É–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª—ã, 
        –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        """
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        current_hot = self.get_hot_pool_symbols(force_refresh=True)
        previous_hot = getattr(self, '_previous_hot_symbols', set())
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—á–µ–∑–ª–∏ –∏–∑ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞
        lost_symbols = previous_hot - current_hot
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ—Ä—è—á–∏–π –ø—É–ª –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        returned_symbols = current_hot & set(self.watch_symbols.keys())
        
        # –£–¥–∞–ª—è–µ–º –≤–µ—Ä–Ω—É–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø—É–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        for symbol in returned_symbols:
            self.remove_from_watch_pool(symbol)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if lost_symbols:
            print(f"üìã –ò—Å—á–µ–∑–ª–∏ –∏–∑ –≥–æ—Ä—è—á–µ–≥–æ –ø—É–ª–∞: {list(lost_symbols)}")
        if returned_symbols:
            print(f"üî• –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ—Ä—è—á–∏–π –ø—É–ª: {list(returned_symbols)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self._previous_hot_symbols = current_hot.copy()
        
        return list(lost_symbols)
    
    def get_general_pool_symbols(self, all_symbols: List[str]) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—â–µ–≥–æ –ø—É–ª–∞ (–∏—Å–∫–ª—é—á–∞—è –≥–æ—Ä—è—á–∏–π –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ)
        """
        hot_symbols = self.get_hot_pool_symbols()
        watch_symbols = self.get_watch_pool_symbols()
        excluded_symbols = hot_symbols | watch_symbols
        
        return [symbol for symbol in all_symbols if symbol not in excluded_symbols]
    
    def get_pool_type(self, symbol: str) -> PoolType:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É –ø—É–ª—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–∏–º–≤–æ–ª"""
        if symbol in self.get_hot_pool_symbols():
            return PoolType.HOT
        elif symbol in self.get_watch_pool_symbols():
            return PoolType.WATCH
        else:
            return PoolType.GENERAL
    
    def get_pools_status(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–æ–≤"""
        return {
            "hot_pool": len(self.get_hot_pool_symbols()),
            "watch_pool": len(self.get_watch_pool_symbols()),
            "watch_symbols_details": [
                f"{ws.symbol}({ws.scan_count}/{ScannerConfig.WATCH_MAX_SCANS})"
                for ws in self.watch_symbols.values()
            ]
        }
    
    def cleanup_expired_watch_symbols(self):
        """–û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø—É–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)"""
        now = datetime.now()
        expired_symbols = []
        
        for symbol, watch_symbol in self.watch_symbols.items():
            try:
                added_time = datetime.fromisoformat(watch_symbol.added_time)
                # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞ - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                if (now - added_time).total_seconds() > 3600:
                    expired_symbols.append(symbol)
            except:
                expired_symbols.append(symbol)  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        
        for symbol in expired_symbols:
            print(f"üóëÔ∏è {symbol}: –£–¥–∞–ª–µ–Ω –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫)")
            del self.watch_symbols[symbol]
