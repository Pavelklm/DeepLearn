#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import sys
import os

# Add current directory to path for absolute imports
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

try:
    from scanner import BinanceBigOrdersScanner
    from multi_level_scanner import MultiLevelScanner
    from config import ScannerConfig
except ImportError:
    try:
        from .scanner import BinanceBigOrdersScanner
        from .multi_level_scanner import MultiLevelScanner
        from .config import ScannerConfig
    except ImportError:
        # If both fail, try importing from the same directory
        import scanner as scanner_module
        import multi_level_scanner as multi_level_scanner_module
        import config as config_module
        BinanceBigOrdersScanner = scanner_module.BinanceBigOrdersScanner
        MultiLevelScanner = multi_level_scanner_module.MultiLevelScanner
        ScannerConfig = config_module.ScannerConfig


class CLI:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞"""
    
    def __init__(self):
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å–∫–∞–Ω–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if ScannerConfig.MULTI_LEVEL_MODE:
            self.scanner = MultiLevelScanner()
            self.is_multi_level = True
        else:
            self.scanner = BinanceBigOrdersScanner()
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            self.scanner.set_persistent_mode(True)  # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.scanner.set_verbose_logs(True)     # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
            self.is_multi_level = False
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        mode_text = "–ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ô" if self.is_multi_level else "–û–ë–´–ß–ù–´–ô"
        print("=" * 80)
        print(f"üöÄ –°–ö–ê–ù–ï–† –ë–û–õ–¨–®–ò–• –ó–ê–Ø–í–û–ö BINANCE FUTURES - {mode_text} –†–ï–ñ–ò–ú")
        print("=" * 80)
        print(f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–∏—Ç–æ–≤: {ScannerConfig.WHALE_MULTIPLIER}x (—Å—Ä–µ–¥–Ω–∏–π_–æ—Ä–¥–µ—Ä * –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)")
        print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(ScannerConfig.EXCLUDED_SYMBOLS)}")
        print(f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–∞–∫—Å {ScannerConfig.MAX_ORDERS_PER_SIDE}+{ScannerConfig.MAX_ORDERS_PER_SIDE} –æ—Ä–¥–µ—Ä–∞/—Å–∏–º–≤–æ–ª, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–¥–∏—É—Å (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å x{ScannerConfig.VOLATILITY_MULTIPLIER})")
        
        if self.is_multi_level:
            print(f"üî• –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ô –†–ï–ñ–ò–ú:")
            print(f"   üî• –ì–æ—Ä—è—á–∏–π –ø—É–ª: {ScannerConfig.HOT_POOL_WORKERS} –≤–æ—Ä–∫–µ—Ä–æ–≤ + 1 –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π")
            print(f"   üìã –ü—É–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {ScannerConfig.WATCH_POOL_WORKER} –≤–æ—Ä–∫–µ—Ä, –∫–∞–∂–¥—ã–µ {ScannerConfig.WATCH_SCAN_INTERVAL}—Å–µ–∫, –º–∞–∫—Å {ScannerConfig.WATCH_MAX_SCANS} —Å–∫–∞–Ω–æ–≤")
            print(f"   üìä –û–±—â–∏–π –ø—É–ª: {ScannerConfig.GENERAL_POOL_WORKERS} –≤–æ—Ä–∫–µ—Ä–æ–≤, –∫–∞–∂–¥—ã–µ {ScannerConfig.GENERAL_SCAN_INTERVAL}—Å–µ–∫")
        else:
            print(f"üî• –†–µ–∂–∏–º: –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï + –ù–ï–ü–†–ï–†–´–í–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")
            print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {ScannerConfig.MAX_WORKERS} –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        print(f"üìà –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ø-{ScannerConfig.TOP_SYMBOLS_COUNT} –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤")
        print()
        print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–æ–≤")
        print("‚úÖ –†–∞–∑–ª–∏—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤") 
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        print("‚úÖ BATCH –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("‚úÖ Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
        print(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–æ—ç—Ñ. {ScannerConfig.VOLATILITY_MULTIPLIER})")
        
        if self.is_multi_level:
            print("‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø—É–ª–∞–º")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –º–µ–∂–¥—É –ø—É–ª–∞–º–∏")
            print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API")
        
        print("=" * 80)
    
    def print_instructions(self):
        """–í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        print("üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("   Ctrl+C - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if self.is_multi_level:
            print("   –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            print("   –°—Ç–∞—Ç—É—Å –ø—É–ª–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
        else:
            print("   –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        print("   –ü–æ–¥—Å–∫–∞–∑–∫–∞: v:–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å%, r:—Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ ¬±%")
        print("=" * 80)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ CLI"""
        try:
            self.print_header()
            self.print_instructions()
            
            if self.is_multi_level:
                print("üöÄ –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                print("   –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:", self.scanner.base_scanner.data_storage.data_file)
                print()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.scanner.start_multi_level_scanning()
            else:
                print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                print("   –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:", self.scanner.data_storage.data_file)
                print()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω–æ–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.scanner.continuous_scan()
                
        except KeyboardInterrupt:
            print("\n" + "=" * 80)
            print("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print("=" * 80)
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
