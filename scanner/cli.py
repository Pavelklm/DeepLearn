#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

from .scanner import BinanceBigOrdersScanner
from .config import ScannerConfig


class CLI:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞"""
    
    def __init__(self):
        self.scanner = BinanceBigOrdersScanner()
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        self.scanner.set_persistent_mode(True)  # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.scanner.set_verbose_logs(True)     # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("=" * 80)
        print("üöÄ –°–ö–ê–ù–ï–† –ë–û–õ–¨–®–ò–• –ó–ê–Ø–í–û–ö BINANCE FUTURES")
        print("=" * 80)
        print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: ${ScannerConfig.MIN_ORDER_SIZE_USD:,}")
        print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(ScannerConfig.EXCLUDED_SYMBOLS)}")
        print(f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–∞–∫—Å {ScannerConfig.MAX_ORDERS_PER_SIDE}+{ScannerConfig.MAX_ORDERS_PER_SIDE} –æ—Ä–¥–µ—Ä–∞/—Å–∏–º–≤–æ–ª, –º–∞–∫—Å {ScannerConfig.MAX_DISTANCE_PERCENT}% –æ—Ç —Ü–µ–Ω—ã")
        print(f"üî• –†–µ–∂–∏–º: –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï + –ù–ï–ü–†–ï–†–´–í–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {ScannerConfig.MAX_WORKERS} –≤–æ—Ä–∫–µ—Ä–æ–≤")
        print(f"üìà –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ø-{ScannerConfig.TOP_SYMBOLS_COUNT} –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤")
        print()
        print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–æ–≤")
        print("‚úÖ –†–∞–∑–ª–∏—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤") 
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        print("‚úÖ BATCH –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("‚úÖ Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
        print("=" * 80)
    
    def print_instructions(self):
        """–í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        print("üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("   Ctrl+C - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print("=" * 80)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ CLI"""
        try:
            self.print_header()
            self.print_instructions()
            
            print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            print("   –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:", self.scanner.data_storage.data_file)
            print()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.scanner.continuous_scan()
                
        except KeyboardInterrupt:
            print("\n" + "=" * 80)
            print("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print("=" * 80)
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
