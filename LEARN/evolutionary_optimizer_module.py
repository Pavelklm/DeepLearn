# –§–∞–π–ª: evolutionary_optimizer_module.py
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —á–µ—Ä–µ–∑ —ç–≤–æ–ª—é—Ü–∏—é
# –û–ë–ù–û–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å pandas_ta –Ω–∞ TA-Lib –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows

import json
import logging
import random
import copy
import time
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any, Optional
from pathlib import Path
from tqdm import tqdm
import pandas as pd
import yfinance as yf
import talib
import multiprocessing as mp
from functools import partial
from concurrent.futures import ProcessPoolExecutor, as_completed

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
try:
    from analytics.metrics_calculator import MetricsCalculator
    from risk_management.config_manager import ConfigManager
    from bot_process import Playground
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
    print(f"   cd {project_root}")
    print(f"   python LEARN/evolutionary_optimizer_module.py")
    raise


def evaluate_individual_worker(individual: Dict, config: Dict, data_dict: Dict) -> Dict:
    """
    Worker —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Å–æ–±–µ–π.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DataFrame –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        data = pd.DataFrame(data_dict['data'], index=pd.to_datetime(data_dict['index']))
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_generator = SignalGenerator(config)
        signals = signal_generator.generate_signals(individual, data)
        
        if not signals or len(signals) < config['validation']['min_trades_threshold']:
            return {
                'success': False,
                'score': config['scoring']['penalties']['insufficient_signals'],
                'metrics': {},
                'trades': [],
                'signals_count': len(signals) if signals else 0
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
        runner = LightweightBacktester(config)
        backtest_result = runner.run_backtest(signals, data)
        
        if not backtest_result['success']:
            return {
                'success': False,
                'score': config['scoring']['penalties']['backtest_failed'],
                'metrics': {},
                'trades': [],
                'error': backtest_result.get('error', 'Unknown error')
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        trades = backtest_result['trades']
        metrics = backtest_result.get('metrics', {})
        
        if not trades:
            return {
                'success': False,
                'score': config['scoring']['penalties']['insufficient_trades'],
                'metrics': {},
                'trades': []
            }
        
        # –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        total_profit = metrics.get('total_profit', 0)
        win_rate = metrics.get('win_rate', 0)
        
        if total_profit <= 0:
            return {
                'success': False,
                'score': config['scoring']['penalties']['unprofitable'],
                'metrics': metrics,
                'trades': trades
            }
        
        if win_rate < config['validation']['min_win_rate']:
            return {
                'success': False,
                'score': config['scoring']['penalties']['low_win_rate'],
                'metrics': metrics,
                'trades': trades
            }
        
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
        weights = config['scoring']['weights']
        return_pct = metrics.get('return_pct', 0)
        trade_count = len(trades)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –æ—Ü–µ–Ω–∫–∏
        profit_component = max(0, return_pct / 100) * weights['profit_factor']
        win_rate_component = win_rate * weights['win_rate']
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        optimal_range = config['scoring']['optimal_trade_range']
        if optimal_range[0] <= trade_count <= optimal_range[1]:
            trade_bonus = weights['trade_frequency']
        else:
            trade_bonus = weights['trade_frequency'] * 0.5
        
        final_score = profit_component + win_rate_component + trade_bonus
        
        return {
            'success': True,
            'score': max(0, final_score),
            'metrics': metrics,
            'trades': trades,
            'trade_count': trade_count
        }
        
    except Exception as e:
        return {
            'success': False,
            'score': config['scoring']['penalties']['critical_error'],
            'metrics': {},
            'trades': [],
            'error': str(e)
        }


class SimpleMetrics:
    """
    –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞.
    """
    def __init__(self, total_profit: float, return_pct: float, total_trades: int, win_rate: float):
        self.total_profit = total_profit
        self.return_pct = return_pct
        self.total_trades = total_trades
        self.win_rate = win_rate
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.sharpe_ratio = max(0, return_pct / 10)  # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        self.max_drawdown_pct = abs(min(0, return_pct / 2))  # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
        

class StrategyDiscoveryObjective:
    """
    –û—Ü–µ–Ω—â–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
    –ó–∞–º–µ–Ω—è–µ—Ç OptimizerObjective –¥–ª—è –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(f"{__name__}.StrategyDiscoveryObjective")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.evaluation_count = 0
        self.successful_evaluations = 0
        
    def evaluate_strategy_candidate(self, candidate: Dict, data: pd.DataFrame) -> Dict:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        
        Args:
            candidate: {"indicators": {...}, "trading_rules": {...}}
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
            
        Returns:
            {"score": float, "metrics": {...}, "trades": [...], "success": bool}
        """
        self.evaluation_count += 1
        start_time = time.time()
        # max_evaluation_time = 30  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–∫–∞
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if self.evaluation_count % 100 == 1:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 100-—é –æ—Ü–µ–Ω–∫—É
                self.logger.info(f"    üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ #{self.evaluation_count}")
            
            signal_start = time.time()
            signal_generator = SignalGenerator(self.config)
            signals = signal_generator.generate_signals(candidate, data)
            signal_time = time.time() - signal_start
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
            
            if not signals or len(signals) < self.config['validation']['min_trades_threshold']:
                if self.evaluation_count % 50 == 1:  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–≤–∞–ª–∞
                    self.logger.warning(f"    ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals) if signals else 0}/"
                                       f"{self.config['validation']['min_trades_threshold']}")
                return {
                    'success': False,
                    'score': self._get_penalty_score('insufficient_signals'),
                    'metrics': {},
                    'trades': [],
                    'signals_count': len(signals) if signals else 0
                }
            
            if self.evaluation_count % 100 == 1:
                self.logger.info(f"    üíπ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç —Å {len(signals)} —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—Å–∏–≥–Ω–∞–ª—ã: {signal_time:.2f}—Å)")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
            backtest_start = time.time()
            runner = LightweightBacktester(self.config)
            backtest_result = runner.run_backtest(signals, data)
            backtest_time = time.time() - backtest_start
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–π–º–∞—É—Ç–∞
            
            if not backtest_result['success']:
                if self.evaluation_count % 50 == 1:
                    self.logger.warning(f"    ‚ö†Ô∏è –ë—ç–∫—Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {backtest_result.get('error', 'Unknown error')}")
                return {
                    'success': False,
                    'score': self._get_penalty_score('backtest_failed'),
                    'metrics': {},
                    'trades': [],
                    'error': backtest_result.get('error', 'Unknown error')
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            analysis_start = time.time()
            analysis = self._analyze_results(backtest_result)
            analysis_time = time.time() - analysis_start
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            validation_start = time.time()
            validation = self._validate_quality(analysis)
            validation_time = time.time() - validation_start
            if not validation['valid']:
                if self.evaluation_count % 50 == 1:
                    self.logger.warning(f"    ‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {validation['reason']}")
                return {
                    'success': False,
                    'score': self._get_penalty_score(validation['category']),
                    'metrics': analysis['metrics'],
                    'trades': analysis['trades'],
                    'rejection_reason': validation['reason']
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            scoring_start = time.time()
            final_score = self._calculate_score(analysis)
            scoring_time = time.time() - scoring_start
            
            total_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–π 50-–π –æ—Ü–µ–Ω–∫–∏
            if self.evaluation_count % 50 == 0:
                self.logger.info(
                    f"    ‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ #{self.evaluation_count}: {total_time:.2f}—Å "
                    f"(—Å–∏–≥–Ω–∞–ª—ã: {signal_time:.2f}—Å, –±—ç–∫—Ç–µ—Å—Ç: {backtest_time:.2f}—Å, "
                    f"–∞–Ω–∞–ª–∏–∑: {analysis_time:.2f}—Å, –≤–∞–ª–∏–¥–∞—Ü–∏—è: {validation_time:.2f}—Å, "
                    f"–æ—Ü–µ–Ω–∫–∞: {scoring_time:.2f}—Å)"
                )
            
            self.successful_evaluations += 1
            
            return {
                'success': True,
                'score': final_score,
                'metrics': analysis['metrics'],
                'trades': analysis['trades'],
                'trade_count': len(analysis['trades'])
            }
            
        except Exception as e:
            total_time = time.time() - start_time
            self.logger.warning(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ #{self.evaluation_count} –∑–∞ {total_time:.2f}—Å: {e}")
            return {
                'success': False,
                'score': self._get_penalty_score('critical_error'),
                'metrics': {},
                'trades': [],
                'error': str(e)
            }
    
    def _analyze_results(self, backtest_result: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞."""
        trades = backtest_result['trades']
        metrics = backtest_result.get('metrics', {})
        
        if not trades:
            return {
                'trades': [],
                'trade_count': 0,
                'metrics': self._get_empty_metrics(),
                'basic_stats': self._get_empty_stats()
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
        total_profit = metrics.get('total_profit', 0)
        winning_trades = metrics.get('winning_trades', 0)
        win_rate = metrics.get('win_rate', 0) * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        simple_metrics = SimpleMetrics(
            total_profit=total_profit,
            return_pct=metrics.get('return_pct', 0),
            total_trades=len(trades),
            win_rate=win_rate
        )
        
        basic_stats = {
            'total_profit': total_profit,
            'total_profit_pct': metrics.get('return_pct', 0),
            'trade_count': len(trades),
            'winning_trades': winning_trades,
            'losing_trades': len(trades) - winning_trades,
            'win_rate': win_rate,
            'avg_trade': total_profit / len(trades) if trades else 0
        }
        
        return {
            'trades': trades,
            'trade_count': len(trades),
            'metrics': simple_metrics,
            'basic_stats': basic_stats
        }
    
    def _validate_quality(self, analysis: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        trades = analysis['trades']
        metrics = analysis['metrics']
        stats = analysis['basic_stats']
        
        validation_config = self.config['validation']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
        min_trades = validation_config['min_trades_threshold']
        max_trades = validation_config['max_trades_threshold']
        
        if len(trades) < min_trades:
            return {
                'valid': False,
                'reason': f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–¥–µ–ª–æ–∫: {len(trades)}/{min_trades}",
                'category': 'insufficient_trades'
            }
        
        if len(trades) > max_trades:
            return {
                'valid': False,
                'reason': f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}/{max_trades}",
                'category': 'excessive_trades'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        if stats['total_profit'] <= 0:
            return {
                'valid': False,
                'reason': f"–£–±—ã—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {stats['total_profit_pct']:.2f}%",
                'category': 'unprofitable'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        max_dd_threshold = validation_config['max_drawdown_threshold']
        if hasattr(metrics, 'max_drawdown_pct') and metrics.max_drawdown_pct > max_dd_threshold * 100:
            return {
                'valid': False,
                'reason': f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.max_drawdown_pct:.2f}%",
                'category': 'high_drawdown'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ win rate
        min_win_rate = validation_config['min_win_rate']
        if stats['win_rate'] < min_win_rate * 100:
            return {
                'valid': False,
                'reason': f"–ù–∏–∑–∫–∏–π win rate: {stats['win_rate']:.1f}%",
                'category': 'low_win_rate'
            }
        
        return {'valid': True}
    
    def _calculate_score(self, analysis: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        metrics = analysis['metrics']
        stats = analysis['basic_stats']
        weights = self.config['scoring']['weights']
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        sharpe_component = max(0, getattr(metrics, 'sharpe_ratio', 0)) * weights['sharpe_ratio']
        profit_component = max(0, stats['total_profit_pct'] / 100) * weights['profit_factor']
        win_rate_component = (stats['win_rate'] / 100) * weights['win_rate']
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        trade_count_bonus = self._calculate_trade_frequency_score(stats['trade_count']) * weights['trade_frequency']
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        dd_penalty = 0
        if hasattr(metrics, 'max_drawdown_pct'):
            dd_penalty = max(0, metrics.max_drawdown_pct / 100) * weights['drawdown_penalty']
        
        final_score = (
            sharpe_component +
            profit_component +
            win_rate_component +
            trade_count_bonus -
            dd_penalty
        )
        
        return max(0, final_score)
    
    def _calculate_trade_frequency_score(self, trade_count: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —á–∞—Å—Ç–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        optimal_range = self.config['scoring']['optimal_trade_range']
        min_optimal, max_optimal = optimal_range
        
        if min_optimal <= trade_count <= max_optimal:
            return 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        elif trade_count < min_optimal:
            # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —Ä–µ–¥–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
            return trade_count / min_optimal
        else:
            # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
            excess = trade_count - max_optimal
            penalty = min(0.8, excess / max_optimal)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ 80%
            return max(0.2, 1.0 - penalty)
    
    def _get_penalty_score(self, category: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à—Ç—Ä–∞—Ñ–Ω—É—é –æ—Ü–µ–Ω–∫—É."""
        penalties = self.config['scoring']['penalties']
        return penalties.get(category, penalties['default'])
    
    def _get_empty_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
        class EmptyMetrics:
            def __init__(self):
                self.sharpe_ratio = 0.0
                self.sortino_ratio = 0.0
                self.max_drawdown_pct = 0.0
        return EmptyMetrics()
    
    def _get_empty_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        return {
            'total_profit': 0.0,
            'total_profit_pct': 0.0,
            'trade_count': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'win_rate': 0.0,
            'avg_trade': 0.0
        }


class SignalGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(f"{__name__}.SignalGenerator")
        self.current_position = None  # None, "LONG", "SHORT"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.generation_count = 0
        self.successful_generations = 0
        
    def generate_signals(self, candidate: Dict, data: pd.DataFrame) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        
        Returns:
            List[{"timestamp": datetime, "signal": str, "price": float}]
            –≥–¥–µ signal in ["LONG_ENTRY", "LONG_EXIT", "SHORT_ENTRY", "SHORT_EXIT", "HOLD"]
        """
        self.generation_count += 1
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self.current_position = None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            enriched_data = self._add_indicators(data.copy(), candidate['indicators'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤–∏–ª–∏—Å—å
            new_columns = [col for col in enriched_data.columns if col not in data.columns]
            if len(candidate['indicators']) > 0 and len(new_columns) == 0:
                self.logger.warning(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å! –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {list(candidate['indicators'].keys())}")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if self.generation_count % 100 == 1:  # –ö–∞–∂–¥—ã–µ 100 –ø–æ–∫–æ–ª–µ–Ω–∏–π
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {new_columns}")
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            rules = self._parse_trading_rules(candidate['trading_rules'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = []
            loop_iterations = 0
            holds_count = 0
            
            for i in range(len(enriched_data)):
                if i < self.config['signal_generation']['min_history_bars']:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                
                loop_iterations += 1
                row = enriched_data.iloc[i]
                signal = self._evaluate_rules(rules, row, enriched_data, i, self.current_position)
                
                if signal == "HOLD":
                    holds_count += 1
                else:
                    signals.append({
                        'timestamp': row.name,
                        'signal': signal,
                        'price': row['Close']
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                    if signal in ["LONG_ENTRY"]:
                        self.current_position = "LONG"
                    elif signal in ["SHORT_ENTRY"]:
                        self.current_position = "SHORT"
                    elif signal in ["LONG_EXIT", "SHORT_EXIT"]:
                        self.current_position = None
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            if len(signals) > 0:
                self.successful_generations += 1
            
            if len(signals) == 0 and loop_iterations > 0:
                if self.generation_count % 50 == 0:  # –ö–∞–∂–¥—ã–µ 50 –ø–æ–∫–æ–ª–µ–Ω–∏–π
                    self.logger.warning(
                        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è #{self.generation_count}: –ù–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞! –ò—Ç–µ—Ä–∞—Ü–∏–π: {loop_iterations}, "
                        f"HOLD: {holds_count}, –£—Å–ª–æ–≤–∏—è: {len(rules['long_entry']) + len(rules['short_entry'])}"
                    )
            elif self.generation_count % 200 == 0:  # –ö–∞–∂–¥—ã–µ 200 –ø–æ–∫–æ–ª–µ–Ω–∏–π - —É—Å–ø–µ—à–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                success_rate = (self.successful_generations / self.generation_count) * 100
                self.logger.info(
                    f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.successful_generations}/{self.generation_count} "
                    f"({success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö)"
                )
            
            return signals
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ #{self.generation_count}: {e}")
            return []
    
    def _add_indicators(self, data: pd.DataFrame, indicators: Dict) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º."""
        enriched_data = data.copy()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç NaN –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        clean_data = data.dropna().copy()
        if len(clean_data) < 50:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            self.logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ NaN")
            return enriched_data
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –æ—Ç yfinance
        if isinstance(clean_data.columns, pd.MultiIndex):
            clean_data.columns = clean_data.columns.droplevel(1)
            enriched_data.columns = enriched_data.columns.droplevel(1) if isinstance(enriched_data.columns, pd.MultiIndex) else enriched_data.columns
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫)
        try:
            close = clean_data['Close'].astype(float).values
            high = clean_data['High'].astype(float).values
            low = clean_data['Low'].astype(float).values
            volume = clean_data['Volume'].astype(float).values if 'Volume' in clean_data.columns else None
        except KeyError as e:
            self.logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞: {e}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(clean_data.columns)}")
            return enriched_data
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return enriched_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–∏–≤–æ–≤
        if len(close) != len(high) or len(close) != len(low):
            self.logger.error("–ù–µ–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–æ–≤ OHLC")
            return enriched_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –º–∞—Å—Å–∏–≤–æ–≤ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–º–∏
        if len(close.shape) > 1:
            self.logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–µ")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è TA-Lib
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ç–∏–≥—É–æ—É—Å–Ω—ã–º–∏
        close = np.ascontiguousarray(close.flatten(), dtype=np.float64)
        high = np.ascontiguousarray(high.flatten(), dtype=np.float64)
        low = np.ascontiguousarray(low.flatten(), dtype=np.float64)
        if volume is not None:
            volume = np.ascontiguousarray(volume.flatten(), dtype=np.float64)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TA-Lib —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        try:
            test_sma = talib.SMA(close[:100], timeperiod=10)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç
        except Exception as e:
            self.logger.error(f"TA-Lib –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return enriched_data
        
        for indicator_name, params in indicators.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                min_periods = params.get('timeperiod', 30) if 'timeperiod' in params else 30
                if len(close) < min_periods + 10:  # +10 –¥–ª—è –∑–∞–ø–∞—Å–∞
                    self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {indicator_name}: {len(close)} < {min_periods + 10}")
                    continue
                    
                if hasattr(talib, indicator_name.upper()):
                    indicator_func = getattr(talib, indicator_name.upper())
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
                    if indicator_name.upper() == 'RSI':
                        result = indicator_func(close, timeperiod=params.get('timeperiod', 14))
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        enriched_data['RSI'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'MACD':
                        macd, macdsignal, macdhist = indicator_func(
                            close, 
                            fastperiod=params.get('fastperiod', 12),
                            slowperiod=params.get('slowperiod', 26),
                            signalperiod=params.get('signalperiod', 9)
                        )
                        enriched_data['MACD'] = pd.Series(macd, index=clean_data.index)
                        enriched_data['MACD_signal'] = pd.Series(macdsignal, index=clean_data.index)
                        enriched_data['MACD_hist'] = pd.Series(macdhist, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'SMA':
                        result = indicator_func(close, timeperiod=params.get('timeperiod', 20))
                        enriched_data['SMA'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'EMA':
                        result = indicator_func(close, timeperiod=params.get('timeperiod', 20))
                        enriched_data['EMA'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'BBANDS':
                        upper, middle, lower = indicator_func(
                            close,
                            timeperiod=params.get('timeperiod', 20),
                            nbdevup=params.get('nbdevup', 2),
                            nbdevdn=params.get('nbdevdn', 2)
                        )
                        enriched_data['BB_upper'] = pd.Series(upper, index=clean_data.index)
                        enriched_data['BB_middle'] = pd.Series(middle, index=clean_data.index)
                        enriched_data['BB_lower'] = pd.Series(lower, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'STOCH':
                        slowk, slowd = indicator_func(
                            high, low, close,
                            fastk_period=params.get('fastk_period', 14),
                            slowk_period=params.get('slowk_period', 3),
                            slowd_period=params.get('slowd_period', 3)
                        )
                        enriched_data['STOCH_k'] = pd.Series(slowk, index=clean_data.index)
                        enriched_data['STOCH_d'] = pd.Series(slowd, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'ADX':
                        result = indicator_func(high, low, close, timeperiod=params.get('timeperiod', 14))
                        enriched_data['ADX'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'CCI':
                        result = indicator_func(high, low, close, timeperiod=params.get('timeperiod', 14))
                        enriched_data['CCI'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'MFI':
                        if volume is not None:
                            result = indicator_func(high, low, close, volume, timeperiod=params.get('timeperiod', 14))
                            enriched_data['MFI'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'WILLR':
                        result = indicator_func(high, low, close, timeperiod=params.get('timeperiod', 14))
                        enriched_data['WILLR'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'ATR':
                        result = indicator_func(high, low, close, timeperiod=params.get('timeperiod', 14))
                        enriched_data['ATR'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'OBV':
                        if volume is not None:
                            result = indicator_func(close, volume)
                            enriched_data['OBV'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'TEMA':
                        result = indicator_func(close, timeperiod=params.get('timeperiod', 30))
                        enriched_data['TEMA'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'DEMA':
                        result = indicator_func(close, timeperiod=params.get('timeperiod', 30))
                        enriched_data['DEMA'] = pd.Series(result, index=clean_data.index)
                    
                    elif indicator_name.upper() == 'KAMA':
                        result = indicator_func(close, timeperiod=params.get('timeperiod', 30))
                        enriched_data['KAMA'] = pd.Series(result, index=clean_data.index)
                    
                    else:
                        self.logger.warning(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {indicator_name} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        
                else:
                    self.logger.warning(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {indicator_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TA-Lib")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ {indicator_name}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ
        return enriched_data.reindex(data.index)
    
    def _parse_trading_rules(self, rules: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        parsed_rules = {
            'long_entry': rules.get('long_entry_conditions', []),
            'long_exit': rules.get('long_exit_conditions', []),
            'short_entry': rules.get('short_entry_conditions', []),
            'short_exit': rules.get('short_exit_conditions', []),
            'logic_operator': rules.get('logic_operator', 'AND')
        }
        return parsed_rules
    
    def _evaluate_rules(self, rules: Dict, row: pd.Series, data: pd.DataFrame, 
                       index: int, current_position: Optional[str]) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if current_position == "LONG":
            if self._evaluate_conditions(rules['long_exit'], row, data, index, rules['logic_operator']):
                return "LONG_EXIT"
        elif current_position == "SHORT":
            if self._evaluate_conditions(rules['short_exit'], row, data, index, rules['logic_operator']):
                return "SHORT_EXIT"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)
        if current_position is None:
            if self._evaluate_conditions(rules['long_entry'], row, data, index, rules['logic_operator']):
                return "LONG_ENTRY"
            elif self._evaluate_conditions(rules['short_entry'], row, data, index, rules['logic_operator']):
                return "SHORT_ENTRY"
        
        return "HOLD"
    
    def _evaluate_conditions(self, conditions: List[Dict], row: pd.Series, 
                           data: pd.DataFrame, index: int, logic_operator: str) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π."""
        if not conditions:
            return False
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ª–æ–≤–∏–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—É–±–∏—Ä–∞–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
        pass  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        
        results = []
        for condition in conditions:
            result = self._evaluate_single_condition(condition, row, data, index)
            results.append(result)
        
        if logic_operator == "AND":
            return all(results)
        elif logic_operator == "OR":
            return any(results)
        else:
            return all(results)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é AND
    
    def _evaluate_single_condition(self, condition: Dict, row: pd.Series, 
                                 data: pd.DataFrame, index: int) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ."""
        try:
            condition_type = condition['type']
            
            if condition_type == 'threshold':
                return self._evaluate_threshold(condition, row)
            elif condition_type == 'crossover':
                return self._evaluate_crossover(condition, data, index)
            elif condition_type == 'divergence':
                return self._evaluate_divergence(condition, data, index)
            else:
                return False
                
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è {condition}: {e}")
            return False
    
    def _evaluate_threshold(self, condition: Dict, row: pd.Series) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è."""
        indicator = condition['indicator']
        operator = condition['operator']
        threshold = condition['threshold']
        
        if indicator not in row:
            return False
        
        value = row[indicator]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∞–ª—è—Ä–æ–º
        if hasattr(value, '__len__') and not isinstance(value, str):
            # –ï—Å–ª–∏ —ç—Ç–æ Series –∏–ª–∏ –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if hasattr(value, 'iloc'):
                value = value.iloc[-1] if len(value) > 0 else np.nan
            else:
                value = value[-1] if len(value) > 0 else np.nan
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
        if pd.isna(value):
            return False
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            value = float(value)
            threshold = float(threshold)
        except (ValueError, TypeError):
            return False
        
        if operator == '>':
            return value > threshold
        elif operator == '<':
            return value < threshold
        elif operator == '>=':
            return value >= threshold
        elif operator == '<=':
            return value <= threshold
        elif operator == '==':
            return abs(value - threshold) < 1e-6
        else:
            return False
    
    def _evaluate_crossover(self, condition: Dict, data: pd.DataFrame, index: int) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è."""
        if index < 1:
            return False
        
        indicator1 = condition['indicator1']
        indicator2 = condition['indicator2']
        direction = condition.get('direction', 'above')  # 'above' –∏–ª–∏ 'below'
        
        if indicator1 not in data.columns or indicator2 not in data.columns:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–∫–∞–ª—è—Ä—ã
        def safe_scalar(val):
            if hasattr(val, '__len__') and not isinstance(val, str):
                if hasattr(val, 'iloc'):
                    return val.iloc[-1] if len(val) > 0 else np.nan
                else:
                    return val[-1] if len(val) > 0 else np.nan
            return val
        
        try:
            current_val1 = safe_scalar(data.iloc[index][indicator1])
            current_val2 = safe_scalar(data.iloc[index][indicator2])
            prev_val1 = safe_scalar(data.iloc[index-1][indicator1])
            prev_val2 = safe_scalar(data.iloc[index-1][indicator2])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
            current_val1 = float(current_val1)
            current_val2 = float(current_val2)
            prev_val1 = float(prev_val1)
            prev_val2 = float(prev_val2)
            
        except (ValueError, TypeError, IndexError):
            return False
        
        if any(pd.isna([current_val1, current_val2, prev_val1, prev_val2])):
            return False
        
        if direction == 'above':
            return prev_val1 <= prev_val2 and current_val1 > current_val2
        elif direction == 'below':
            return prev_val1 >= prev_val2 and current_val1 < current_val2
        else:
            return False
    
    def _evaluate_divergence(self, condition: Dict, data: pd.DataFrame, index: int) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
        lookback = condition.get('lookback', 10)
        if index < lookback:
            return False
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π
        return False


class LightweightBacktester:
    """
    –õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä –±–µ–∑ —Ç—è–∂–µ–ª–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playground.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏.
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.initial_balance = config.get('performance', {}).get('initial_balance', 10000)
        self.commission = config.get('performance', {}).get('commission', 0.001)
        
    def run_backtest(self, signals: List[Dict], data: pd.DataFrame) -> Dict:
        """
        –ë—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.
        
        Returns:
            {"success": bool, "trades": [...], "metrics": {...}}
        """
        try:
            trades = []
            balance = self.initial_balance
            position = None
            position_size = 0
            entry_price = 0
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            signals_dict = {sig['timestamp']: sig for sig in signals}
            
            for timestamp, row in data.iterrows():
                signal_data = signals_dict.get(timestamp)
                
                if signal_data:
                    signal_type = signal_data['signal']
                    price = float(row['Close'])
                    
                    if signal_type in ['LONG_ENTRY', 'SHORT_ENTRY'] and position is None:
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        position = 'LONG' if signal_type == 'LONG_ENTRY' else 'SHORT'
                        position_size = (balance * 0.02) / price  # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                        entry_price = price
                        balance -= position_size * price * (1 + self.commission)
                        
                    elif signal_type in ['LONG_EXIT', 'SHORT_EXIT'] and position is not None:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        exit_price = price

                        profit = 0.0
                        commission_cost = 0.0
                        
                        if position == 'LONG':
                            profit = (exit_price - entry_price) * position_size
                        elif position == 'SHORT':
                            profit = (entry_price - exit_price) * position_size

                        # –ö–æ–º–∏—Å—Å–∏—è —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
                        commission_cost = (entry_price + exit_price) * position_size * self.commission

                        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                        balance += profit - commission_cost
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                        trades.append({
                            'entry_time': timestamp,  # –£–ø—Ä–æ—â–∞–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞
                            'exit_time': timestamp,
                            'direction': position,
                            'entry_price': entry_price,
                            'exit_price': exit_price,
                            'size': position_size,
                            'profit': profit,
                            'commission': position_size * entry_price * self.commission * 2
                        })
                        
                        position = None
                        position_size = 0
                        entry_price = 0
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_profit = sum(t['profit'] for t in trades)
            winning_trades = sum(1 for t in trades if t['profit'] > 0)
            total_trades = len(trades)
            
            metrics = {
                'total_profit': total_profit,
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'win_rate': (winning_trades / total_trades) if total_trades > 0 else 0,
                'final_balance': balance + total_profit,
                'return_pct': ((balance + total_profit) / self.initial_balance - 1) * 100
            }
            
            return {
                'success': True,
                'trades': trades,
                'metrics': metrics
            }
            
        except Exception as e:
            return {
                'success': False,
                'trades': [],
                'metrics': {},
                'error': str(e)
            }


class DynamicStrategyRunner:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
    """
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(f"{__name__}.DynamicStrategyRunner")
        
    def run_backtest(self, signals: List[Dict], data: pd.DataFrame) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
        
        Returns:
            {"success": bool, "trades": [...], "error": str}
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            temp_strategy = self._create_temp_strategy(signals)
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
            bot_config = {
                "bot_name": f"discovery_test_{int(time.time())}",
                "strategy_file": "dummy",  # –õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∏–∂–µ
                "symbol": self.config['data_settings']['default_ticker'],
                "risk_config_file": '../configs/live_default.json',
                "generate_chart": False
            }
            
            # –°–æ–∑–¥–∞—ë–º –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞ Playground –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
            class CustomPlayground(Playground):
                def __init__(self, ohlcv_data, bot_config, bot_name, custom_strategy=None):
                    self.custom_strategy = custom_strategy
                    super().__init__(ohlcv_data, bot_config, bot_name)
                    
                def _prepare_strategy(self):
                    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    if self.custom_strategy:
                        return self.custom_strategy
                    else:
                        return super()._prepare_strategy()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
            backtest = CustomPlayground(
                ohlcv_data=data,
                bot_config=bot_config,
                bot_name=bot_config["bot_name"],
                custom_strategy=temp_strategy
            )
            backtest.run()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            trade_history = backtest.risk_manager.performance_tracker.trade_history
            trade_dicts = [trade.__dict__ for trade in trade_history]
            
            return {
                'success': True,
                'trades': trade_dicts
            }
            
        except Exception as e:
            return {
                'success': False,
                'trades': [],
                'error': str(e)
            }
    
    def _create_temp_strategy(self, signals: List[Dict]):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        
        class TempStrategy:
            def __init__(self, signals_list):
                self.signals = {sig['timestamp']: sig for sig in signals_list}
            
            def analyze(self, data):
                """
                –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç Playground.
                –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º.
                """
                current_time = data.index[-1]
                signal_data = self.signals.get(current_time)
                if signal_data:
                    signal_type = signal_data['signal']
                    price = signal_data['price']
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—à–∏ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç Playground
                    if signal_type in ['LONG_ENTRY', 'SHORT_ENTRY']:
                        return {
                            'signal': 'buy',
                            'target_tp_price': price * 1.02  # 2% –ø—Ä–∏–±—ã–ª—å
                        }
                
                # –ù–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                return None
        
        return TempStrategy(signals)


class EvolutionaryStrategyDiscovery:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —á–µ—Ä–µ–∑ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.
    """
    
    def __init__(self, config_path: str):
        self.config = self._load_config(config_path)
        self.logger = self._setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.objective = StrategyDiscoveryObjective(self.config)
        self.indicator_pool = self._build_indicator_pool()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
        self.generation_stats = []
        self.best_ever_individual = None
        self.best_ever_score = -float('inf')
        
        self.logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(self.indicator_pool)}")
        self.logger.info(f"‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏: {self.config.get('performance', {}).get('max_workers', mp.cpu_count())}")
        
    def _load_config(self, path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        level = getattr(logging, self.config['logging']['level'])
        logging.basicConfig(
            level=level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        return logging.getLogger(__name__)
    
    def _build_indicator_pool(self) -> Dict:
        """–°—Ç—Ä–æ–∏—Ç –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        pool = {}
        enabled_indicators = self.config['indicators']['enabled_indicators']
        
        for indicator in enabled_indicators:
            try:
                if hasattr(talib, indicator.upper()):
                    pool[indicator] = self.config['indicators']['parameters'].get(
                        indicator, 
                        self._get_default_params(indicator)
                    )
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {indicator}: {e}")
        
        return pool
    
    def _get_default_params(self, indicator: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞."""
        defaults = {
            'RSI': {'timeperiod': {'min': 10, 'max': 30, 'type': 'int'}},
            'MACD': {'fastperiod': {'min': 8, 'max': 15, 'type': 'int'}, 'slowperiod': {'min': 20, 'max': 30, 'type': 'int'}, 'signalperiod': {'min': 7, 'max': 12, 'type': 'int'}},
            'SMA': {'timeperiod': {'min': 10, 'max': 50, 'type': 'int'}},
            'EMA': {'timeperiod': {'min': 10, 'max': 50, 'type': 'int'}},
            'BBANDS': {'timeperiod': {'min': 15, 'max': 25, 'type': 'int'}, 'nbdevup': {'min': 1.5, 'max': 2.5, 'type': 'float'}, 'nbdevdn': {'min': 1.5, 'max': 2.5, 'type': 'float'}},
            'STOCH': {'fastk_period': {'min': 10, 'max': 20, 'type': 'int'}, 'slowk_period': {'min': 3, 'max': 10, 'type': 'int'}, 'slowd_period': {'min': 3, 'max': 10, 'type': 'int'}},
            'ADX': {'timeperiod': {'min': 10, 'max': 20, 'type': 'int'}},
            'CCI': {'timeperiod': {'min': 15, 'max': 25, 'type': 'int'}},
            'MFI': {'timeperiod': {'min': 10, 'max': 20, 'type': 'int'}},
            'WILLR': {'timeperiod': {'min': 10, 'max': 20, 'type': 'int'}},
            'ATR': {'timeperiod': {'min': 10, 'max': 20, 'type': 'int'}},
            'OBV': {},
            'TEMA': {'timeperiod': {'min': 15, 'max': 35, 'type': 'int'}},
            'DEMA': {'timeperiod': {'min': 15, 'max': 35, 'type': 'int'}},
            'KAMA': {'timeperiod': {'min': 15, 'max': 35, 'type': 'int'}}
        }
        return defaults.get(indicator, {})
    
    def generate_individual(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω—É –æ—Å–æ–±—å (—Å—Ç—Ä–∞—Ç–µ–≥–∏—é-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞)."""
        rules_config = self.config['rule_generation']
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π
        num_conditions = random.randint(
            rules_config['min_conditions'], 
            rules_config['max_conditions']
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        selected_indicators = random.sample(
            list(self.indicator_pool.keys()), 
            min(num_conditions, len(self.indicator_pool))
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = {}
        for indicator in selected_indicators:
            indicators[indicator] = self._generate_indicator_params(indicator)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        trading_rules = self._generate_trading_rules(selected_indicators, num_conditions)
        
        return {
            "indicators": indicators,
            "trading_rules": trading_rules,
            "metadata": {
                "created_at": datetime.now().isoformat(),
                "num_conditions": num_conditions,
                "num_indicators": len(selected_indicators)
            }
        }
    
    def _generate_indicator_params(self, indicator: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞."""
        param_specs = self.indicator_pool.get(indicator, {})
        params = {}
        
        for param_name, spec in param_specs.items():
            if spec['type'] == 'int':
                params[param_name] = random.randint(spec['min'], spec['max'])
            elif spec['type'] == 'float':
                params[param_name] = random.uniform(spec['min'], spec['max'])
            elif spec['type'] == 'categorical':
                params[param_name] = random.choice(spec['choices'])
        
        return params
    
    def _generate_trading_rules(self, indicators: List[str], num_conditions: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞."""
        rules_config = self.config['rule_generation']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        long_entry = self._generate_conditions(indicators, num_conditions, 'long_entry')
        short_entry = self._generate_conditions(indicators, num_conditions, 'short_entry')
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã—Ö–æ–¥–∞ (–º–æ–∂–Ω–æ —É—Å–ª–æ–∂–∏—Ç—å)
        long_exit = self._generate_exit_conditions(indicators, 'long_exit')
        short_exit = self._generate_exit_conditions(indicators, 'short_exit')
        
        return {
            'long_entry_conditions': long_entry,
            'long_exit_conditions': long_exit,
            'short_entry_conditions': short_entry,
            'short_exit_conditions': short_exit,
            'logic_operator': random.choice(['AND', 'OR', 'OR']),  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å OR
            'risk_management': self._generate_risk_rules()
        }
        
    def _generate_exit_conditions(self, indicators: List[str], signal_type: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        exit_conditions = []
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        priority_indicators = ['RSI', 'STOCH_k', 'STOCH_d', 'CCI', 'MFI', 'WILLR']
        
        # –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Å–ø–∏—Å–∫–µ
        available_priority = [ind for ind in priority_indicators if ind in indicators]
        
        if available_priority:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicator = available_priority[0]
            
            if 'long_exit' in signal_type:
                # –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–Ω–≥–∞ - –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ
                if indicator == 'RSI':
                    threshold = random.uniform(70, 85)
                    operator = '>'
                elif indicator in ['STOCH_k', 'STOCH_d']:
                    threshold = random.uniform(80, 95)
                    operator = '>'
                elif indicator == 'CCI':
                    threshold = random.uniform(100, 200)
                    operator = '>'
                elif indicator == 'MFI':
                    threshold = random.uniform(70, 85)
                    operator = '>'
                elif indicator == 'WILLR':
                    threshold = random.uniform(-20, -10)
                    operator = '>'
                else:
                    threshold = 70
                    operator = '>'
            else:
                # –í—ã—Ö–æ–¥ –∏–∑ —à–æ—Ä—Ç–∞ - –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ
                if indicator == 'RSI':
                    threshold = random.uniform(15, 30)
                    operator = '<'
                elif indicator in ['STOCH_k', 'STOCH_d']:
                    threshold = random.uniform(5, 20)
                    operator = '<'
                elif indicator == 'CCI':
                    threshold = random.uniform(-200, -100)
                    operator = '<'
                elif indicator == 'MFI':
                    threshold = random.uniform(15, 30)
                    operator = '<'
                elif indicator == 'WILLR':
                    threshold = random.uniform(-90, -80)
                    operator = '<'
                else:
                    threshold = 30
                    operator = '<'
            
            exit_conditions.append({
                'type': 'threshold',
                'indicator': indicator,
                'operator': operator,
                'threshold': threshold
            })
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if indicators:
                indicator = random.choice(indicators)
                exit_conditions.append({
                    'type': 'threshold',
                    'indicator': indicator,
                    'operator': '>' if 'long_exit' in signal_type else '<',
                    'threshold': self._generate_threshold_value(indicator, signal_type)
                })
        
        return exit_conditions
    
    def _generate_conditions(self, indicators: List[str], num_conditions: int, signal_type: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞."""
        conditions = []
        rules_config = self.config['rule_generation']
        
        for _ in range(min(num_conditions, len(indicators))):
            indicator = random.choice(indicators)
            condition_type = random.choice(['threshold', 'crossover'] if rules_config['enable_crossovers'] else ['threshold'])
            
            if condition_type == 'threshold':
                # –ü—Ä–æ–±–ª–µ–º–∞ –∑–¥–µ—Å—å! –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                # –ù–æ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!
                condition = {
                    'type': 'threshold',
                    'indicator': indicator,  # –ù–∞–ø—Ä–∏–º–µ—Ä, "RSI" –≤–º–µ—Å—Ç–æ "RSI_14"
                    'operator': random.choice(['>', '<', '>=', '<=']),
                    'threshold': self._generate_threshold_value(indicator, signal_type)
                }
                self.logger.debug(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º threshold —É—Å–ª–æ–≤–∏–µ: {condition}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —É—Å–ª–æ–≤–∏–π –∫–∞–∂–¥—ã–µ 1000 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                if hasattr(self, 'condition_debug_count'):
                    self.condition_debug_count += 1
                else:
                    self.condition_debug_count = 1
                
                if self.condition_debug_count % 1000 == 1:
                    self.logger.info(f"üîç –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏—è: {condition['indicator']} {condition['operator']} {condition['threshold']:.2f}")
                
                conditions.append(condition)
            elif condition_type == 'crossover':
                if len(indicators) > 1:
                    other_indicator = random.choice([ind for ind in indicators if ind != indicator])
                    condition = {
                        'type': 'crossover',
                        'indicator1': indicator,
                        'indicator2': other_indicator,
                        'direction': random.choice(['above', 'below'])
                    }
                    self.logger.debug(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º crossover —É—Å–ª–æ–≤–∏–µ: {condition}")
                    conditions.append(condition)
        
        return conditions
    
    def _generate_threshold_value(self, indicator: str, signal_type: str) -> float:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        ranges = {
            'RSI': {
                'long': (20, 45),    # Oversold-neutral –∑–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–æ–Ω–≥
                'short': (55, 80)    # Neutral-overbought –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —à–æ—Ä—Ç
            },
            'MACD': {
                'long': (-0.01, 0.01),   # –û–∫–æ–ª–æ –Ω—É–ª—è
                'short': (-0.01, 0.01)
            },
            'SMA': {
                'long': (0.98, 1.02),    # ¬±2% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                'short': (0.98, 1.02)
            },
            'EMA': {
                'long': (0.95, 1.05),    # ¬±5% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                'short': (0.95, 1.05)
            },
            'CCI': {
                'long': (-200, 0),       # Oversold –∑–æ–Ω–∞
                'short': (0, 200)        # Overbought –∑–æ–Ω–∞
            },
            'WILLR': {
                'long': (-80, -20),      # Williams %R oversold
                'short': (-80, -20)
            },
            'ADX': {
                'long': (20, 40),        # –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–Ω–¥
                'short': (20, 40)
            },
            'MFI': {
                'long': (20, 40),        # Money Flow oversold
                'short': (60, 80)        # Money Flow overbought
            },
            'ATR': {
                'long': (100, 2000),     # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è BTC
                'short': (100, 2000)
            },
            'STOCH_k': {
                'long': (10, 30),        # Stochastic oversold
                'short': (70, 90)        # Stochastic overbought
            },
            'STOCH_d': {
                'long': (10, 30),
                'short': (70, 90)
            },
            'BB_upper': {
                'long': (0.98, 1.02),    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã
                'short': (0.98, 1.02)
            },
            'BB_lower': {
                'long': (0.98, 1.02),
                'short': (0.98, 1.02)
            },
            'BB_middle': {
                'long': (0.98, 1.02),
                'short': (0.98, 1.02)
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        signal_key = 'long' if 'long' in signal_type else 'short'
        
        if indicator in ranges:
            range_values = ranges[indicator][signal_key]
            return random.uniform(range_values[0], range_values[1])
        else:
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if 'long' in signal_type:
                return random.uniform(20, 40)  # –ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–Ω–≥–∞
            else:
                return random.uniform(60, 80)  # –í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–æ—Ä—Ç–∞
    
    def _generate_risk_rules(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."""
        risk_config = self.config['risk_management']
        
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ª–∏–±–æ SL, –ª–∏–±–æ TP (–Ω–µ –æ–±–∞)
        use_stop_loss = random.random() < 0.5
        
        if use_stop_loss:
            return {
                'stop_loss': {
                    'type': random.choice(['fixed', 'trailing']),
                    'value': random.uniform(risk_config['stop_loss_range'][0], risk_config['stop_loss_range'][1])
                },
                'take_profit': {'type': 'none'}
            }
        else:
            return {
                'stop_loss': {'type': 'none'},
                'take_profit': {
                    'type': 'fixed',
                    'value': random.uniform(risk_config['take_profit_range'][0], risk_config['take_profit_range'][1])
                }
            }
    
    def mutate(self, individual: Dict) -> Dict:
        """–ú—É—Ç–∏—Ä—É–µ—Ç –æ—Å–æ–±—å (–æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç–æ–º–∫–∞)."""
        mutated = copy.deepcopy(individual)
        mutation_config = self.config['evolution']['mutation']
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –º—É—Ç–∞—Ü–∏–∏
        mutation_type = random.choice([
            'modify_indicator_param',
            'modify_threshold',
            'change_logic_operator',
            'modify_risk_rules'
        ])
        
        if mutation_type == 'modify_indicator_param':
            self._mutate_indicator_param(mutated)
        elif mutation_type == 'modify_threshold':
            self._mutate_threshold(mutated)
        elif mutation_type == 'change_logic_operator':
            self._mutate_logic_operator(mutated)
        elif mutation_type == 'modify_risk_rules':
            self._mutate_risk_rules(mutated)
        
        return mutated
    
    def _mutate_indicator_param(self, individual: Dict):
        """–ú—É—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞."""
        if not individual['indicators']:
            return
        
        indicator = random.choice(list(individual['indicators'].keys()))
        params = individual['indicators'][indicator]
        
        if params:
            param_name = random.choice(list(params.keys()))
            param_spec = self.indicator_pool.get(indicator, {}).get(param_name, {})
            
            if param_spec.get('type') == 'int':
                current_value = params[param_name]
                step = random.choice([-1, 1])
                new_value = max(param_spec['min'], min(param_spec['max'], current_value + step))
                params[param_name] = new_value
            elif param_spec.get('type') == 'float':
                current_value = params[param_name]
                step = random.uniform(-0.1, 0.1)
                new_value = max(param_spec['min'], min(param_spec['max'], current_value + step))
                params[param_name] = round(new_value, 3)
    
    def _mutate_threshold(self, individual: Dict):
        """–ú—É—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö."""
        rules = individual['trading_rules']
        all_conditions = (
            rules.get('long_entry_conditions', []) +
            rules.get('short_entry_conditions', []) +
            rules.get('long_exit_conditions', []) +
            rules.get('short_exit_conditions', [])
        )
        
        threshold_conditions = [c for c in all_conditions if c.get('type') == 'threshold']
        if threshold_conditions:
            condition = random.choice(threshold_conditions)
            current_threshold = condition['threshold']
            # –ú—É—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±10%
            mutation_factor = random.uniform(0.9, 1.1)
            condition['threshold'] = round(current_threshold * mutation_factor, 3)
    
    def _mutate_logic_operator(self, individual: Dict):
        """–ú—É—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä."""
        individual['trading_rules']['logic_operator'] = random.choice(['AND', 'OR'])
    
    def _mutate_risk_rules(self, individual: Dict):
        """–ú—É—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."""
        individual['trading_rules']['risk_management'] = self._generate_risk_rules()
    
    def crossover(self, parent1: Dict, parent2: Dict) -> Tuple[Dict, Dict]:
        """–°–∫—Ä–µ—â–∏–≤–∞–µ—Ç –¥–≤—É—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π."""
        child1 = copy.deepcopy(parent1)
        child2 = copy.deepcopy(parent2)
        
        # –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self._crossover_indicators(child1, child2, parent1, parent2)
        
        # –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
        if random.random() < 0.5:
            child1['trading_rules'], child2['trading_rules'] = child2['trading_rules'], child1['trading_rules']
        
        return child1, child2
    
    def _crossover_indicators(self, child1: Dict, child2: Dict, parent1: Dict, parent2: Dict):
        """–°–∫—Ä–µ—â–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–µ–∂–¥—É —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏."""
        p1_indicators = set(parent1['indicators'].keys())
        p2_indicators = set(parent2['indicators'].keys())
        common_indicators = p1_indicators & p2_indicators
        
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º—Å—è –æ–±—â–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        for indicator in common_indicators:
            if random.random() < 0.5:
                child1['indicators'][indicator], child2['indicators'][indicator] = \
                    child2['indicators'][indicator], child1['indicators'][indicator]
    
    def run_evolution(self, data: pd.DataFrame) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        evolution_config = self.config['evolution']
        population_size = evolution_config['population_size']
        num_generations = evolution_config['generations']
        
        self.logger.info("üß¨ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        self.logger.info(f"üìä –ü–æ–ø—É–ª—è—Ü–∏—è: {population_size}, –ü–æ–∫–æ–ª–µ–Ω–∏—è: {num_generations}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        max_workers = self.config.get('performance', {}).get('max_workers', mp.cpu_count())
        self.logger.info(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {max_workers} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏
        population = [self.generate_individual() for _ in range(population_size)]
        
        start_time = time.time()
        
        with tqdm(total=num_generations, desc="–≠–≤–æ–ª—é—Ü–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏–π") as pbar:
            for generation in range(num_generations):
                gen_start_time = time.time()
                
                self.logger.info(f"üß¨ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ {generation}: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ {population_size} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                
                # –û—Ü–µ–Ω–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
                fitness_scores = []
                successful_individuals = 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä)
                max_workers = self.config.get('performance', {}).get('max_workers', mp.cpu_count())
                self.logger.info(f"  üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ {population_size} –æ—Å–æ–±–µ–π –Ω–∞ {max_workers} –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å—ã
                data_dict = {
                    'data': data.to_dict('records'),
                    'index': data.index.astype(str).tolist()
                }
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                with ProcessPoolExecutor(max_workers=max_workers) as executor:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
                    future_to_index = {
                        executor.submit(evaluate_individual_worker, individual, self.config, data_dict): i
                        for i, individual in enumerate(population)
                    }
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    fitness_scores = [0] * len(population)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
                    completed = 0
                    
                    for future in as_completed(future_to_index):
                        index = future_to_index[future]
                        try:
                            result = future.result()
                            fitness_scores[index] = result['score']
                            if result['success']:
                                successful_individuals += 1
                                
                            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            completed += 1
                            if completed % 20 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
                                self.logger.info(f"  üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed}/{population_size} –æ—Ü–µ–Ω–æ–∫")
                                
                        except Exception as e:
                            self.logger.warning(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Å–æ–±–∏ {index}: {e}")
                            fitness_scores[index] = self.config['scoring']['penalties']['critical_error']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –æ—Å–æ–±—å
                best_idx = fitness_scores.index(max(fitness_scores))
                if fitness_scores[best_idx] > self.best_ever_score:
                    self.best_ever_score = fitness_scores[best_idx]
                    self.best_ever_individual = copy.deepcopy(population[best_idx])
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                gen_stats = {
                    'generation': generation,
                    'best_score': max(fitness_scores),
                    'avg_score': np.mean(fitness_scores),
                    'successful_individuals': successful_individuals,
                    'population_size': len(population),
                    'duration': time.time() - gen_start_time
                }
                self.generation_stats.append(gen_stats)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–≤–∞–ª –ø–æ–∫–æ–ª–µ–Ω–∏—è
                if successful_individuals == 0:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–∫–æ–ª–µ–Ω–∏–µ {generation}: –≤—Å–µ –æ—Å–æ–±–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–ø—É–ª—è—Ü–∏—é")
                    population = [self.generate_individual() for _ in range(population_size)]
                else:
                    # –°–µ–ª–µ–∫—Ü–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                    population = self._evolve_population(population, fitness_scores)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                elapsed_time = time.time() - start_time
                remaining_time = (elapsed_time / (generation + 1)) * (num_generations - generation - 1)
                
                pbar.set_postfix({
                    '–õ—É—á—à–∏–π': f'{max(fitness_scores):.3f}',
                    '–£—Å–ø–µ—à–Ω—ã—Ö': f'{successful_individuals}/{population_size}',
                    'ETA': f'{timedelta(seconds=int(remaining_time))}'
                })
                pbar.update(1)
                
                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info(
                    f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ {generation:2d}: "
                    f"–ª—É—á—à–∏–π={max(fitness_scores):.3f}, "
                    f"—Å—Ä–µ–¥–Ω–∏–π={np.mean(fitness_scores):.3f}, "
                    f"—É—Å–ø–µ—à–Ω—ã—Ö={successful_individuals}/{population_size}"
                )
        
        total_duration = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'best_individual': self.best_ever_individual,
            'best_score': self.best_ever_score,
            'generation_stats': self.generation_stats,
            'total_duration_minutes': total_duration / 60,
            'total_evaluations': self.objective.evaluation_count,
            'successful_evaluations': self.objective.successful_evaluations,
            'success_rate': self.objective.successful_evaluations / self.objective.evaluation_count if self.objective.evaluation_count > 0 else 0,
            'timestamp': datetime.now().isoformat()
        }
        
        self.logger.info(f"üéâ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_duration/60:.1f} –º–∏–Ω—É—Ç")
        self.logger.info(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.best_ever_score:.3f}")
        
        return results
    
    def _evolve_population(self, population: List[Dict], fitness_scores: List[float]) -> List[Dict]:
        """–≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø–æ–ø—É–ª—è—Ü–∏—é (—Å–µ–ª–µ–∫—Ü–∏—è + –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)."""
        evolution_config = self.config['evolution']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É
        sorted_pop = sorted(zip(population, fitness_scores), key=lambda x: x[1], reverse=True)
        
        # –≠–ª–∏—Ç–∏–∑–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏—Ö
        elite_size = int(len(population) * evolution_config['elite_ratio'])
        elite = [individual for individual, _ in sorted_pop[:elite_size]]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
        new_population = elite.copy()
        
        while len(new_population) < len(population):
            # –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è
            parent1 = self._tournament_selection(sorted_pop, evolution_config['tournament_size'])
            parent2 = self._tournament_selection(sorted_pop, evolution_config['tournament_size'])
            
            # –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ
            if random.random() < evolution_config['crossover_rate']:
                child1, child2 = self.crossover(parent1, parent2)
            else:
                child1, child2 = copy.deepcopy(parent1), copy.deepcopy(parent2)
            
            # –ú—É—Ç–∞—Ü–∏—è
            if random.random() < evolution_config['mutation_rate']:
                child1 = self.mutate(child1)
            if random.random() < evolution_config['mutation_rate']:
                child2 = self.mutate(child2)
            
            new_population.extend([child1, child2])
        
        return new_population[:len(population)]
    
    def _tournament_selection(self, sorted_population: List[Tuple], tournament_size: int) -> Dict:
        """–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è."""
        tournament = random.sample(sorted_population, min(tournament_size, len(sorted_population)))
        winner = max(tournament, key=lambda x: x[1])
        return winner[0]
    
    def save_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏."""
        save_config = self.config['saving']
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        strategy_dir = Path(save_config['strategy_dir'])
        config_dir = Path(save_config['config_dir'])
        results_dir = Path(save_config['results_dir'])
        
        for directory in [strategy_dir, config_dir, results_dir]:
            directory.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if results['best_individual']:
            strategy_name = f"evolved_strategy_{timestamp}"
            
            # –ö–æ–Ω—Ñ–∏–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            config_path = config_dir / f"{strategy_name}.json"
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(results['best_individual'], f, indent=2, ensure_ascii=False)
            
            # –ö–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_code = self._generate_strategy_code(results['best_individual'], strategy_name)
            strategy_path = strategy_dir / f"{strategy_name}.py"
            with open(strategy_path, 'w', encoding='utf-8') as f:
                f.write(strategy_code)
            
            self.logger.info(f"üíæ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {strategy_path}")
            self.logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {config_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_path = results_dir / f"evolution_results_{timestamp}.json"
        with open(results_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_path}")
    
    def _generate_strategy_code(self, individual: Dict, strategy_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        code = f'''# –§–∞–π–ª: {strategy_name}.py
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
# –°–æ–∑–¥–∞–Ω–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º: {timestamp}
# –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {self.best_ever_score:.3f}

import pandas as pd
import talib
from typing import Dict, Any


class {strategy_name.title().replace('_', '')}Strategy:
    """
    –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.
    
    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(individual['indicators'].keys())}
    –£—Å–ª–æ–≤–∏–π –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö: {individual['metadata']['num_conditions']}
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.indicators = {individual['indicators']}
        self.trading_rules = {individual['trading_rules']}
        self.current_position = None
    
    def add_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º."""
        enriched_data = data.copy()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
        close = data['Close'].values
        high = data['High'].values
        low = data['Low'].values
        volume = data['Volume'].values if 'Volume' in data.columns else None
        
        for indicator_name, params in self.indicators.items():
            try:
                if hasattr(talib, indicator_name.upper()):
                    indicator_func = getattr(talib, indicator_name.upper())
                    
                    if indicator_name.upper() == 'RSI':
                        timeperiod = params.get('timeperiod', 14)
                        result = indicator_func(close, timeperiod=timeperiod)
                        enriched_data['RSI'] = result
                    
                    elif indicator_name.upper() == 'MACD':
                        macd, macdsignal, macdhist = indicator_func(
                            close, 
                            fastperiod=params.get('fastperiod', 12),
                            slowperiod=params.get('slowperiod', 26),
                            signalperiod=params.get('signalperiod', 9)
                        )
                        enriched_data['MACD'] = macd
                        enriched_data['MACD_signal'] = macdsignal
                        enriched_data['MACD_hist'] = macdhist
                    
                    elif indicator_name.upper() == 'SMA':
                        timeperiod = params.get('timeperiod', 20)
                        result = indicator_func(close, timeperiod=timeperiod)
                        enriched_data['SMA'] = result
                    
                    elif indicator_name.upper() == 'EMA':
                        timeperiod = params.get('timeperiod', 20)
                        result = indicator_func(close, timeperiod=timeperiod)
                        enriched_data['EMA'] = result
                    
                    elif indicator_name.upper() == 'BBANDS':
                        upper, middle, lower = indicator_func(
                            close,
                            timeperiod=params.get('timeperiod', 20),
                            nbdevup=params.get('nbdevup', 2),
                            nbdevdn=params.get('nbdevdn', 2)
                        )
                        enriched_data['BB_upper'] = upper
                        enriched_data['BB_middle'] = middle
                        enriched_data['BB_lower'] = lower
                    
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {{e}}")
        
        return enriched_data
    
    def generate_signals(self, data: pd.DataFrame) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.
        
        Returns:
            str: "LONG_ENTRY", "LONG_EXIT", "SHORT_ENTRY", "SHORT_EXIT", "HOLD"
        """
        if len(data) < 20:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            return "HOLD"
        
        enriched_data = self.add_indicators(data)
        current_row = enriched_data.iloc[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if self.current_position == "LONG":
            if self._check_conditions(self.trading_rules['long_exit_conditions'], current_row, enriched_data):
                self.current_position = None
                return "LONG_EXIT"
        elif self.current_position == "SHORT":
            if self._check_conditions(self.trading_rules['short_exit_conditions'], current_row, enriched_data):
                self.current_position = None
                return "SHORT_EXIT"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)
        if self.current_position is None:
            if self._check_conditions(self.trading_rules['long_entry_conditions'], current_row, enriched_data):
                self.current_position = "LONG"
                return "LONG_ENTRY"
            elif self._check_conditions(self.trading_rules['short_entry_conditions'], current_row, enriched_data):
                self.current_position = "SHORT"
                return "SHORT_ENTRY"
        
        return "HOLD"
    
    def _check_conditions(self, conditions: list, current_row: pd.Series, data: pd.DataFrame) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π."""
        if not conditions:
            return False
        
        results = []
        for condition in conditions:
            result = self._evaluate_condition(condition, current_row, data)
            results.append(result)
        
        logic_op = self.trading_rules.get('logic_operator', 'AND')
        if logic_op == 'AND':
            return all(results)
        else:
            return any(results)
    
    def _evaluate_condition(self, condition: dict, current_row: pd.Series, data: pd.DataFrame) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ."""
        try:
            if condition['type'] == 'threshold':
                indicator = condition['indicator']
                operator = condition['operator']
                threshold = condition['threshold']
                
                if indicator not in current_row or pd.isna(current_row[indicator]):
                    return False
                
                value = current_row[indicator]
                
                if operator == '>':
                    return value > threshold
                elif operator == '<':
                    return value < threshold
                elif operator == '>=':
                    return value >= threshold
                elif operator == '<=':
                    return value <= threshold
                else:
                    return False
            
            elif condition['type'] == 'crossover':
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞
                if len(data) < 2:
                    return False
                
                ind1 = condition['indicator1']
                ind2 = condition['indicator2']
                direction = condition.get('direction', 'above')
                
                if ind1 not in data.columns or ind2 not in data.columns:
                    return False
                
                current_val1 = data.iloc[-1][ind1]
                current_val2 = data.iloc[-1][ind2]
                prev_val1 = data.iloc[-2][ind1]
                prev_val2 = data.iloc[-2][ind2]
                
                if any(pd.isna([current_val1, current_val2, prev_val1, prev_val2])):
                    return False
                
                if direction == 'above':
                    return prev_val1 <= prev_val2 and current_val1 > current_val2
                elif direction == 'below':
                    return prev_val1 >= prev_val2 and current_val1 < current_val2
            
            return False
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è {{condition}}: {{e}}")
            return False
'''
        
        return code


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
    print("üß¨ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —á–µ—Ä–µ–∑ —ç–≤–æ–ª—é—Ü–∏—é")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = Path(__file__).parent / "discovery_config.json"
    
    try:
        discovery = EvolutionaryStrategyDiscovery(str(config_path))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_config = discovery.config['data_settings']
        print(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {data_config['default_ticker']}")
        
        data = yf.download(
            tickers=data_config['default_ticker'],
            period=data_config['default_period'],
            interval=data_config['default_interval'],
            auto_adjust=True,
            progress=False
        )
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        if isinstance(data.columns, pd.MultiIndex):
            data.columns = data.columns.droplevel(1)
        
        if data is None or data.empty:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data)} —Å–≤–µ—á–µ–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é
        results = discovery.run_evolution(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        discovery.save_results(results)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*60)
        print("üéâ –ü–û–ò–°–ö –°–¢–†–ê–¢–ï–ì–ò–ô –ó–ê–í–ï–†–®–ï–ù")
        print("="*60)
        print(f"üèÜ –õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞: {results['best_score']:.3f}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['total_duration_minutes']:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {results['total_evaluations']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {results['successful_evaluations']} ({results['success_rate']*100:.1f}%)")
        
        if results['best_individual']:
            best = results['best_individual']
            print(f"üîß –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {len(best['indicators'])}")
            print(f"üìã –£—Å–ª–æ–≤–∏–π –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö: {best['metadata']['num_conditions']}")
            print("üìÅ –§–∞–π–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∏ strategies/new –∏ configs/new")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()