# diagnostic_indicators.py
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –≤ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ

import pandas as pd
import yfinance as yf
import talib
import numpy as np
import random

def test_indicator_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏."""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
    print("="*50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    data = yf.download("BTC-USD", period="3mo", interval="1d", progress=False)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    if isinstance(data.columns, pd.MultiIndex):
        data.columns = data.columns.droplevel(1)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π")
    print(f"üèõÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(data.columns)}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
    clean_data = data.dropna().copy()
    enriched_data = data.copy()
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(clean_data)} —Å—Ç—Ä–æ–∫")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è TA-Lib
    close = clean_data['Close'].astype(float).values
    high = clean_data['High'].astype(float).values
    low = clean_data['Low'].astype(float).values
    volume = clean_data['Volume'].astype(float).values
    
    print(f"üìà –ú–∞—Å—Å–∏–≤—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: close={len(close)}, high={len(high)}, low={len(low)}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_indicators = {
        'RSI': {'timeperiod': 14},
        'SMA': {'timeperiod': 20},
        'EMA': {'timeperiod': 15},
        'MACD': {'fastperiod': 12, 'slowperiod': 26, 'signalperiod': 9},
        'STOCH': {'fastk_period': 14, 'slowk_period': 3, 'slowd_period': 3},
        'CCI': {'timeperiod': 14},
        'MFI': {'timeperiod': 14},
        'WILLR': {'timeperiod': 14}
    }
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {list(test_indicators.keys())}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–¢–û–ß–ù–û –ö–ê–ö –í –í–ê–®–ï–ú –ö–û–î–ï)
    for indicator_name, params in test_indicators.items():
        try:
            print(f"\n  üîß –î–æ–±–∞–≤–ª—è–µ–º {indicator_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
            
            if hasattr(talib, indicator_name.upper()):
                indicator_func = getattr(talib, indicator_name.upper())
                
                if indicator_name.upper() == 'RSI':
                    result = indicator_func(close, timeperiod=params.get('timeperiod', 14))
                    enriched_data['RSI'] = pd.Series(result, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω RSI -> –∫–æ–ª–æ–Ω–∫–∞ 'RSI'")
                
                elif indicator_name.upper() == 'MACD':
                    macd, macdsignal, macdhist = indicator_func(
                        close, 
                        fastperiod=params.get('fastperiod', 12),
                        slowperiod=params.get('slowperiod', 26),
                        signalperiod=params.get('signalperiod', 9)
                    )
                    enriched_data['MACD'] = pd.Series(macd, index=clean_data.index)
                    enriched_data['MACD_signal'] = pd.Series(macdsignal, index=clean_data.index)
                    enriched_data['MACD_hist'] = pd.Series(macdhist, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω MACD -> –∫–æ–ª–æ–Ω–∫–∏ 'MACD', 'MACD_signal', 'MACD_hist'")
                
                elif indicator_name.upper() == 'SMA':
                    result = indicator_func(close, timeperiod=params.get('timeperiod', 20))
                    enriched_data['SMA'] = pd.Series(result, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω SMA -> –∫–æ–ª–æ–Ω–∫–∞ 'SMA'")
                
                elif indicator_name.upper() == 'EMA':
                    result = indicator_func(close, timeperiod=params.get('timeperiod', 20))
                    enriched_data['EMA'] = pd.Series(result, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω EMA -> –∫–æ–ª–æ–Ω–∫–∞ 'EMA'")
                
                elif indicator_name.upper() == 'STOCH':
                    slowk, slowd = indicator_func(
                        high, low, close,
                        fastk_period=params.get('fastk_period', 14),
                        slowk_period=params.get('slowk_period', 3),
                        slowd_period=params.get('slowd_period', 3)
                    )
                    enriched_data['STOCH_k'] = pd.Series(slowk, index=clean_data.index)
                    enriched_data['STOCH_d'] = pd.Series(slowd, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω STOCH -> –∫–æ–ª–æ–Ω–∫–∏ 'STOCH_k', 'STOCH_d'")
                
                elif indicator_name.upper() == 'CCI':
                    result = indicator_func(high, low, close, timeperiod=params.get('timeperiod', 14))
                    enriched_data['CCI'] = pd.Series(result, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω CCI -> –∫–æ–ª–æ–Ω–∫–∞ 'CCI'")
                
                elif indicator_name.upper() == 'MFI':
                    if volume is not None:
                        result = indicator_func(high, low, close, volume, timeperiod=params.get('timeperiod', 14))
                        enriched_data['MFI'] = pd.Series(result, index=clean_data.index)
                        print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω MFI -> –∫–æ–ª–æ–Ω–∫–∞ 'MFI'")
                
                elif indicator_name.upper() == 'WILLR':
                    result = indicator_func(high, low, close, timeperiod=params.get('timeperiod', 14))
                    enriched_data['WILLR'] = pd.Series(result, index=clean_data.index)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω WILLR -> –∫–æ–ª–æ–Ω–∫–∞ 'WILLR'")
                
            else:
                print(f"    ‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {indicator_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TA-Lib")
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å {indicator_name}: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ï –ö–û–õ–û–ù–ö–ò:")
    original_cols = list(data.columns)
    new_cols = [col for col in enriched_data.columns if col not in original_cols]
    
    print(f"  üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö: {original_cols}")
    print(f"  üÜï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö: {new_cols}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•:")
    for col in new_cols:
        non_na_count = enriched_data[col].notna().sum()
        print(f"  {col}: {non_na_count}/{len(enriched_data)} –Ω–µ-NaN –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
        last_values = enriched_data[col].dropna().tail(3).values
        print(f"    –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {last_values}")
    
    return enriched_data, new_cols

def test_condition_generation_vs_reality(available_indicators):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —É—Å–ª–æ–≤–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
    
    print(f"\n\nüé≤ –ü–†–û–í–ï–†–ö–ê –°–û–í–ü–ê–î–ï–ù–ò–Ø –£–°–õ–û–í–ò–ô –ò –ö–û–õ–û–ù–û–ö")
    print("="*50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç _generate_conditions
    indicator_pool = ['RSI', 'SMA', 'EMA', 'MACD', 'STOCH', 'CCI', 'MFI', 'WILLR']
    
    print(f"üéØ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ø—É–ª–µ (–∏–∑ indicator_pool): {indicator_pool}")
    print(f"üîß –†–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {available_indicators}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–í–ü–ê–î–ï–ù–ò–ô:")
    for indicator in indicator_pool:
        if indicator in available_indicators:
            print(f"  ‚úÖ {indicator}: –°–û–í–ü–ê–î–ê–ï–¢")
        else:
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
            similar = [col for col in available_indicators if indicator in col]
            if similar:
                print(f"  ‚ö†Ô∏è {indicator}: –ù–ï –°–û–í–ü–ê–î–ê–ï–¢, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ: {similar}")
            else:
                print(f"  ‚ùå {indicator}: –ù–ï –ù–ê–ô–î–ï–ù")
    
    return indicator_pool

def test_condition_evaluation(enriched_data, new_cols):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —É—Å–ª–æ–≤–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    print(f"\n\nüßÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¶–ï–ù–ö–ò –£–°–õ–û–í–ò–ô")
    print("="*50)
    
    if len(enriched_data) < 10:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_row = enriched_data.iloc[-1]
    print(f"üìä –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {test_row.name}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    print(f"\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è {len(new_cols)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    
    successful_conditions = 0
    failed_conditions = 0
    
    for i, col in enumerate(new_cols):
        print(f"\n  –£—Å–ª–æ–≤–∏–µ #{i+1}: –¢–µ—Å—Ç–∏—Ä—É–µ–º '{col}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö
        if col not in test_row:
            print(f"    ‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{col}' –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ test_row")
            failed_conditions += 1
            continue
        
        value = test_row[col]
        print(f"    üìà –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
        if pd.isna(value):
            print(f"    ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ NaN")
            failed_conditions += 1
            continue
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        threshold = float(value) * 0.9  # –ù–∞ 10% –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        condition = {
            'type': 'threshold',
            'indicator': col,
            'operator': '>',
            'threshold': threshold
        }
        
        print(f"    üéØ –£—Å–ª–æ–≤–∏–µ: {value} > {threshold}")
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
        try:
            if condition['operator'] == '>':
                result = float(value) > float(threshold)
            else:
                result = False
            
            print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            if result:
                successful_conditions += 1
            else:
                failed_conditions += 1
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            failed_conditions += 1
    
    print(f"\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–°–õ–û–í–ò–ô:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_conditions}")
    print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–æ–≤: {failed_conditions}")
    # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    total_conditions = successful_conditions + failed_conditions
    if total_conditions > 0:
        print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_conditions/total_conditions*100:.1f}%")
    else:
        print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0.0% (–Ω–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    
    try:
        print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –≠–í–û–õ–Æ–¶–ò–û–ù–ù–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
        print("="*60)
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        enriched_data, new_cols = test_indicator_generation()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω
        indicator_pool = test_condition_generation_vs_reality(new_cols)
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —É—Å–ª–æ–≤–∏–π
        test_condition_evaluation(enriched_data, new_cols)
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        print(f"\n\nüéØ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
        print("="*50)
        
        if len(new_cols) == 0:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É TA-Lib –∏ –ª–æ–≥–∏–∫—É _add_indicators")
        else:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_cols)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        conflicts = []
        for indicator in indicator_pool:
            if indicator not in new_cols:
                similar = [col for col in new_cols if indicator in col]
                if similar:
                    conflicts.append((indicator, similar))
        
        if conflicts:
            print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ö–û–ù–§–õ–ò–ö–¢–´ –ò–ú–ï–ù–û–í–ê–ù–ò–Ø:")
            for base_name, actual_names in conflicts:
                print(f"   '{base_name}' -> {actual_names}")
            print("   ‚òùÔ∏è –≠—Ç–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ 'indicator not found' –æ—à–∏–±–∫–∞–º!")
        
        print(f"\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
    