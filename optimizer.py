# –§–∞–π–ª: trading/optimizer.py

import optuna
import json
from objective_function import objective_function 
from bot_process import Playground
import logging
import time
from datetime import datetime, timedelta
import yfinance as yf
import pandas as pd
import argparse
import os
import numpy as np
from tqdm import tqdm
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
optuna.logging.set_verbosity(optuna.logging.WARNING)
try:
    plt.style.use('seaborn-v0_8')
except:
    plt.style.use('seaborn')
sns.set_palette("husl")

# ==============================================================================
# üöÄ –®–ê–ì 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•  
# ==============================================================================
print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è walk-forward analysis...")
backtest_params = {
    "ticker": "BTC-USD",
    "period": "2y",
    "interval": "1h"
}
all_data = yf.download(
    tickers=backtest_params["ticker"],
    period=backtest_params["period"],
    interval=backtest_params["interval"],
    auto_adjust=True
)

if all_data is None or all_data.empty:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.")
    exit()

print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(all_data)} —Å–≤–µ—á–µ–π.")
print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {all_data.index[0].strftime('%Y-%m-%d')} ‚Üí {all_data.index[-1].strftime('%Y-%m-%d')}")
print("="*80)


def generate_walk_forward_charts(walk_forward_results: dict, strategy_name: str) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è walk-forward –∞–Ω–∞–ª–∏–∑–∞.
    """
    windows = walk_forward_results['windows']
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    charts_dir = Path('charts')
    charts_dir.mkdir(exist_ok=True)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    successful_windows = [w for w in windows if w['success']]
    window_nums = [w['window_num'] for w in successful_windows]
    profits = [w['test_profit_pct'] for w in successful_windows]
    win_rates = [w['test_win_rate'] for w in successful_windows]
    trades_counts = [w['test_trades'] for w in successful_windows]
    sharpe_ratios = [w['test_sharpe'] for w in successful_windows]
    
    if not successful_windows:
        print("‚ö†Ô∏è  –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏-–≥—Ä–∞—Ñ–∏–∫
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle(f'üìä Walk-Forward Analysis: {strategy_name}', fontsize=16, fontweight='bold')
    
    # 1. –ü—Ä–∏–±—ã–ª—å –ø–æ –æ–∫–Ω–∞–º
    colors = ['green' if p > 0 else 'red' for p in profits]
    bars1 = ax1.bar(window_nums, profits, color=colors, alpha=0.7, edgecolor='black')
    ax1.axhline(y=0, color='black', linestyle='-', alpha=0.3)
    ax1.set_title('üí∞ –ü—Ä–∏–±—ã–ª—å –ø–æ –æ–∫–Ω–∞–º (%)', fontweight='bold')
    ax1.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
    ax1.set_ylabel('–ü—Ä–∏–±—ã–ª—å (%)')
    ax1.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, profit in zip(bars1, profits):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + (0.1 if height > 0 else -0.3),
                f'{profit:.1f}%', ha='center', va='bottom' if height > 0 else 'top', fontsize=9)
    
    # 2. Win Rate –ø–æ –æ–∫–Ω–∞–º
    ax2.plot(window_nums, win_rates, 'o-', color='blue', linewidth=2, markersize=6)
    ax2.axhline(y=50, color='gray', linestyle='--', alpha=0.5, label='50%')
    ax2.set_title('üéØ Win Rate –ø–æ –æ–∫–Ω–∞–º', fontweight='bold')
    ax2.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
    ax2.set_ylabel('Win Rate (%)')
    ax2.set_ylim(0, 100)
    ax2.grid(True, alpha=0.3)
    ax2.legend()
    
    # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    ax3.bar(window_nums, trades_counts, color='orange', alpha=0.7, edgecolor='black')
    ax3.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫', fontweight='bold')
    ax3.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
    ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
    ax3.grid(True, alpha=0.3)
    
    # 4. Sharpe Ratio
    ax4.plot(window_nums, sharpe_ratios, 's-', color='purple', linewidth=2, markersize=6)
    ax4.axhline(y=1.0, color='gray', linestyle='--', alpha=0.5, label='Sharpe = 1.0')
    ax4.axhline(y=2.0, color='green', linestyle='--', alpha=0.5, label='Sharpe = 2.0')
    ax4.set_title('üìà Sharpe Ratio –ø–æ –æ–∫–Ω–∞–º', fontweight='bold')
    ax4.set_xlabel('–ù–æ–º–µ—Ä –æ–∫–Ω–∞')
    ax4.set_ylabel('Sharpe Ratio')
    ax4.grid(True, alpha=0.3)
    ax4.legend()
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    timestamp = int(time.time())
    filename = f"WalkForward_{strategy_name}_{timestamp}.png"
    filepath = charts_dir / filename
    
    plt.savefig(filepath, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"‚ú® –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
    plt.close()


def print_detailed_summary(walk_forward_results: dict) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –æ–∫–Ω–∞–º.
    """
    windows = walk_forward_results['windows']
    
    print("\n" + "="*80)
    print("üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –ü–û –û–ö–ù–ê–ú")
    print("="*80)
    
    successful_count = 0
    profitable_count = 0
    total_profit = 0
    total_trades = 0
    
    for window in windows:
        print(f"\nüóìÔ∏è  –û–ö–ù–û {window['window_num']}:")
        print(f"   üìÖ –û–±—É—á–µ–Ω–∏–µ: {window['train_period']}")
        print(f"   üîç –¢–µ—Å—Ç: {window['test_period']}")
        print(f"   ‚öôÔ∏è  –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {window['best_params']}")
        print(f"   üéØ –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {window['optimization_score']:.4f}")
        
        if window['success']:
            successful_count += 1
            total_profit += window['test_profit_pct']
            total_trades += window['test_trades']
            
            if window['test_profit_pct'] > 0:
                profitable_count += 1
                status = "‚úÖ –ü–†–ò–ë–´–õ–¨"
            else:
                status = "‚ùå –£–ë–´–¢–û–ö"
            
            print(f"   üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {status} {window['test_profit_pct']:+.2f}%")
            print(f"   üìä –°–¥–µ–ª–æ–∫: {window['test_trades']} | Win Rate: {window['test_win_rate']:.1f}%")
            print(f"   üìà Sharpe: {window['test_sharpe']:.3f} | Sortino: {window['test_sortino']:.3f}")
            print(f"   üìâ Max Drawdown: {window['test_max_drawdown']:.2f}%")
        else:
            error_msg = window.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"   ‚ùå –ü–†–û–í–ê–õ: {error_msg}")
    
    print(f"\n" + "-"*80)
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω: {successful_count}/{len(windows)} ({successful_count/len(windows)*100:.1f}%)")
    print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: {profitable_count}/{successful_count} ({profitable_count/successful_count*100:.1f}% –æ—Ç —É—Å–ø–µ—à–Ω—ã—Ö)" if successful_count > 0 else "   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: 0")
    print(f"   üíµ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {total_profit/successful_count:.2f}%" if successful_count > 0 else "   üíµ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: N/A")
    print(f"   üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")


def run_walk_forward_optimization(all_data: pd.DataFrame, opt_config_path: str, n_trials_per_window: int = 100) -> dict:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Walk-Forward Analysis - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–Ω–∞—Ö.
    
    Args:
        all_data: –ü–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        opt_config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏  
        n_trials_per_window: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–µ –æ–∫–Ω–æ
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –≤—Å–µ–º –æ–∫–Ω–∞–º
    """
    print("\n" + "="*80)
    print("üîÑ –ù–ê–ß–ò–ù–ê–ï–ú WALK-FORWARD ANALYSIS (–°–ö–û–õ–¨–ó–Ø–©–ò–ï –û–ö–ù–ê)")
    print("="*80)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–æ–Ω
    train_window_months = 9  # 9 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    test_window_months = 3   # 3 –º–µ—Å—è—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    step_months = 3          # –°–¥–≤–∏–≥ –Ω–∞ 3 –º–µ—Å—è—Ü–∞
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–Ω–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    train_window_days = train_window_months * 30 * 24
    test_window_days = test_window_months * 30 * 24
    step_days = step_months * 30 * 24
    
    total_days = len(all_data)
    window_results = []
    
    print(f"üìÖ –ü–ê–†–ê–ú–ï–¢–†–´ –û–ö–û–ù:")
    print(f"   üéØ –û–±—É—á–µ–Ω–∏–µ: {train_window_months} –º–µ—Å. (~{train_window_days} –¥–Ω–µ–π)")
    print(f"   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_window_months} –º–µ—Å. (~{test_window_days} –¥–Ω–µ–π)")
    print(f"   ‚û°Ô∏è –®–∞–≥ —Å–¥–≤–∏–≥–∞: {step_months} –º–µ—Å. (~{step_days} –¥–Ω–µ–π)")
    print(f"   üìä –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {total_days} –¥–Ω–µ–π")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω
    window_count = 0
    start_idx = 0
    
    while start_idx + train_window_days + test_window_days <= total_days:
        window_count += 1
        start_idx += step_days
    
    print(f"üìä –ö–û–õ–ò–ß–ï–°–¢–í–û –û–ö–û–ù: {window_count}")
    print(f"üî• –û–ë–©–ò–ï –ò–¢–ï–†–ê–¶–ò–ò: {window_count * n_trials_per_window}")
    
    # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω
    total_iterations = window_count * n_trials_per_window
    overall_start = time.time()
    
    print("\n" + "-"*80)
    print(f"‚è∞ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_iterations * 0.5 / 60:.1f} –º–∏–Ω—É—Ç")
    print("-"*80)
    
    # ==================================================================
    # üîÑ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ: –ü–û –ö–ê–ñ–î–û–ú–£ –û–ö–ù–£
    # ==================================================================
    
    start_idx = 0
    
    for window_num in range(1, window_count + 1):
        window_start_time = time.time()
        
        print(f"\nüóìÔ∏è –û–ö–ù–û {window_num}/{window_count}:")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞
        train_start = start_idx
        train_end = start_idx + train_window_days
        test_start = train_end
        test_end = test_start + test_window_days
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        train_data = all_data.iloc[train_start:train_end].copy()
        test_data = all_data.iloc[test_start:test_end].copy()
        
        train_period = f"{train_data.index[0].strftime('%Y-%m-%d')} ‚Üí {train_data.index[-1].strftime('%Y-%m-%d')}"
        test_period = f"{test_data.index[0].strftime('%Y-%m-%d')} ‚Üí {test_data.index[-1].strftime('%Y-%m-%d')}"
        
        print(f"   üéØ –û–±—É—á–µ–Ω–∏–µ: {train_period} ({len(train_data)} —Å–≤–µ—á–µ–π)")
        print(f"   üîç –¢–µ—Å—Ç:       {test_period} ({len(test_data)} —Å–≤–µ—á–µ–π)")
        
        # ==============================================================
        # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ê –û–ë–£–ß–ê–Æ–©–ò–• –î–ê–ù–ù–´–•
        # ==============================================================
        
        print(f"   üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ {n_trials_per_window} –∏—Ç–µ—Ä–∞—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        study_name = f'walk_forward_window_{window_num}_{int(time.time())}'
        study = optuna.create_study(direction='maximize', study_name=study_name)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        optimization_start = time.time()
        
        with tqdm(total=n_trials_per_window, desc=f"      üîç –û–∫–Ω–æ {window_num}", leave=False, ncols=80) as pbar:
            def callback(study, trial):
                pbar.update(1)
                if trial.value is not None:
                    pbar.set_postfix({
                        'Best': f'{study.best_value:.3f}',
                        'Current': f'{trial.value:.3f}'
                    })
            
            study.optimize(
                lambda trial: objective_function(trial, train_data, opt_config_path), 
                n_trials=n_trials_per_window,
                callbacks=[callback]
            )
        
        optimization_time = time.time() - optimization_start
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization_time:.1f}—Å")
        
        best_params = study.best_trial.params
        best_score = study.best_trial.value
        
        print(f"   ‚úÖ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
        print(f"   üìà –õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞: {best_score:.4f}")
        
        # ==============================================================
        # üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–´–• –î–ê–ù–ù–´–•
        # ==============================================================
        
        print(f"   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        with open(opt_config_path, 'r', encoding='utf-8') as f:
            opt_config = json.load(f)
        
        test_config = {
            "bot_name": f"WalkForward_W{window_num}_Test_{int(time.time())}",
            "strategy_file": opt_config["strategy_file"],
            "risk_config_file": "configs/live_default.json",
            "strategy_params": best_params,
            "generate_chart": False  # –û—Ç–∫–ª—é—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        }
        
        try:
            test_playground = Playground(test_config, test_config['bot_name'], test_data)
            test_playground.run()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            test_history = test_playground.risk_manager.performance_tracker.trade_history
            test_history_dicts = [trade.__dict__ for trade in test_history]
            
            from analytics.metrics_calculator import MetricsCalculator
            from risk_management.config_manager import ConfigManager
            
            base_config = ConfigManager.load_config(test_config['risk_config_file'])
            initial_balance = base_config.trading.initial_balance
            
            if len(test_history_dicts) > 0:
                test_calculator = MetricsCalculator(trade_history=test_history_dicts, initial_balance=initial_balance)
                test_metrics = test_calculator.calculate_all_metrics()
                
                test_profit = sum(t['profit'] for t in test_history_dicts)
                test_trades = len(test_history_dicts)
                test_win_rate = (sum(1 for t in test_history_dicts if t['success']) / test_trades * 100) if test_trades > 0 else 0
                test_max_drawdown = test_metrics.max_drawdown_pct
                
                print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å: ${test_profit:.2f} ({test_profit/initial_balance*100:+.2f}%)")
                print(f"   üìä –°–¥–µ–ª–æ–∫: {test_trades} | Win Rate: {test_win_rate:.1f}%")
                print(f"   üìà Sharpe: {test_metrics.sharpe_ratio:.3f} | Drawdown: {test_max_drawdown:.2f}%")
                
                window_result = {
                    'window_num': window_num,
                    'train_period': train_period,
                    'test_period': test_period,
                    'best_params': best_params,
                    'optimization_score': best_score,
                    'test_profit': test_profit,
                    'test_profit_pct': test_profit/initial_balance*100,
                    'test_trades': test_trades,
                    'test_win_rate': test_win_rate,
                    'test_sharpe': test_metrics.sharpe_ratio,
                    'test_sortino': test_metrics.sortino_ratio,
                    'test_calmar': test_metrics.calmar_ratio,
                    'test_max_drawdown': test_max_drawdown,
                    'success': True
                }
                
            else:
                print(f"   ‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                window_result = {
                    'window_num': window_num,
                    'train_period': train_period, 
                    'test_period': test_period,
                    'best_params': best_params,
                    'optimization_score': best_score,
                    'test_profit': 0,
                    'test_profit_pct': 0,
                    'test_trades': 0,
                    'test_win_rate': 0,
                    'test_sharpe': 0,
                    'test_sortino': 0,
                    'test_calmar': 0,
                    'test_max_drawdown': 0,
                    'success': False
                }
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            window_result = {
                'window_num': window_num,
                'train_period': train_period,
                'test_period': test_period, 
                'best_params': best_params,
                'optimization_score': best_score,
                'test_profit': 0,
                'test_profit_pct': 0,
                'test_trades': 0,
                'test_win_rate': 0,
                'test_sharpe': 0,
                'test_sortino': 0,
                'test_calmar': 0,
                'test_max_drawdown': 0,
                'success': False,
                'error': str(e)
            }
        
        window_results.append(window_result)
        
        # –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
        start_idx += step_days
        
        window_time = time.time() - window_start_time
        remaining_windows = window_count - window_num
        estimated_remaining = remaining_windows * window_time
        
        print(f"   ‚úÖ –û–∫–Ω–æ {window_num} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {window_time:.1f}—Å!")
        if remaining_windows > 0:
            print(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ–∫–æ–Ω: {remaining_windows} (~{estimated_remaining/60:.1f} –º–∏–Ω)")
    
    total_time = time.time() - overall_start
    print(f"\nüéâ –í–°–ï –û–ö–ù–ê –ó–ê–í–ï–†–®–ï–ù–´ –ó–ê {total_time/60:.1f} –ú–ò–ù–£–¢!")
    
    return {
        'windows': window_results,
        'total_windows': window_count,
        'trials_per_window': n_trials_per_window
    }


def analyze_overfitting(walk_forward_results: dict) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã walk-forward –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    """
    windows = walk_forward_results['windows']
    
    print("\n" + "="*80)
    print("üßê –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø (OVERFITTING ANALYSIS)")
    print("="*80)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    profits = [w['test_profit_pct'] for w in windows if w['success']]
    trades = [w['test_trades'] for w in windows if w['success']]
    win_rates = [w['test_win_rate'] for w in windows if w['success']]
    sharpe_ratios = [w['test_sharpe'] for w in windows if w['success']]
    
    successful_windows = len(profits)
    total_windows = len(windows)
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–∫–æ–Ω: {successful_windows}/{total_windows} ({successful_windows/total_windows*100:.1f}%)")
    
    if successful_windows == 0:
        print("‚ùå –ù–ï–¢ –£–°–ü–ï–®–ù–´–• –û–ö–û–ù! –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω–∞.")
        return {'overfitting_score': 100, 'verdict': '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ'}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏
    mean_profit = np.mean(profits)
    std_profit = np.std(profits)
    profit_cv = (std_profit / abs(mean_profit) * 100) if mean_profit != 0 else 999
    
    profitable_windows = sum(1 for p in profits if p > 0)
    profit_consistency = profitable_windows / successful_windows * 100
    
    print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò:")
    print(f"   üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {mean_profit:.2f}% ¬± {std_profit:.2f}%")
    print(f"   üìä –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: {profitable_windows}/{successful_windows} ({profit_consistency:.1f}%)")
    print(f"   üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {profit_cv:.1f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–∫–Ω–∞–º
    print(f"\nüóìÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –û–ö–ù–ê–ú:")
    for i, window in enumerate(windows, 1):
        if window['success']:
            status = "‚úÖ" if window['test_profit_pct'] > 0 else "‚ùå"
            print(f"   {status} –û–∫–Ω–æ {i}: {window['test_profit_pct']:+.2f}% ({window['test_trades']} —Å–¥–µ–ª–æ–∫, WR: {window['test_win_rate']:.1f}%)")
        else:
            print(f"   ‚ùå –û–∫–Ω–æ {i}: –ü–†–û–í–ê–õ (–Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –∏–ª–∏ –æ—à–∏–±–∫–∞)")
    
    # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    losing_windows_penalty = (total_windows - profitable_windows) / total_windows * 100
    volatility_penalty = min(float(profit_cv), 100.0)  # –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ float
    consistency_bonus = profit_consistency
    
    overfitting_score = (
        losing_windows_penalty * 0.4 +  # 40% - —à—Ç—Ä–∞—Ñ –∑–∞ —É–±—ã—Ç–æ—á–Ω—ã–µ –æ–∫–Ω–∞
        volatility_penalty * 0.4 +      # 40% - —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        (100 - consistency_bonus) * 0.2  # 20% - —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    )
    
    print(f"\nüéØ –û–¶–ï–ù–ö–ê –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø: {overfitting_score:.1f}%")
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if overfitting_score < 20:
        verdict = "üü¢ –û–¢–õ–ò–ß–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è! –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ"
        recommendation = "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
    elif overfitting_score < 40:
        verdict = "üü° –ü–†–ò–ï–ú–õ–ï–ú–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
        recommendation = "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏."
    elif overfitting_score < 70:
        verdict = "üü† –°–û–ú–ù–ò–¢–ï–õ–¨–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"
        recommendation = "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    else:
        verdict = "üî¥ –ü–õ–û–•–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ"
        recommendation = "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞. –ù—É–∂–µ–Ω –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–æ–¥—Ö–æ–¥–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö."
    
    print(f"\n{verdict}")
    print(f"üí° {recommendation}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if mean_profit > 50:
        print(f"‚ö†Ô∏è  –ü–û–î–û–ó–†–ï–ù–ò–ï: –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å {mean_profit:.1f}% —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞!")
    
    if profit_cv > 200:
        print(f"‚ö†Ô∏è  –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ {profit_cv:.1f}% —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ö–∞–æ—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!")
    
    print("\n" + "="*80)
    
    return {
        'overfitting_score': overfitting_score,
        'verdict': verdict,
        'successful_windows': successful_windows,
        'total_windows': total_windows,
        'mean_profit': mean_profit,
        'profit_consistency': profit_consistency,
        'profit_cv': profit_cv,
        'recommendation': recommendation
    }


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Walk-Forward –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")
    parser.add_argument(
        "config", 
        help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, configs/optimizer/ema_crossover.json)."
    )
    parser.add_argument(
        "--trials", 
        type=int, 
        default=100,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–µ –æ–∫–Ω–æ."
    )
    args = parser.parse_args()

    with open(args.config, 'r', encoding='utf-8') as f:
        opt_config = json.load(f)
    strategy_name = opt_config.get("strategy_file", "champion")

    print(f"\nüöÄ –ó–ê–ü–£–°–ö WALK-FORWARD ANALYSIS")
    print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
    print(f"üî• –ò—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ–∫–Ω–æ: {args.trials}")
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º walk-forward analysis
    walk_forward_results = run_walk_forward_optimization(
        all_data=all_data, 
        opt_config_path=args.config, 
        n_trials_per_window=args.trials
    )
    
    total_time = time.time() - start_time
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    print_detailed_summary(walk_forward_results)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    print(f"\nüé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏...")
    generate_walk_forward_charts(walk_forward_results, strategy_name)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
    overfitting_analysis = analyze_overfitting(walk_forward_results)
    
    print(f"\nüéâ WALK-FORWARD ANALYSIS –ó–ê–í–ï–†–®–ï–ù!")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time/60:.1f} –º–∏–Ω")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ charts/")