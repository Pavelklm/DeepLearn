# –§–∞–π–ª: trading/optimizer.py

import optuna
from objective_function import objective_function 
from bot_process import Playground
import logging
import time
from datetime import datetime, timedelta
import yfinance as yf
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
optuna.logging.set_verbosity(optuna.logging.WARNING)

# ==============================================================================
# üöÄ –®–ê–ì 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ==============================================================================
print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
backtest_params = {
    "ticker": "BTC-USD",
    "period": "2y",
    "interval": "4h"
}
ohlcv_data = yf.download(
    tickers=backtest_params["ticker"],
    period=backtest_params["period"],
    interval=backtest_params["interval"],
    auto_adjust=True
)

if ohlcv_data is None or ohlcv_data.empty:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.")
    exit()

print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(ohlcv_data)} —Å–≤–µ—á–µ–π.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
start_time = None
trial_times = []

# Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def progress_callback(study, trial):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ ETA.
    """
    global start_time, trial_times
    
    if start_time is None:
        start_time = time.time()
    
    current_time = time.time()
    trial_times.append(current_time)
    
    if len(trial_times) > 0:
        avg_time_per_trial = (current_time - start_time) / len(study.trials)
        total_trials = study.user_attrs.get("n_trials", "N/A")
        if isinstance(total_trials, int):
            remaining_trials = total_trials - len(study.trials)
            eta_seconds = remaining_trials * avg_time_per_trial
            eta_str = f" | ETA: {str(timedelta(seconds=int(eta_seconds)))}"
            progress_str = f"{len(study.trials)}/{total_trials}"
        else:
            eta_str = ""
            progress_str = f"{len(study.trials)}"
    else:
        eta_str = ""
        progress_str = f"{len(study.trials)}"

    elapsed = str(timedelta(seconds=int(current_time - start_time)))
    
    print("-" * 80)
    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_str} | –í—Ä–µ–º—è: {elapsed}{eta_str}")
    current_sharpe = trial.value if trial.value is not None else -100.0
    print(f"üìà Sharpe Ratio - –õ—É—á—à–∏–π: {study.best_value:.4f} | –¢–µ–∫—É—â–∏–π: {current_sharpe:.4f}")
    
    current_trades = trial.user_attrs.get("trade_count", "N/A")
    
    if current_trades != "N/A" and current_trades > 1:
        current_winrate = trial.user_attrs.get("win_rate", 0)
        current_profit = trial.user_attrs.get("total_profit", 0)
        current_sortino = trial.user_attrs.get("sortino_ratio", 0)
        current_calmar = trial.user_attrs.get("calmar_ratio", 0)
        print(f"üéØ –¢–µ–∫—É—â–∏–π trial:")
        print(f"   –°–¥–µ–ª–æ–∫: {current_trades} | Win Rate: {current_winrate:.1f}% | –ü—Ä–∏–±—ã–ª—å: ${current_profit:.2f}")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ: {current_sortino:.3f} | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞: {current_calmar:.3f}")
    else:
        print(f"üéØ –¢–µ–∫—É—â–∏–π trial: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫ ({current_trades})")
    
    if study.best_trial and study.best_trial.user_attrs:
        best_trades = study.best_trial.user_attrs.get("trade_count", "N/A")
        if best_trades != "N/A" and best_trades > 1:
            best_winrate = study.best_trial.user_attrs.get("win_rate", 0)
            best_profit = study.best_trial.user_attrs.get("total_profit", 0)
            best_sortino = study.best_trial.user_attrs.get("sortino_ratio", 0)
            best_calmar = study.best_trial.user_attrs.get("calmar_ratio", 0)
            print(f"üèÜ –õ—É—á—à–∏–π trial:")
            print(f"   –°–¥–µ–ª–æ–∫: {best_trades} | Win Rate: {best_winrate:.1f}% | –ü—Ä–∏–±—ã–ª—å: ${best_profit:.2f}")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ: {best_sortino:.3f} | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞: {best_calmar:.3f}")
        else:
            print(f"üèÜ –õ—É—á—à–∏–π trial: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ ---
    if study.best_params:
        best_fast = study.best_params.get('fast_ema_period', 'N/A')
        best_slow = study.best_params.get('slow_ema_period', 'N/A')
        best_tp = study.best_params.get('tp_multiplier', 0)
        print(f"‚öôÔ∏è –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: EMA({best_fast}/{best_slow}) | TP={best_tp:.3f}")
    
    current_fast = trial.params.get('fast_ema_period', 'N/A')
    current_slow = trial.params.get('slow_ema_period', 'N/A')
    current_tp = trial.params.get('tp_multiplier', 0)
    print(f"üîß –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: EMA({current_fast}/{current_slow}) | TP={current_tp:.3f}")
    
    print("-" * 80)


def run_optimization(n_trials: int, data: pd.DataFrame, storage_name: str | None = None) -> optuna.trial.FrozenTrial:
    global start_time, trial_times
    start_time = time.time()
    trial_times = []

    print(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –ù–ê {n_trials} –ò–¢–ï–†–ê–¶–ò–ô...")
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: EMA –æ—Ç 5-50/15-200, TP –æ—Ç 1.01-1.20")
    print("=" * 80)

    if storage_name is None:
        storage_name = f'sqlite:///trading_optimization_{int(start_time)}.db'

    study_name = f'ema_crossover_btc_{int(start_time)}'
    study = optuna.create_study(
        direction='maximize',
        study_name=study_name,
        storage=storage_name
    )
    
    study.set_user_attr("n_trials", n_trials)
    
    study.optimize(lambda trial: objective_function(trial, data), n_trials=n_trials, callbacks=[progress_callback])

    print("\n" + "="*50)
    print("üèÜ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê üèÜ")
    best_trial = study.best_trial
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π: {len(study.trials)}")
    print(f"\n–õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (Sharpe Ratio): {best_trial.value:.4f}")
    
    print("\n–ó–û–õ–û–¢–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    for key, value in best_trial.params.items():
        print(f"     - {key}: {value}")
    print("="*50)

    return best_trial


if __name__ == "__main__":
    best_trial_result = run_optimization(n_trials=100, data=ohlcv_data) # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ
    best_params = best_trial_result.params
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ ---
    champion_strategy_params = {
        "fast_ema_period": best_params['fast_ema_period'],
        "slow_ema_period": best_params['slow_ema_period'],
        "tp_multiplier": best_params['tp_multiplier']
    }
    
    champion_config = {
        "bot_name": f"Champion_EMA_{best_params['fast_ema_period']}_{best_params['slow_ema_period']}",
        "strategy_file": "ema_crossover_strategy",
        "risk_config_file": "configs/live_default.json",
        "strategy_params": champion_strategy_params,
        "generate_chart": True
    }

    print("\nüìä –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –∏ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

    try:
        final_run_data = ohlcv_data.copy()

        champion_playground = Playground(champion_config, champion_config['bot_name'], final_run_data)
        champion_playground.run()
        print("‚úÖ –û—Ç—á–µ—Ç –∏ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {e}")